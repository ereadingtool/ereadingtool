
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _Bogdanp$elm_combine$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _Bogdanp$elm_combine$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _Bogdanp$elm_combine$Combine$initStream = function (s) {
	return A3(_Bogdanp$elm_combine$Combine$InputStream, s, s, 0);
};
var _Bogdanp$elm_combine$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_Bogdanp$elm_combine$Combine$app,
			p,
			st,
			_Bogdanp$elm_combine$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _Bogdanp$elm_combine$Combine$parse = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _Bogdanp$elm_combine$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _Bogdanp$elm_combine$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_Bogdanp$elm_combine$Combine$ParseLocation, '', 1, position);
				} else {
					if (_p2._1.ctor === '[]') {
						return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p2._0, currentLine + 1, position);
					} else {
						var _p3 = _p2._0;
						var length = _elm_lang$core$String$length(_p3);
						if (_elm_lang$core$Native_Utils.cmp(position, length) > -1) {
							var _v3 = (position - length) - 1,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							if (_elm_lang$core$Native_Utils.eq(currentLine, 0)) {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, 1, position);
							} else {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, currentLine, position - 1);
							}
						}
					}
				}
			}
		});
	var lines = A2(_elm_lang$core$String$split, '\n', stream.data);
	return A3(find, stream.position, 0, lines);
};
var _Bogdanp$elm_combine$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p4));
};
var _Bogdanp$elm_combine$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p5));
};
var _Bogdanp$elm_combine$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p6));
};
var _Bogdanp$elm_combine$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _Bogdanp$elm_combine$Combine$lazy = function (t) {
	return _Bogdanp$elm_combine$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _Bogdanp$elm_combine$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _Bogdanp$elm_combine$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _Bogdanp$elm_combine$Combine$primitive = _Bogdanp$elm_combine$Combine$Parser;
var _Bogdanp$elm_combine$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$map = F2(
	function (f, p) {
		return A3(_Bogdanp$elm_combine$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$>'] = _Bogdanp$elm_combine$Combine$map;
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$'] = function (res) {
	return _Bogdanp$elm_combine$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _Bogdanp$elm_combine$Combine$skip = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_Bogdanp$elm_combine$Combine_ops['<$'], x, y);
		}));
var _Bogdanp$elm_combine$Combine$mapError = _Bogdanp$elm_combine$Combine$bimap(_elm_lang$core$Basics$identity);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_Bogdanp$elm_combine$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _Bogdanp$elm_combine$Combine$withState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLocation = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLine = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withColumn = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$andThen = F2(
	function (f, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_Bogdanp$elm_combine$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andThen);
var _Bogdanp$elm_combine$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _Bogdanp$elm_combine$Combine$map, rp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andMap);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(_Bogdanp$elm_combine$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _Bogdanp$elm_combine$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine_ops['*>'], lp, p),
			rp);
	});
var _Bogdanp$elm_combine$Combine$sequence = function (ps) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_Bogdanp$elm_combine$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					ps,
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$fail = function (m) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _Bogdanp$elm_combine$Combine$emptyErr = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _Bogdanp$elm_combine$Combine$succeed = function (res) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$putState = function (state) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$modifyState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _Bogdanp$elm_combine$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _Bogdanp$elm_combine$Combine$string = function (s) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$parens = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('('),
	_Bogdanp$elm_combine$Combine$string(')'));
var _Bogdanp$elm_combine$Combine$braces = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('{'),
	_Bogdanp$elm_combine$Combine$string('}'));
var _Bogdanp$elm_combine$Combine$brackets = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('['),
	_Bogdanp$elm_combine$Combine$string(']'));
var _Bogdanp$elm_combine$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$whitespace = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _Bogdanp$elm_combine$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$end = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _Bogdanp$elm_combine$Combine$lookAhead = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _Bogdanp$elm_combine$Combine$or = F2(
	function (lp, rp) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_Bogdanp$elm_combine$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_Bogdanp$elm_combine$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _Bogdanp$elm_combine$Combine$or, _Bogdanp$elm_combine$Combine$emptyErr, xs);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<|>'] = _Bogdanp$elm_combine$Combine$or;
var _Bogdanp$elm_combine$Combine$optional = F2(
	function (res, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			p,
			_Bogdanp$elm_combine$Combine$succeed(res));
	});
var _Bogdanp$elm_combine$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return _Bogdanp$elm_combine$Combine$succeed(
									A2(f, x, y));
							},
							A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p));
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$maybe = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$many1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_Bogdanp$elm_combine$Combine$many(p));
};
var _Bogdanp$elm_combine$Combine$skipMany1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many1(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_Bogdanp$elm_combine$Combine$many(
				A2(_Bogdanp$elm_combine$Combine_ops['*>'], sep, p)));
	});
var _Bogdanp$elm_combine$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$maybe(sep));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepEndBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$skipMany = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_Bogdanp$elm_combine$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _Bogdanp$elm_combine$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _Bogdanp$elm_combine$Combine_Char$crlf = A2(
	_Bogdanp$elm_combine$Combine_ops['<$'],
	_elm_lang$core$Native_Utils.chr('\n'),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine$regex('\r\n'),
		'expected crlf'));
var _Bogdanp$elm_combine$Combine_Char$satisfy = function (pred) {
	return _Bogdanp$elm_combine$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _p0 = _elm_lang$core$String$uncons(stream.input);
				if (_p0.ctor === 'Just') {
					var _p1 = _p0._0._0;
					return pred(_p1) ? {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p0._0._1, position: stream.position + 1}),
						_2: _elm_lang$core$Result$Ok(_p1)
					} : {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine_Char$char = function (c) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(c)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			_elm_lang$core$Basics$toString(c)));
};
var _Bogdanp$elm_combine$Combine_Char$anyChar = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		_elm_lang$core$Basics$always(true)),
	'expected any character');
var _Bogdanp$elm_combine$Combine_Char$oneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected one of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$noneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			function (_p2) {
				return !A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs, _p2);
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected none of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$space = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr(' '))),
	'expected space');
var _Bogdanp$elm_combine$Combine_Char$tab = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\t'))),
	'expected tab');
var _Bogdanp$elm_combine$Combine_Char$newline = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\n'))),
	'expected newline');
var _Bogdanp$elm_combine$Combine_Char$eol = A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _Bogdanp$elm_combine$Combine_Char$newline, _Bogdanp$elm_combine$Combine_Char$crlf);
var _Bogdanp$elm_combine$Combine_Char$lower = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isLower),
	'expected a lowercase character');
var _Bogdanp$elm_combine$Combine_Char$upper = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isUpper),
	'expected an uppercase character');
var _Bogdanp$elm_combine$Combine_Char$digit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isDigit),
	'expected a digit');
var _Bogdanp$elm_combine$Combine_Char$octDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isOctDigit),
	'expected an octal digit');
var _Bogdanp$elm_combine$Combine_Char$hexDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isHexDigit),
	'expected a hexadecimal digit');

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = F2(
	function (decoder, wrapped) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			wrapped,
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				var _p3 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
					input);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(fallback);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p3._0);
				}
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _elm_community$json_extra$Json_Decode_Extra$when = F3(
	function (checkDecoder, check, passDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (checkVal) {
				return check(checkVal) ? passDecoder : _elm_lang$core$Json_Decode$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Check failed with input `',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(checkVal),
							'`')));
			},
			checkDecoder);
	});
var _elm_community$json_extra$Json_Decode_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Json_Decode$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Json_Decode$succeed(
		{ctor: '[]'}));
var _elm_community$json_extra$Json_Decode_Extra$collection = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (length) {
			return _elm_community$json_extra$Json_Decode_Extra$combine(
				A2(
					_elm_lang$core$List$map,
					function (index) {
						return A2(
							_elm_lang$core$Json_Decode$field,
							_elm_lang$core$Basics$toString(index),
							decoder);
					},
					A2(_elm_lang$core$List$range, 0, length - 1)));
		},
		A2(_elm_lang$core$Json_Decode$field, 'length', _elm_lang$core$Json_Decode$int));
};
var _elm_community$json_extra$Json_Decode_Extra$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _elm_community$json_extra$Json_Decode_Extra$parseInt = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toInt(_p1));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$parseFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p2) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toFloat(_p2));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$doubleEncoded = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p3) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				A2(_elm_lang$core$Json_Decode$decodeString, decoder, _p3));
		},
		_elm_lang$core$Json_Decode$string);
};
var _elm_community$json_extra$Json_Decode_Extra$keys = A2(
	_elm_lang$core$Json_Decode$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, acc) {
				var _p5 = _p4;
				return {ctor: '::', _0: _p5._0, _1: acc};
			}),
		{ctor: '[]'}),
	_elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'})));
var _elm_community$json_extra$Json_Decode_Extra$sequenceHelp = F2(
	function (decoders, jsonValues) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(jsonValues),
			_elm_lang$core$List$length(decoders))) ? _elm_lang$core$Json_Decode$fail('Number of decoders does not match number of values') : _elm_community$json_extra$Json_Decode_Extra$fromResult(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A3(_elm_lang$core$List$map2, _elm_lang$core$Json_Decode$decodeValue, decoders, jsonValues)));
	});
var _elm_community$json_extra$Json_Decode_Extra$sequence = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_community$json_extra$Json_Decode_Extra$sequenceHelp(decoders),
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$indexedList = function (indexedDecoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (values) {
			return _elm_community$json_extra$Json_Decode_Extra$sequence(
				A2(
					_elm_lang$core$List$map,
					indexedDecoder,
					A2(
						_elm_lang$core$List$range,
						0,
						_elm_lang$core$List$length(values) - 1)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _p6 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value),
				json);
			if (_p6.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, fieldName, decoder));
			} else {
				return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, finishDecoding, _elm_lang$core$Json_Decode$value);
	});
var _elm_community$json_extra$Json_Decode_Extra$withDefault = F2(
	function (fallback, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(fallback),
			_elm_lang$core$Json_Decode$maybe(decoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples = F2(
	function (keyDecoder, tuples) {
		var _p7 = tuples;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
		} else {
			var _p8 = A2(_elm_lang$core$Json_Decode$decodeString, keyDecoder, _p7._0._0);
			if (_p8.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p9) {
						return _elm_lang$core$Json_Decode$succeed(
							A3(_elm_lang$core$Dict$insert, _p8._0, _p7._0._1, _p9));
					},
					A2(_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples, keyDecoder, _p7._1));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p8._0);
			}
		}
	});
var _elm_community$json_extra$Json_Decode_Extra$dict2 = F2(
	function (keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples(keyDecoder),
			_elm_lang$core$Json_Decode$keyValuePairs(valueDecoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$set = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(decoder));
};
var _elm_community$json_extra$Json_Decode_Extra$date = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p10) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$Date$fromString(_p10));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$andMap = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$json_extra$Json_Decode_Extra_ops = _elm_community$json_extra$Json_Decode_Extra_ops || {};
_elm_community$json_extra$Json_Decode_Extra_ops['|:'] = _elm_lang$core$Basics$flip(_elm_community$json_extra$Json_Decode_Extra$andMap);

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _jinjor$elm_html_parser$Escape$dict = _elm_lang$core$Dict$fromList(
	A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '&Tab;', _1: ''},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '&NewLine;', _1: '\n'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&excl;', _1: '!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&quot;', _1: '\"'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&QUOT;', _1: '\"'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&num;', _1: '#'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&dollar;', _1: '$'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&percnt;', _1: '%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&amp;', _1: '&'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&AMP;', _1: '&'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&apos;', _1: '\''},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&lpar;', _1: '('},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&rpar;', _1: ')'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&ast;', _1: '*'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&midast;', _1: '*'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&plus;', _1: '+'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&comma;', _1: ','},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&period;', _1: '.'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&sol;', _1: '/'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&colon;', _1: ':'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&semi;', _1: ';'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&lt;', _1: '<'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&LT;', _1: '<'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&equals;', _1: '='},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&gt;', _1: '>'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&GT;', _1: '>'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&quest;', _1: '?'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&commat;', _1: '@'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&lsqb;', _1: '['},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&lbrack;', _1: '['},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&bsol;', _1: '\\'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&rsqb;', _1: ']'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&rbrack;', _1: ']'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Hat;', _1: '^'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '_&lowbar;', _1: ''},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&grave;', _1: '`'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&DiacriticalGrave;', _1: '`'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&lcub;', _1: '{'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&lbrace;', _1: '{'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&verbar;', _1: '|'},
																																										_1: {ctor: '[]'}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '&vert;', _1: '|'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&VerticalLine;', _1: '|'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&rcub;', _1: '}'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&rbrace;', _1: '}'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&nbsp;', _1: ' '},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&NonBreakingSpace;', _1: ' '},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&iexcl;', _1: '¡'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&cent;', _1: '¢'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&pound;', _1: '£'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&curren;', _1: '¤'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&yen;', _1: '¥'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&brvbar;', _1: '¦'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&sect;', _1: '§'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Dot;', _1: '¨'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&die;', _1: '¨'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&DoubleDot;', _1: '¨'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&uml;', _1: '¨'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&copy;', _1: '©'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&COPY;', _1: '©'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&ordf;', _1: 'ª'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&laquo;', _1: '«'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&not;', _1: '¬'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&shy;', _1: '­'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&reg;', _1: '®'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&circledR;', _1: '®'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&REG;', _1: '®'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&macr;', _1: '¯'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&OverBar;', _1: '¯'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&strns;', _1: '¯'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&deg;', _1: '°'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&plusmn;', _1: '±'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&pm;', _1: '±'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&PlusMinus;', _1: '±'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&sup2;', _1: '²'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sup3;', _1: '³'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&acute;', _1: '´'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&DiacriticalAcute;', _1: '´'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&micro;', _1: 'µ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&para;', _1: '¶'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&middot;', _1: '·'},
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&centerdot;', _1: '·'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&CenterDot;', _1: '·'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&cedil;', _1: '¸'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Cedilla;', _1: '¸'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&sup1;', _1: '¹'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&ordm;', _1: 'º'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&raquo;', _1: '»'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&frac14;', _1: '¼'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&frac12;', _1: '½'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&half;', _1: '½'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&frac34;', _1: '¾'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&iquest;', _1: '¿'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Agrave;', _1: 'À'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Aacute;', _1: 'Á'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&Acirc;', _1: 'Â'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Atilde;', _1: 'Ã'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Auml;', _1: 'Ä'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Aring;', _1: 'Å'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&AElig;', _1: 'Æ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Ccedil;', _1: 'Ç'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&Egrave;', _1: 'È'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Eacute;', _1: 'É'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Ecirc;', _1: 'Ê'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Euml;', _1: 'Ë'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Igrave;', _1: 'Ì'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Iacute;', _1: 'Í'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Icirc;', _1: 'Î'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Iuml;', _1: 'Ï'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&ETH;', _1: 'Ð'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Ntilde;', _1: 'Ñ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Ograve;', _1: 'Ò'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Oacute;', _1: 'Ó'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Ocirc;', _1: 'Ô'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Otilde;', _1: 'Õ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Ouml;', _1: 'Ö'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&times;', _1: '×'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Oslash;', _1: 'Ø'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Ugrave;', _1: 'Ù'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Uacute;', _1: 'Ú'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Ucirc;', _1: 'Û'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&Uuml;', _1: 'Ü'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&Yacute;', _1: 'Ý'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&THORN;', _1: 'Þ'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&szlig;', _1: 'ß'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&agrave;', _1: 'à'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&aacute;', _1: 'á'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&acirc;', _1: 'â'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&atilde;', _1: 'ã'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&auml;', _1: 'ä'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&aring;', _1: 'å'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&aelig;', _1: 'æ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&ccedil;', _1: 'ç'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&egrave;', _1: 'è'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&eacute;', _1: 'é'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ecirc;', _1: 'ê'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&euml;', _1: 'ë'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&igrave;', _1: 'ì'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&iacute;', _1: 'í'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&icirc;', _1: 'î'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&iuml;', _1: 'ï'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&eth;', _1: 'ð'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&ntilde;', _1: 'ñ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ograve;', _1: 'ò'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&oacute;', _1: 'ó'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ocirc;', _1: 'ô'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&otilde;', _1: 'õ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ouml;', _1: 'ö'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&divide;', _1: '÷'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&div;', _1: '÷'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&oslash;', _1: 'ø'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ugrave;', _1: 'ù'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&uacute;', _1: 'ú'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ucirc;', _1: 'û'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&uuml;', _1: 'ü'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&yacute;', _1: 'ý'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&thorn;', _1: 'þ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&yuml;', _1: 'ÿ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Amacr;', _1: 'Ā'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&amacr;', _1: 'ā'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Abreve;', _1: 'Ă'},
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&abreve;', _1: 'ă'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Aogon;', _1: 'Ą'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&aogon;', _1: 'ą'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&Cacute;', _1: 'Ć'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&cacute;', _1: 'ć'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&Ccirc;', _1: 'Ĉ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&ccirc;', _1: 'ĉ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Cdot;', _1: 'Ċ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&cdot;', _1: 'ċ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Ccaron;', _1: 'Č'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&ccaron;', _1: 'č'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Dcaron;', _1: 'Ď'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&dcaron;', _1: 'ď'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Dstrok;', _1: 'Đ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&dstrok;', _1: 'đ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Emacr;', _1: 'Ē'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&emacr;', _1: 'ē'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Edot;', _1: 'Ė'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&edot;', _1: 'ė'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Eogon;', _1: 'Ę'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&eogon;', _1: 'ę'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ecaron;', _1: 'Ě'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&ecaron;', _1: 'ě'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Gcirc;', _1: 'Ĝ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&gcirc;', _1: 'ĝ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Gbreve;', _1: 'Ğ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&gbreve;', _1: 'ğ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Gdot;', _1: 'Ġ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&gdot;', _1: 'ġ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Gcedil;', _1: 'Ģ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Hcirc;', _1: 'Ĥ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&hcirc;', _1: 'ĥ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Hstrok;', _1: 'Ħ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&hstrok;', _1: 'ħ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Itilde;', _1: 'Ĩ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&itilde;', _1: 'ĩ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Imacr;', _1: 'Ī'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&imacr;', _1: 'ī'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Iogon;', _1: 'Į'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&iogon;', _1: 'į'},
																																														_1: {ctor: '[]'}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Idot;', _1: 'İ'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&imath;', _1: 'ı'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&inodot;', _1: 'ı'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&IJlig;', _1: 'Ĳ'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&ijlig;', _1: 'ĳ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Jcirc;', _1: 'Ĵ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&jcirc;', _1: 'ĵ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&Kcedil;', _1: 'Ķ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&kcedil;', _1: 'ķ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&kgreen;', _1: 'ĸ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Lacute;', _1: 'Ĺ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&lacute;', _1: 'ĺ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Lcedil;', _1: 'Ļ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&lcedil;', _1: 'ļ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Lcaron;', _1: 'Ľ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&lcaron;', _1: 'ľ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Lmidot;', _1: 'Ŀ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lmidot;', _1: 'ŀ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Lstrok;', _1: 'Ł'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&lstrok;', _1: 'ł'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Nacute;', _1: 'Ń'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&nacute;', _1: 'ń'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Ncedil;', _1: 'Ņ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&ncedil;', _1: 'ņ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Ncaron;', _1: 'Ň'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&ncaron;', _1: 'ň'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&napos;', _1: 'ŉ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&ENG;', _1: 'Ŋ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&eng;', _1: 'ŋ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Omacr;', _1: 'Ō'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&omacr;', _1: 'ō'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Odblac;', _1: 'Ő'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&odblac;', _1: 'ő'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&OElig;', _1: 'Œ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&oelig;', _1: 'œ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Racute;', _1: 'Ŕ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&racute;', _1: 'ŕ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Rcedil;', _1: 'Ŗ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&rcedil;', _1: 'ŗ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rcaron;', _1: 'Ř'},
																																															_1: {ctor: '[]'}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&rcaron;', _1: 'ř'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&Sacute;', _1: 'Ś'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&sacute;', _1: 'ś'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&Scirc;', _1: 'Ŝ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&scirc;', _1: 'ŝ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Scedil;', _1: 'Ş'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&scedil;', _1: 'ş'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Scaron;', _1: 'Š'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&scaron;', _1: 'š'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Tcedil;', _1: 'Ţ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&tcedil;', _1: 'ţ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Tcaron;', _1: 'Ť'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&tcaron;', _1: 'ť'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Tstrok;', _1: 'Ŧ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&tstrok;', _1: 'ŧ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Utilde;', _1: 'Ũ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&utilde;', _1: 'ũ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Umacr;', _1: 'Ū'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&umacr;', _1: 'ū'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ubreve;', _1: 'Ŭ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&ubreve;', _1: 'ŭ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Uring;', _1: 'Ů'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&uring;', _1: 'ů'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Udblac;', _1: 'Ű'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&udblac;', _1: 'ű'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Uogon;', _1: 'Ų'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&uogon;', _1: 'ų'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Wcirc;', _1: 'Ŵ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&wcirc;', _1: 'ŵ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Ycirc;', _1: 'Ŷ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ycirc;', _1: 'ŷ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Yuml;', _1: 'Ÿ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Zacute;', _1: 'Ź'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&zacute;', _1: 'ź'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Zdot;', _1: 'Ż'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&zdot;', _1: 'ż'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Zcaron;', _1: 'Ž'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&zcaron;', _1: 'ž'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&fnof;', _1: 'ƒ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&imped;', _1: 'Ƶ'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&gacute;', _1: 'ǵ'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&jmath;', _1: 'ȷ'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&circ;', _1: 'ˆ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&caron;', _1: 'ˇ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Hacek;', _1: 'ˇ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&breve;', _1: '˘'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Breve;', _1: '˘'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&dot;', _1: '˙'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&DiacriticalDot;', _1: '˙'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ring;', _1: '˚'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ogon;', _1: '˛'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&tilde;', _1: '˜'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&DiacriticalTilde;', _1: '˜'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&dblac;', _1: '˝'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&DiacriticalDoubleAcute;', _1: '˝'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&DownBreve;', _1: '̑'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&UnderBar;', _1: '̲'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Alpha;', _1: 'Α'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Beta;', _1: 'Β'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Gamma;', _1: 'Γ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Delta;', _1: 'Δ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Epsilon;', _1: 'Ε'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Zeta;', _1: 'Ζ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&Eta;', _1: 'Η'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Theta;', _1: 'Θ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Iota;', _1: 'Ι'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Kappa;', _1: 'Κ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Lambda;', _1: 'Λ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Mu;', _1: 'Μ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Nu;', _1: 'Ν'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Xi;', _1: 'Ξ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Omicron;', _1: 'Ο'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Pi;', _1: 'Π'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Rho;', _1: 'Ρ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Sigma;', _1: 'Σ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Tau;', _1: 'Τ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Upsilon;', _1: 'Υ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Phi;', _1: 'Φ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Chi;', _1: 'Χ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Psi;', _1: 'Ψ'},
																																																	_1: {ctor: '[]'}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&Omega;', _1: 'Ω'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&alpha;', _1: 'α'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&beta;', _1: 'β'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&gamma;', _1: 'γ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&delta;', _1: 'δ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&epsiv;', _1: 'ε'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&varepsilon;', _1: 'ε'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&epsilon;', _1: 'ε'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&zeta;', _1: 'ζ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&eta;', _1: 'η'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&theta;', _1: 'θ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&iota;', _1: 'ι'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&kappa;', _1: 'κ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&lambda;', _1: 'λ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&mu;', _1: 'μ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&nu;', _1: 'ν'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&xi;', _1: 'ξ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&omicron;', _1: 'ο'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&pi;', _1: 'π'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rho;', _1: 'ρ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sigmav;', _1: 'ς'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&varsigma;', _1: 'ς'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&sigmaf;', _1: 'ς'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&sigma;', _1: 'σ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&tau;', _1: 'τ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&upsi;', _1: 'υ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&upsilon;', _1: 'υ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&phi;', _1: 'φ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&phiv;', _1: 'φ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&varphi;', _1: 'φ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&chi;', _1: 'χ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&psi;', _1: 'ψ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&omega;', _1: 'ω'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&thetav;', _1: 'ϑ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&vartheta;', _1: 'ϑ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&thetasym;', _1: 'ϑ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Upsi;', _1: 'ϒ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&upsih;', _1: 'ϒ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&straightphi;', _1: 'ϕ'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&piv;', _1: 'ϖ'},
																																																		_1: {ctor: '[]'}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&varpi;', _1: 'ϖ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Gammad;', _1: 'Ϝ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&gammad;', _1: 'ϝ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&digamma;', _1: 'ϝ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&kappav;', _1: 'ϰ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&varkappa;', _1: 'ϰ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&rhov;', _1: 'ϱ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&varrho;', _1: 'ϱ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&epsi;', _1: 'ϵ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&straightepsilon;', _1: 'ϵ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&bepsi;', _1: '϶'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&backepsilon;', _1: '϶'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&IOcy;', _1: 'Ё'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&DJcy;', _1: 'Ђ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&GJcy;', _1: 'Ѓ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Jukcy;', _1: 'Є'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&DScy;', _1: 'Ѕ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Iukcy;', _1: 'І'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&YIcy;', _1: 'Ї'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Jsercy;', _1: 'Ј'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&LJcy;', _1: 'Љ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&NJcy;', _1: 'Њ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&TSHcy;', _1: 'Ћ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&KJcy;', _1: 'Ќ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Ubrcy;', _1: 'Ў'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&DZcy;', _1: 'Џ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Acy;', _1: 'А'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Bcy;', _1: 'Б'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Vcy;', _1: 'В'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Gcy;', _1: 'Г'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Dcy;', _1: 'Д'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&IEcy;', _1: 'Е'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ZHcy;', _1: 'Ж'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Zcy;', _1: 'З'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Icy;', _1: 'И'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Jcy;', _1: 'Й'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Kcy;', _1: 'К'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Lcy;', _1: 'Л'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Mcy;', _1: 'М'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Ncy;', _1: 'Н'},
																																																			_1: {ctor: '[]'}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Ocy;', _1: 'О'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Pcy;', _1: 'П'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&Rcy;', _1: 'Р'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Scy;', _1: 'С'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Tcy;', _1: 'Т'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Ucy;', _1: 'У'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&Fcy;', _1: 'Ф'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&KHcy;', _1: 'Х'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&TScy;', _1: 'Ц'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&CHcy;', _1: 'Ч'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&SHcy;', _1: 'Ш'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&SHCHcy;', _1: 'Щ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&HARDcy;', _1: 'Ъ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Ycy;', _1: 'Ы'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&SOFTcy;', _1: 'Ь'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ecy;', _1: 'Э'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&YUcy;', _1: 'Ю'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&YAcy;', _1: 'Я'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&acy;', _1: 'а'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&bcy;', _1: 'б'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&vcy;', _1: 'в'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&gcy;', _1: 'г'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&dcy;', _1: 'д'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&iecy;', _1: 'е'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&zhcy;', _1: 'ж'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&zcy;', _1: 'з'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&icy;', _1: 'и'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&jcy;', _1: 'й'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&kcy;', _1: 'к'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&lcy;', _1: 'л'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&mcy;', _1: 'м'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ncy;', _1: 'н'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ocy;', _1: 'о'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&pcy;', _1: 'п'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&rcy;', _1: 'р'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&scy;', _1: 'с'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&tcy;', _1: 'т'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&ucy;', _1: 'у'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fcy;', _1: 'ф'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&khcy;', _1: 'х'},
																																																				_1: {ctor: '[]'}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&tscy;', _1: 'ц'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&chcy;', _1: 'ч'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&shcy;', _1: 'ш'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&shchcy;', _1: 'щ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&hardcy;', _1: 'ъ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ycy;', _1: 'ы'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&softcy;', _1: 'ь'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&ecy;', _1: 'э'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&yucy;', _1: 'ю'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&yacy;', _1: 'я'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&iocy;', _1: 'ё'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&djcy;', _1: 'ђ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&gjcy;', _1: 'ѓ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&jukcy;', _1: 'є'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&dscy;', _1: 'ѕ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&iukcy;', _1: 'і'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&yicy;', _1: 'ї'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&jsercy;', _1: 'ј'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ljcy;', _1: 'љ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&njcy;', _1: 'њ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&tshcy;', _1: 'ћ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&kjcy;', _1: 'ќ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ubrcy;', _1: 'ў'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&dzcy;', _1: 'џ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ensp;', _1: ' '},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&emsp;', _1: ' '},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&emsp13;', _1: ' '},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&emsp14;', _1: ' '},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&numsp;', _1: ' '},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&puncsp;', _1: ' '},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&thinsp;', _1: ' '},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ThinSpace;', _1: ' '},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&hairsp;', _1: ' '},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&VeryThinSpace;', _1: ' '},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ZeroWidthSpace;', _1: '​'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&NegativeVeryThinSpace;', _1: '​'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&NegativeThinSpace;', _1: '​'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&NegativeMediumSpace;', _1: '​'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&NegativeThickSpace;', _1: '​'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&zwnj;', _1: '‌'},
																																																					_1: {ctor: '[]'}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&zwj;', _1: '‍'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&lrm;', _1: '‎'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&rlm;', _1: '‏'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&hyphen;', _1: '‐'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&dash;', _1: '‐'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ndash;', _1: '–'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&mdash;', _1: '—'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&horbar;', _1: '―'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Verbar;', _1: '‖'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Vert;', _1: '‖'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lsquo;', _1: '‘'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&OpenCurlyQuote;', _1: '‘'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&rsquo;', _1: '’'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&rsquor;', _1: '’'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&CloseCurlyQuote;', _1: '’'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&lsquor;', _1: '‚'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sbquo;', _1: '‚'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ldquo;', _1: '“'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&OpenCurlyDoubleQuote;', _1: '“'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&rdquo;', _1: '”'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&rdquor;', _1: '”'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&CloseCurlyDoubleQuote;', _1: '”'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ldquor;', _1: '„'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&bdquo;', _1: '„'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&dagger;', _1: '†'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Dagger;', _1: '‡'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&ddagger;', _1: '‡'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bull;', _1: '•'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&bullet;', _1: '•'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&nldr;', _1: '‥'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&hellip;', _1: '…'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&mldr;', _1: '…'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&permil;', _1: '‰'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&pertenk;', _1: '‱'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prime;', _1: '′'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Prime;', _1: '″'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&tprime;', _1: '‴'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&bprime;', _1: '‵'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&backprime;', _1: '‵'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&lsaquo;', _1: '‹'},
																																																						_1: {ctor: '[]'}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														},
														A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&rsaquo;', _1: '›'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&oline;', _1: '‾'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&caret;', _1: '⁁'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&hybull;', _1: '⁃'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&frasl;', _1: '⁄'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&bsemi;', _1: '⁏'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&qprime;', _1: '⁗'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&MediumSpace;', _1: ' '},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&NoBreak;', _1: '⁠'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&ApplyFunction;', _1: '⁡'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&af;', _1: '⁡'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&InvisibleTimes;', _1: '⁢'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&it;', _1: '⁢'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&InvisibleComma;', _1: '⁣'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ic;', _1: '⁣'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&euro;', _1: '€'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&tdot;', _1: '⃛'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&TripleDot;', _1: '⃛'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DotDot;', _1: '⃜'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Copf;', _1: 'ℂ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&complexes;', _1: 'ℂ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&incare;', _1: '℅'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&gscr;', _1: 'ℊ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&hamilt;', _1: 'ℋ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&HilbertSpace;', _1: 'ℋ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Hscr;', _1: 'ℋ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Hfr;', _1: 'ℌ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Poincareplane;', _1: 'ℌ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&quaternions;', _1: 'ℍ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Hopf;', _1: 'ℍ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&planckh;', _1: 'ℎ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&planck;', _1: 'ℏ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&hbar;', _1: 'ℏ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&plankv;', _1: 'ℏ'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&hslash;', _1: 'ℏ'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Iscr;', _1: 'ℐ'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&imagline;', _1: 'ℐ'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&image;', _1: 'ℑ'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Im;', _1: 'ℑ'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&imagpart;', _1: 'ℑ'},
																																																							_1: {ctor: '[]'}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Ifr;', _1: 'ℑ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Lscr;', _1: 'ℒ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&lagran;', _1: 'ℒ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Laplacetrf;', _1: 'ℒ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&ell;', _1: 'ℓ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Nopf;', _1: 'ℕ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&naturals;', _1: 'ℕ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&numero;', _1: '№'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&copysr;', _1: '℗'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&weierp;', _1: '℘'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&wp;', _1: '℘'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Popf;', _1: 'ℙ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&primes;', _1: 'ℙ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rationals;', _1: 'ℚ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Qopf;', _1: 'ℚ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Rscr;', _1: 'ℛ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&realine;', _1: 'ℛ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&real;', _1: 'ℜ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Re;', _1: 'ℜ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&realpart;', _1: 'ℜ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Rfr;', _1: 'ℜ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&reals;', _1: 'ℝ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Ropf;', _1: 'ℝ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&rx;', _1: '℞'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&trade;', _1: '™'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&TRADE;', _1: '™'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&integers;', _1: 'ℤ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Zopf;', _1: 'ℤ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ohm;', _1: 'Ω'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&mho;', _1: '℧'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Zfr;', _1: 'ℨ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&zeetrf;', _1: 'ℨ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&iiota;', _1: '℩'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&angst;', _1: 'Å'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&bernou;', _1: 'ℬ'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Bernoullis;', _1: 'ℬ'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Bscr;', _1: 'ℬ'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Cfr;', _1: 'ℭ'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Cayleys;', _1: 'ℭ'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&escr;', _1: 'ℯ'},
																																																								_1: {ctor: '[]'}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																},
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Escr;', _1: 'ℰ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&expectation;', _1: 'ℰ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Fscr;', _1: 'ℱ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Fouriertrf;', _1: 'ℱ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&phmmat;', _1: 'ℳ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Mellintrf;', _1: 'ℳ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Mscr;', _1: 'ℳ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&order;', _1: 'ℴ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&orderof;', _1: 'ℴ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&oscr;', _1: 'ℴ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&alefsym;', _1: 'ℵ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&aleph;', _1: 'ℵ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&beth;', _1: 'ℶ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&gimel;', _1: 'ℷ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&daleth;', _1: 'ℸ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&CapitalDifferentialD;', _1: 'ⅅ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DD;', _1: 'ⅅ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&DifferentialD;', _1: 'ⅆ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&dd;', _1: 'ⅆ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ExponentialE;', _1: 'ⅇ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&exponentiale;', _1: 'ⅇ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ee;', _1: 'ⅇ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&ImaginaryI;', _1: 'ⅈ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&ii;', _1: 'ⅈ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&frac13;', _1: '⅓'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&frac23;', _1: '⅔'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&frac15;', _1: '⅕'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&frac25;', _1: '⅖'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&frac35;', _1: '⅗'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&frac45;', _1: '⅘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&frac16;', _1: '⅙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&frac56;', _1: '⅚'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&frac18;', _1: '⅛'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&frac38;', _1: '⅜'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&frac58;', _1: '⅝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&frac78;', _1: '⅞'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&larr;', _1: '←'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&leftarrow;', _1: '←'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&LeftArrow;', _1: '←'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&slarr;', _1: '←'},
																																																									_1: {ctor: '[]'}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	},
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ShortLeftArrow;', _1: '←'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&uarr;', _1: '↑'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&uparrow;', _1: '↑'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&UpArrow;', _1: '↑'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&ShortUpArrow;', _1: '↑'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&rarr;', _1: '→'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&rightarrow;', _1: '→'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&RightArrow;', _1: '→'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&srarr;', _1: '→'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ShortRightArrow;', _1: '→'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&darr;', _1: '↓'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&downarrow;', _1: '↓'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&DownArrow;', _1: '↓'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ShortDownArrow;', _1: '↓'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&harr;', _1: '↔'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&leftrightarrow;', _1: '↔'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&LeftRightArrow;', _1: '↔'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&varr;', _1: '↕'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&updownarrow;', _1: '↕'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&UpDownArrow;', _1: '↕'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&nwarr;', _1: '↖'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&UpperLeftArrow;', _1: '↖'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&nwarrow;', _1: '↖'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&nearr;', _1: '↗'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&UpperRightArrow;', _1: '↗'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&nearrow;', _1: '↗'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&searr;', _1: '↘'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&searrow;', _1: '↘'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&LowerRightArrow;', _1: '↘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&swarr;', _1: '↙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&swarrow;', _1: '↙'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&LowerLeftArrow;', _1: '↙'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&nlarr;', _1: '↚'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nleftarrow;', _1: '↚'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&nrarr;', _1: '↛'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nrightarrow;', _1: '↛'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&rarrw;', _1: '↝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rightsquigarrow;', _1: '↝'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&Larr;', _1: '↞'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&twoheadleftarrow;', _1: '↞'},
																																																										_1: {ctor: '[]'}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		},
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Uarr;', _1: '↟'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Rarr;', _1: '↠'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&twoheadrightarrow;', _1: '↠'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Darr;', _1: '↡'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&larrtl;', _1: '↢'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&leftarrowtail;', _1: '↢'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&rarrtl;', _1: '↣'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&rightarrowtail;', _1: '↣'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&LeftTeeArrow;', _1: '↤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&mapstoleft;', _1: '↤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&UpTeeArrow;', _1: '↥'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&mapstoup;', _1: '↥'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&map;', _1: '↦'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&RightTeeArrow;', _1: '↦'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&mapsto;', _1: '↦'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&DownTeeArrow;', _1: '↧'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mapstodown;', _1: '↧'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&larrhk;', _1: '↩'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&hookleftarrow;', _1: '↩'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&rarrhk;', _1: '↪'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&hookrightarrow;', _1: '↪'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&larrlp;', _1: '↫'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&looparrowleft;', _1: '↫'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rarrlp;', _1: '↬'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&looparrowright;', _1: '↬'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&harrw;', _1: '↭'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&leftrightsquigarrow;', _1: '↭'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nharr;', _1: '↮'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nleftrightarrow;', _1: '↮'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&lsh;', _1: '↰'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Lsh;', _1: '↰'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&rsh;', _1: '↱'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Rsh;', _1: '↱'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ldsh;', _1: '↲'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&rdsh;', _1: '↳'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&crarr;', _1: '↵'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&cularr;', _1: '↶'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&curvearrowleft;', _1: '↶'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&curarr;', _1: '↷'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&curvearrowright;', _1: '↷'},
																																																											_1: {ctor: '[]'}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			},
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&olarr;', _1: '↺'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&circlearrowleft;', _1: '↺'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&orarr;', _1: '↻'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&circlearrowright;', _1: '↻'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lharu;', _1: '↼'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&LeftVector;', _1: '↼'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&leftharpoonup;', _1: '↼'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&lhard;', _1: '↽'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&leftharpoondown;', _1: '↽'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&DownLeftVector;', _1: '↽'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&uharr;', _1: '↾'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&upharpoonright;', _1: '↾'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&RightUpVector;', _1: '↾'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&uharl;', _1: '↿'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&upharpoonleft;', _1: '↿'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&LeftUpVector;', _1: '↿'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&rharu;', _1: '⇀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&RightVector;', _1: '⇀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&rightharpoonup;', _1: '⇀'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&rhard;', _1: '⇁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&rightharpoondown;', _1: '⇁'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&DownRightVector;', _1: '⇁'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&dharr;', _1: '⇂'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&RightDownVector;', _1: '⇂'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&downharpoonright;', _1: '⇂'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&dharl;', _1: '⇃'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&LeftDownVector;', _1: '⇃'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&downharpoonleft;', _1: '⇃'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&rlarr;', _1: '⇄'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&rightleftarrows;', _1: '⇄'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&RightArrowLeftArrow;', _1: '⇄'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&udarr;', _1: '⇅'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&UpArrowDownArrow;', _1: '⇅'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&lrarr;', _1: '⇆'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&leftrightarrows;', _1: '⇆'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&LeftArrowRightArrow;', _1: '⇆'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&llarr;', _1: '⇇'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&leftleftarrows;', _1: '⇇'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&uuarr;', _1: '⇈'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&upuparrows;', _1: '⇈'},
																																																												_1: {ctor: '[]'}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				},
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&rrarr;', _1: '⇉'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&rightrightarrows;', _1: '⇉'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&ddarr;', _1: '⇊'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&downdownarrows;', _1: '⇊'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&lrhar;', _1: '⇋'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&ReverseEquilibrium;', _1: '⇋'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&leftrightharpoons;', _1: '⇋'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&rlhar;', _1: '⇌'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rightleftharpoons;', _1: '⇌'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Equilibrium;', _1: '⇌'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&nlArr;', _1: '⇍'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nLeftarrow;', _1: '⇍'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&nhArr;', _1: '⇎'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&nLeftrightarrow;', _1: '⇎'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&nrArr;', _1: '⇏'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&nRightarrow;', _1: '⇏'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&lArr;', _1: '⇐'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Leftarrow;', _1: '⇐'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&DoubleLeftArrow;', _1: '⇐'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&uArr;', _1: '⇑'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Uparrow;', _1: '⇑'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&DoubleUpArrow;', _1: '⇑'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&rArr;', _1: '⇒'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Rightarrow;', _1: '⇒'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Implies;', _1: '⇒'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&DoubleRightArrow;', _1: '⇒'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&dArr;', _1: '⇓'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Downarrow;', _1: '⇓'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DoubleDownArrow;', _1: '⇓'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&hArr;', _1: '⇔'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Leftrightarrow;', _1: '⇔'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&DoubleLeftRightArrow;', _1: '⇔'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&iff;', _1: '⇔'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&vArr;', _1: '⇕'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Updownarrow;', _1: '⇕'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&DoubleUpDownArrow;', _1: '⇕'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nwArr;', _1: '⇖'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&neArr;', _1: '⇗'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&seArr;', _1: '⇘'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&swArr;', _1: '⇙'},
																																																													_1: {ctor: '[]'}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					},
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&lAarr;', _1: '⇚'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Lleftarrow;', _1: '⇚'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&rAarr;', _1: '⇛'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Rrightarrow;', _1: '⇛'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&zigrarr;', _1: '⇝'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&larrb;', _1: '⇤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&LeftArrowBar;', _1: '⇤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rarrb;', _1: '⇥'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&RightArrowBar;', _1: '⇥'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&duarr;', _1: '⇵'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&DownArrowUpArrow;', _1: '⇵'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&loarr;', _1: '⇽'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&roarr;', _1: '⇾'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&hoarr;', _1: '⇿'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&forall;', _1: '∀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ForAll;', _1: '∀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&comp;', _1: '∁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&complement;', _1: '∁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&part;', _1: '∂'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&PartialD;', _1: '∂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&exist;', _1: '∃'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Exists;', _1: '∃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&nexist;', _1: '∄'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&NotExists;', _1: '∄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nexists;', _1: '∄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&empty;', _1: '∅'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&emptyset;', _1: '∅'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&emptyv;', _1: '∅'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&varnothing;', _1: '∅'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nabla;', _1: '∇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Del;', _1: '∇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&isin;', _1: '∈'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&isinv;', _1: '∈'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Element;', _1: '∈'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&in;', _1: '∈'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&notin;', _1: '∉'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NotElement;', _1: '∉'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&notinva;', _1: '∉'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&niv;', _1: '∋'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&ReverseElement;', _1: '∋'},
																																																														_1: {ctor: '[]'}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						},
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&ni;', _1: '∋'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&SuchThat;', _1: '∋'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&notni;', _1: '∌'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&notniva;', _1: '∌'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&NotReverseElement;', _1: '∌'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&prod;', _1: '∏'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Product;', _1: '∏'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&coprod;', _1: '∐'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Coproduct;', _1: '∐'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&sum;', _1: '∑'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Sum;', _1: '∑'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&minus;', _1: '−'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mnplus;', _1: '∓'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&mp;', _1: '∓'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&MinusPlus;', _1: '∓'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&plusdo;', _1: '∔'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&dotplus;', _1: '∔'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&setmn;', _1: '∖'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&setminus;', _1: '∖'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Backslash;', _1: '∖'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ssetmn;', _1: '∖'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&smallsetminus;', _1: '∖'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lowast;', _1: '∗'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&compfn;', _1: '∘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&SmallCircle;', _1: '∘'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&radic;', _1: '√'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Sqrt;', _1: '√'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&prop;', _1: '∝'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&propto;', _1: '∝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Proportional;', _1: '∝'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&vprop;', _1: '∝'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&varpropto;', _1: '∝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&infin;', _1: '∞'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&angrt;', _1: '∟'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&ang;', _1: '∠'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&angle;', _1: '∠'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&angmsd;', _1: '∡'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&measuredangle;', _1: '∡'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&angsph;', _1: '∢'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&mid;', _1: '∣'},
																																																															_1: {ctor: '[]'}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							},
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&VerticalBar;', _1: '∣'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&smid;', _1: '∣'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&shortmid;', _1: '∣'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&nmid;', _1: '∤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&NotVerticalBar;', _1: '∤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&nsmid;', _1: '∤'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&nshortmid;', _1: '∤'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&par;', _1: '∥'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&parallel;', _1: '∥'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DoubleVerticalBar;', _1: '∥'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&spar;', _1: '∥'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&shortparallel;', _1: '∥'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&npar;', _1: '∦'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nparallel;', _1: '∦'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&NotDoubleVerticalBar;', _1: '∦'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&nspar;', _1: '∦'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&nshortparallel;', _1: '∦'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&and;', _1: '∧'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&wedge;', _1: '∧'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&or;', _1: '∨'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&vee;', _1: '∨'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&cap;', _1: '∩'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&cup;', _1: '∪'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&int;', _1: '∫'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Integral;', _1: '∫'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Int;', _1: '∬'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&tint;', _1: '∭'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&iiint;', _1: '∭'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&conint;', _1: '∮'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&oint;', _1: '∮'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ContourIntegral;', _1: '∮'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Conint;', _1: '∯'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&DoubleContourIntegral;', _1: '∯'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Cconint;', _1: '∰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&cwint;', _1: '∱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&cwconint;', _1: '∲'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&ClockwiseContourIntegral;', _1: '∲'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&awconint;', _1: '∳'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&CounterClockwiseContourIntegral;', _1: '∳'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&there4;', _1: '∴'},
																																																																_1: {ctor: '[]'}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								},
																								A2(
																									_elm_lang$core$Basics_ops['++'],
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&therefore;', _1: '∴'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Therefore;', _1: '∴'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&becaus;', _1: '∵'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&because;', _1: '∵'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Because;', _1: '∵'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&ratio;', _1: '∶'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Colon;', _1: '∷'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&Proportion;', _1: '∷'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&minusd;', _1: '∸'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&dotminus;', _1: '∸'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mDDot;', _1: '∺'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&homtht;', _1: '∻'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sim;', _1: '∼'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Tilde;', _1: '∼'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&thksim;', _1: '∼'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&thicksim;', _1: '∼'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bsim;', _1: '∽'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&backsim;', _1: '∽'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ac;', _1: '∾'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&mstpos;', _1: '∾'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&acd;', _1: '∿'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&wreath;', _1: '≀'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&VerticalTilde;', _1: '≀'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&wr;', _1: '≀'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&nsim;', _1: '≁'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&NotTilde;', _1: '≁'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&esim;', _1: '≂'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&EqualTilde;', _1: '≂'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&eqsim;', _1: '≂'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&sime;', _1: '≃'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&TildeEqual;', _1: '≃'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&simeq;', _1: '≃'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsime;', _1: '≄'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&nsimeq;', _1: '≄'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&NotTildeEqual;', _1: '≄'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&cong;', _1: '≅'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&TildeFullEqual;', _1: '≅'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&simne;', _1: '≆'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&ncong;', _1: '≇'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&NotTildeFullEqual;', _1: '≇'},
																																																																	_1: {ctor: '[]'}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									},
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&asymp;', _1: '≈'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ap;', _1: '≈'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&TildeTilde;', _1: '≈'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&approx;', _1: '≈'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&thkap;', _1: '≈'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&thickapprox;', _1: '≈'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nap;', _1: '≉'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&NotTildeTilde;', _1: '≉'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&napprox;', _1: '≉'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ape;', _1: '≊'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&approxeq;', _1: '≊'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&apid;', _1: '≋'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&bcong;', _1: '≌'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&backcong;', _1: '≌'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&asympeq;', _1: '≍'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&CupCap;', _1: '≍'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&bump;', _1: '≎'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&HumpDownHump;', _1: '≎'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Bumpeq;', _1: '≎'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&bumpe;', _1: '≏'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&HumpEqual;', _1: '≏'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bumpeq;', _1: '≏'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&esdot;', _1: '≐'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DotEqual;', _1: '≐'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&doteq;', _1: '≐'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&eDot;', _1: '≑'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&doteqdot;', _1: '≑'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&efDot;', _1: '≒'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&fallingdotseq;', _1: '≒'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&erDot;', _1: '≓'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&risingdotseq;', _1: '≓'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&colone;', _1: '≔'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&coloneq;', _1: '≔'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&Assign;', _1: '≔'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&ecolon;', _1: '≕'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&eqcolon;', _1: '≕'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&ecir;', _1: '≖'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&eqcirc;', _1: '≖'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cire;', _1: '≗'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&circeq;', _1: '≗'},
																																																																		_1: {ctor: '[]'}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										},
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&wedgeq;', _1: '≙'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&veeeq;', _1: '≚'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&trie;', _1: '≜'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&triangleq;', _1: '≜'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&equest;', _1: '≟'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&questeq;', _1: '≟'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&ne;', _1: '≠'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&NotEqual;', _1: '≠'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&equiv;', _1: '≡'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Congruent;', _1: '≡'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nequiv;', _1: '≢'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&NotCongruent;', _1: '≢'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&le;', _1: '≤'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&leq;', _1: '≤'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ge;', _1: '≥'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&GreaterEqual;', _1: '≥'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&geq;', _1: '≥'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&lE;', _1: '≦'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&LessFullEqual;', _1: '≦'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&leqq;', _1: '≦'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&gE;', _1: '≧'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&GreaterFullEqual;', _1: '≧'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&geqq;', _1: '≧'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&lnE;', _1: '≨'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&lneqq;', _1: '≨'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&gnE;', _1: '≩'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&gneqq;', _1: '≩'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Lt;', _1: '≪'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&NestedLessLess;', _1: '≪'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ll;', _1: '≪'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Gt;', _1: '≫'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NestedGreaterGreater;', _1: '≫'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&gg;', _1: '≫'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&twixt;', _1: '≬'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&between;', _1: '≬'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&NotCupCap;', _1: '≭'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&nlt;', _1: '≮'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&NotLess;', _1: '≮'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&nless;', _1: '≮'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ngt;', _1: '≯'},
																																																																			_1: {ctor: '[]'}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											},
																											A2(
																												_elm_lang$core$Basics_ops['++'],
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&NotGreater;', _1: '≯'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ngtr;', _1: '≯'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&nle;', _1: '≰'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&NotLessEqual;', _1: '≰'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nleq;', _1: '≰'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&nge;', _1: '≱'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&NotGreaterEqual;', _1: '≱'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ngeq;', _1: '≱'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&lsim;', _1: '≲'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&LessTilde;', _1: '≲'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&lesssim;', _1: '≲'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&gsim;', _1: '≳'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&gtrsim;', _1: '≳'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&GreaterTilde;', _1: '≳'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&nlsim;', _1: '≴'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&NotLessTilde;', _1: '≴'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ngsim;', _1: '≵'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&NotGreaterTilde;', _1: '≵'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&lg;', _1: '≶'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&lessgtr;', _1: '≶'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&LessGreater;', _1: '≶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&gl;', _1: '≷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&gtrless;', _1: '≷'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&GreaterLess;', _1: '≷'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ntlg;', _1: '≸'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&NotLessGreater;', _1: '≸'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ntgl;', _1: '≹'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&NotGreaterLess;', _1: '≹'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&pr;', _1: '≺'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Precedes;', _1: '≺'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&prec;', _1: '≺'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&sc;', _1: '≻'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&Succeeds;', _1: '≻'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&succ;', _1: '≻'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&prcue;', _1: '≼'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&PrecedesSlantEqual;', _1: '≼'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&preccurlyeq;', _1: '≼'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&sccue;', _1: '≽'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&SucceedsSlantEqual;', _1: '≽'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&succcurlyeq;', _1: '≽'},
																																																																				_1: {ctor: '[]'}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												},
																												A2(
																													_elm_lang$core$Basics_ops['++'],
																													{
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&prsim;', _1: '≾'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&precsim;', _1: '≾'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&PrecedesTilde;', _1: '≾'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&scsim;', _1: '≿'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&succsim;', _1: '≿'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&SucceedsTilde;', _1: '≿'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&npr;', _1: '⊀'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&nprec;', _1: '⊀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&NotPrecedes;', _1: '⊀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&nsc;', _1: '⊁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&nsucc;', _1: '⊁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&NotSucceeds;', _1: '⊁'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&sub;', _1: '⊂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&subset;', _1: '⊂'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&sup;', _1: '⊃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&supset;', _1: '⊃'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Superset;', _1: '⊃'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nsub;', _1: '⊄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nsup;', _1: '⊅'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&sube;', _1: '⊆'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&SubsetEqual;', _1: '⊆'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&subseteq;', _1: '⊆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&supe;', _1: '⊇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&supseteq;', _1: '⊇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&SupersetEqual;', _1: '⊇'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&nsube;', _1: '⊈'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nsubseteq;', _1: '⊈'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&NotSubsetEqual;', _1: '⊈'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsupe;', _1: '⊉'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&nsupseteq;', _1: '⊉'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&NotSupersetEqual;', _1: '⊉'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&subne;', _1: '⊊'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&subsetneq;', _1: '⊊'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&supne;', _1: '⊋'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&supsetneq;', _1: '⊋'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cupdot;', _1: '⊍'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&uplus;', _1: '⊎'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&UnionPlus;', _1: '⊎'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&sqsub;', _1: '⊏'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&SquareSubset;', _1: '⊏'},
																																																																					_1: {ctor: '[]'}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													},
																													A2(
																														_elm_lang$core$Basics_ops['++'],
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sqsubset;', _1: '⊏'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&sqsup;', _1: '⊐'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&SquareSuperset;', _1: '⊐'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&sqsupset;', _1: '⊐'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&sqsube;', _1: '⊑'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&SquareSubsetEqual;', _1: '⊑'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&sqsubseteq;', _1: '⊑'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sqsupe;', _1: '⊒'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&SquareSupersetEqual;', _1: '⊒'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&sqsupseteq;', _1: '⊒'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&sqcap;', _1: '⊓'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&SquareIntersection;', _1: '⊓'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&sqcup;', _1: '⊔'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&SquareUnion;', _1: '⊔'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&oplus;', _1: '⊕'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&CirclePlus;', _1: '⊕'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&ominus;', _1: '⊖'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&CircleMinus;', _1: '⊖'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&otimes;', _1: '⊗'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&CircleTimes;', _1: '⊗'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&osol;', _1: '⊘'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&odot;', _1: '⊙'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&CircleDot;', _1: '⊙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ocir;', _1: '⊚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&circledcirc;', _1: '⊚'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&oast;', _1: '⊛'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&circledast;', _1: '⊛'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&odash;', _1: '⊝'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&circleddash;', _1: '⊝'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&plusb;', _1: '⊞'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&boxplus;', _1: '⊞'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&minusb;', _1: '⊟'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&boxminus;', _1: '⊟'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&timesb;', _1: '⊠'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&boxtimes;', _1: '⊠'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&sdotb;', _1: '⊡'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&dotsquare;', _1: '⊡'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&vdash;', _1: '⊢'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&RightTee;', _1: '⊢'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dashv;', _1: '⊣'},
																																																																						_1: {ctor: '[]'}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														},
																														A2(
																															_elm_lang$core$Basics_ops['++'],
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&LeftTee;', _1: '⊣'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&top;', _1: '⊤'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DownTee;', _1: '⊤'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&bottom;', _1: '⊥'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&bot;', _1: '⊥'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&perp;', _1: '⊥'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&UpTee;', _1: '⊥'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&models;', _1: '⊧'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&vDash;', _1: '⊨'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&DoubleRightTee;', _1: '⊨'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Vdash;', _1: '⊩'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Vvdash;', _1: '⊪'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&VDash;', _1: '⊫'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&nvdash;', _1: '⊬'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&nvDash;', _1: '⊭'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nVdash;', _1: '⊮'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nVDash;', _1: '⊯'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prurel;', _1: '⊰'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&vltri;', _1: '⊲'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&vartriangleleft;', _1: '⊲'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LeftTriangle;', _1: '⊲'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&vrtri;', _1: '⊳'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&vartriangleright;', _1: '⊳'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&RightTriangle;', _1: '⊳'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&ltrie;', _1: '⊴'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&trianglelefteq;', _1: '⊴'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&LeftTriangleEqual;', _1: '⊴'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rtrie;', _1: '⊵'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&trianglerighteq;', _1: '⊵'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&RightTriangleEqual;', _1: '⊵'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&origof;', _1: '⊶'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&imof;', _1: '⊷'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&mumap;', _1: '⊸'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&multimap;', _1: '⊸'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&hercon;', _1: '⊹'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&intcal;', _1: '⊺'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&intercal;', _1: '⊺'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&veebar;', _1: '⊻'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&barvee;', _1: '⊽'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&angrtvb;', _1: '⊾'},
																																																																							_1: {ctor: '[]'}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															},
																															A2(
																																_elm_lang$core$Basics_ops['++'],
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&lrtri;', _1: '⊿'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&xwedge;', _1: '⋀'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Wedge;', _1: '⋀'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&bigwedge;', _1: '⋀'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&xvee;', _1: '⋁'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Vee;', _1: '⋁'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&bigvee;', _1: '⋁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&xcap;', _1: '⋂'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Intersection;', _1: '⋂'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bigcap;', _1: '⋂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&xcup;', _1: '⋃'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Union;', _1: '⋃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&bigcup;', _1: '⋃'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&diam;', _1: '⋄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&diamond;', _1: '⋄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Diamond;', _1: '⋄'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&sdot;', _1: '⋅'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&sstarf;', _1: '⋆'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Star;', _1: '⋆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&divonx;', _1: '⋇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&divideontimes;', _1: '⋇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&bowtie;', _1: '⋈'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ltimes;', _1: '⋉'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rtimes;', _1: '⋊'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lthree;', _1: '⋋'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&leftthreetimes;', _1: '⋋'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rthree;', _1: '⋌'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rightthreetimes;', _1: '⋌'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&bsime;', _1: '⋍'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&backsimeq;', _1: '⋍'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&cuvee;', _1: '⋎'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&curlyvee;', _1: '⋎'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cuwed;', _1: '⋏'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&curlywedge;', _1: '⋏'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&Sub;', _1: '⋐'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&Subset;', _1: '⋐'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&Sup;', _1: '⋑'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Supset;', _1: '⋑'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Cap;', _1: '⋒'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Cup;', _1: '⋓'},
																																																																								_1: {ctor: '[]'}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																},
																																A2(
																																	_elm_lang$core$Basics_ops['++'],
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&fork;', _1: '⋔'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&pitchfork;', _1: '⋔'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&epar;', _1: '⋕'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ltdot;', _1: '⋖'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&lessdot;', _1: '⋖'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&gtdot;', _1: '⋗'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&gtrdot;', _1: '⋗'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Ll;', _1: '⋘'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Gg;', _1: '⋙'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&ggg;', _1: '⋙'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&leg;', _1: '⋚'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&LessEqualGreater;', _1: '⋚'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lesseqgtr;', _1: '⋚'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&gel;', _1: '⋛'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&gtreqless;', _1: '⋛'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&GreaterEqualLess;', _1: '⋛'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&cuepr;', _1: '⋞'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&curlyeqprec;', _1: '⋞'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&cuesc;', _1: '⋟'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&curlyeqsucc;', _1: '⋟'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nprcue;', _1: '⋠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&NotPrecedesSlantEqual;', _1: '⋠'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nsccue;', _1: '⋡'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&NotSucceedsSlantEqual;', _1: '⋡'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsqsube;', _1: '⋢'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NotSquareSubsetEqual;', _1: '⋢'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&nsqsupe;', _1: '⋣'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&NotSquareSupersetEqual;', _1: '⋣'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lnsim;', _1: '⋦'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&gnsim;', _1: '⋧'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&prnsim;', _1: '⋨'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&precnsim;', _1: '⋨'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&scnsim;', _1: '⋩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&succnsim;', _1: '⋩'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&nltri;', _1: '⋪'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&ntriangleleft;', _1: '⋪'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&NotLeftTriangle;', _1: '⋪'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&nrtri;', _1: '⋫'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ntriangleright;', _1: '⋫'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&NotRightTriangle;', _1: '⋫'},
																																																																									_1: {ctor: '[]'}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	},
																																	A2(
																																		_elm_lang$core$Basics_ops['++'],
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&nltrie;', _1: '⋬'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ntrianglelefteq;', _1: '⋬'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&NotLeftTriangleEqual;', _1: '⋬'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nrtrie;', _1: '⋭'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ntrianglerighteq;', _1: '⋭'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&NotRightTriangleEqual;', _1: '⋭'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&vellip;', _1: '⋮'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ctdot;', _1: '⋯'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&utdot;', _1: '⋰'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&dtdot;', _1: '⋱'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&disin;', _1: '⋲'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&isinsv;', _1: '⋳'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&isins;', _1: '⋴'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&isindot;', _1: '⋵'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&notinvc;', _1: '⋶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&notinvb;', _1: '⋷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&isinE;', _1: '⋹'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nisd;', _1: '⋺'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&xnis;', _1: '⋻'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nis;', _1: '⋼'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&notnivc;', _1: '⋽'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&notnivb;', _1: '⋾'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&barwed;', _1: '⌅'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&barwedge;', _1: '⌅'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&Barwed;', _1: '⌆'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&doublebarwedge;', _1: '⌆'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&lceil;', _1: '⌈'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&LeftCeiling;', _1: '⌈'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&rceil;', _1: '⌉'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&RightCeiling;', _1: '⌉'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&lfloor;', _1: '⌊'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&LeftFloor;', _1: '⌊'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&rfloor;', _1: '⌋'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&RightFloor;', _1: '⌋'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&drcrop;', _1: '⌌'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dlcrop;', _1: '⌍'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&urcrop;', _1: '⌎'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ulcrop;', _1: '⌏'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&bnot;', _1: '⌐'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&profline;', _1: '⌒'},
																																																																										_1: {ctor: '[]'}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		},
																																		A2(
																																			_elm_lang$core$Basics_ops['++'],
																																			{
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&profsurf;', _1: '⌓'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&telrec;', _1: '⌕'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&target;', _1: '⌖'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ulcorn;', _1: '⌜'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&ulcorner;', _1: '⌜'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&urcorn;', _1: '⌝'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&urcorner;', _1: '⌝'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&dlcorn;', _1: '⌞'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&llcorner;', _1: '⌞'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&drcorn;', _1: '⌟'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lrcorner;', _1: '⌟'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&frown;', _1: '⌢'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&sfrown;', _1: '⌢'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&smile;', _1: '⌣'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&ssmile;', _1: '⌣'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&cylcty;', _1: '⌭'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&profalar;', _1: '⌮'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&topbot;', _1: '⌶'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ovbar;', _1: '⌽'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&solbar;', _1: '⌿'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&angzarr;', _1: '⍼'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lmoust;', _1: '⎰'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&lmoustache;', _1: '⎰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rmoust;', _1: '⎱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rmoustache;', _1: '⎱'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&tbrk;', _1: '⎴'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&OverBracket;', _1: '⎴'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&bbrk;', _1: '⎵'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&UnderBracket;', _1: '⎵'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&bbrktbrk;', _1: '⎶'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&OverParenthesis;', _1: '⏜'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&UnderParenthesis;', _1: '⏝'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&OverBrace;', _1: '⏞'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&UnderBrace;', _1: '⏟'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&trpezium;', _1: '⏢'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&elinters;', _1: '⏧'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&blank;', _1: '␣'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&oS;', _1: 'Ⓢ'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&circledS;', _1: 'Ⓢ'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&boxh;', _1: '─'},
																																																																											_1: {ctor: '[]'}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			},
																																			A2(
																																				_elm_lang$core$Basics_ops['++'],
																																				{
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&HorizontalLine;', _1: '─'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&boxv;', _1: '│'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&boxdr;', _1: '┌'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&boxdl;', _1: '┐'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&boxur;', _1: '└'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&boxul;', _1: '┘'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&boxvr;', _1: '├'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&boxvl;', _1: '┤'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&boxhd;', _1: '┬'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&boxhu;', _1: '┴'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&boxvh;', _1: '┼'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&boxH;', _1: '═'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&boxV;', _1: '║'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&boxdR;', _1: '╒'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&boxDr;', _1: '╓'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&boxDR;', _1: '╔'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&boxdL;', _1: '╕'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&boxDl;', _1: '╖'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&boxDL;', _1: '╗'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&boxuR;', _1: '╘'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&boxUr;', _1: '╙'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&boxUR;', _1: '╚'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&boxuL;', _1: '╛'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&boxUl;', _1: '╜'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&boxUL;', _1: '╝'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&boxvR;', _1: '╞'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&boxVr;', _1: '╟'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&boxVR;', _1: '╠'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&boxvL;', _1: '╡'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&boxVl;', _1: '╢'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&boxVL;', _1: '╣'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&boxHd;', _1: '╤'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&boxhD;', _1: '╥'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&boxHD;', _1: '╦'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&boxHu;', _1: '╧'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&boxhU;', _1: '╨'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&boxHU;', _1: '╩'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&boxvH;', _1: '╪'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&boxVh;', _1: '╫'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&boxVH;', _1: '╬'},
																																																																												_1: {ctor: '[]'}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				},
																																				A2(
																																					_elm_lang$core$Basics_ops['++'],
																																					{
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&uhblk;', _1: '▀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&lhblk;', _1: '▄'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&block;', _1: '█'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&blk14;', _1: '░'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&blk12;', _1: '▒'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&blk34;', _1: '▓'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&squ;', _1: '□'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&square;', _1: '□'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Square;', _1: '□'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&squf;', _1: '▪'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&squarf;', _1: '▪'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&blacksquare;', _1: '▪'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&FilledVerySmallSquare;', _1: '▪'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&EmptyVerySmallSquare;', _1: '▫'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&rect;', _1: '▭'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&marker;', _1: '▮'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&fltns;', _1: '▱'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&xutri;', _1: '△'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&bigtriangleup;', _1: '△'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&utrif;', _1: '▴'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&blacktriangle;', _1: '▴'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&utri;', _1: '▵'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&triangle;', _1: '▵'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&rtrif;', _1: '▸'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&blacktriangleright;', _1: '▸'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&rtri;', _1: '▹'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&triangleright;', _1: '▹'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&xdtri;', _1: '▽'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&bigtriangledown;', _1: '▽'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&dtrif;', _1: '▾'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&blacktriangledown;', _1: '▾'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&dtri;', _1: '▿'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&triangledown;', _1: '▿'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&ltrif;', _1: '◂'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&blacktriangleleft;', _1: '◂'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&ltri;', _1: '◃'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&triangleleft;', _1: '◃'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&loz;', _1: '◊'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&lozenge;', _1: '◊'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&cir;', _1: '○'},
																																																																													_1: {ctor: '[]'}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					},
																																					A2(
																																						_elm_lang$core$Basics_ops['++'],
																																						{
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&tridot;', _1: '◬'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&xcirc;', _1: '◯'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&bigcirc;', _1: '◯'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ultri;', _1: '◸'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&urtri;', _1: '◹'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&lltri;', _1: '◺'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&EmptySmallSquare;', _1: '◻'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&FilledSmallSquare;', _1: '◼'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&starf;', _1: '★'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bigstar;', _1: '★'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&star;', _1: '☆'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&phone;', _1: '☎'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&female;', _1: '♀'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&male;', _1: '♂'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&spades;', _1: '♠'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&spadesuit;', _1: '♠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&clubs;', _1: '♣'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&clubsuit;', _1: '♣'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&hearts;', _1: '♥'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&heartsuit;', _1: '♥'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&diams;', _1: '♦'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&diamondsuit;', _1: '♦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&sung;', _1: '♪'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&flat;', _1: '♭'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&natur;', _1: '♮'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&natural;', _1: '♮'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&sharp;', _1: '♯'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&check;', _1: '✓'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&checkmark;', _1: '✓'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&cross;', _1: '✗'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&malt;', _1: '✠'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&maltese;', _1: '✠'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&sext;', _1: '✶'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&VerticalSeparator;', _1: '❘'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&lbbrk;', _1: '❲'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&rbbrk;', _1: '❳'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lobrk;', _1: '⟦'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&LeftDoubleBracket;', _1: '⟦'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&robrk;', _1: '⟧'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&RightDoubleBracket;', _1: '⟧'},
																																																																														_1: {ctor: '[]'}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						},
																																						A2(
																																							_elm_lang$core$Basics_ops['++'],
																																							{
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&lang;', _1: '⟨'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&LeftAngleBracket;', _1: '⟨'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&langle;', _1: '⟨'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rang;', _1: '⟩'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&RightAngleBracket;', _1: '⟩'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&rangle;', _1: '⟩'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Lang;', _1: '⟪'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rang;', _1: '⟫'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&loang;', _1: '⟬'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&roang;', _1: '⟭'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&xlarr;', _1: '⟵'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&longleftarrow;', _1: '⟵'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LongLeftArrow;', _1: '⟵'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&xrarr;', _1: '⟶'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&longrightarrow;', _1: '⟶'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&LongRightArrow;', _1: '⟶'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&xharr;', _1: '⟷'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&longleftrightarrow;', _1: '⟷'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&LongLeftRightArrow;', _1: '⟷'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&xlArr;', _1: '⟸'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&Longleftarrow;', _1: '⟸'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&DoubleLongLeftArrow;', _1: '⟸'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&xrArr;', _1: '⟹'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&Longrightarrow;', _1: '⟹'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&DoubleLongRightArrow;', _1: '⟹'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&xhArr;', _1: '⟺'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&Longleftrightarrow;', _1: '⟺'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&DoubleLongLeftRightArrow;', _1: '⟺'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&xmap;', _1: '⟼'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&longmapsto;', _1: '⟼'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dzigrarr;', _1: '⟿'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&nvlArr;', _1: '⤂'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&nvrArr;', _1: '⤃'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&nvHarr;', _1: '⤄'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Map;', _1: '⤅'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lbarr;', _1: '⤌'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&rbarr;', _1: '⤍'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&bkarow;', _1: '⤍'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&lBarr;', _1: '⤎'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&rBarr;', _1: '⤏'},
																																																																															_1: {ctor: '[]'}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							},
																																							A2(
																																								_elm_lang$core$Basics_ops['++'],
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&dbkarow;', _1: '⤏'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&RBarr;', _1: '⤐'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&drbkarow;', _1: '⤐'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&DDotrahd;', _1: '⤑'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&UpArrowBar;', _1: '⤒'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&DownArrowBar;', _1: '⤓'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rarrtl;', _1: '⤖'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&latail;', _1: '⤙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&ratail;', _1: '⤚'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&lAtail;', _1: '⤛'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&rAtail;', _1: '⤜'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&larrfs;', _1: '⤝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&rarrfs;', _1: '⤞'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&larrbfs;', _1: '⤟'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&rarrbfs;', _1: '⤠'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nwarhk;', _1: '⤣'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&nearhk;', _1: '⤤'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&searhk;', _1: '⤥'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&hksearow;', _1: '⤥'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&swarhk;', _1: '⤦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&hkswarow;', _1: '⤦'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&nwnear;', _1: '⤧'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&nesear;', _1: '⤨'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&toea;', _1: '⤨'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&seswar;', _1: '⤩'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&tosa;', _1: '⤩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&swnwar;', _1: '⤪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&rarrc;', _1: '⤳'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&cudarrr;', _1: '⤵'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&ldca;', _1: '⤶'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&rdca;', _1: '⤷'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&cudarrl;', _1: '⤸'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&larrpl;', _1: '⤹'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&curarrm;', _1: '⤼'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&cularrp;', _1: '⤽'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&rarrpl;', _1: '⥅'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&harrcir;', _1: '⥈'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Uarrocir;', _1: '⥉'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&lurdshar;', _1: '⥊'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&ldrushar;', _1: '⥋'},
																																																																																_1: {ctor: '[]'}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								},
																																								A2(
																																									_elm_lang$core$Basics_ops['++'],
																																									{
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&LeftRightVector;', _1: '⥎'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&RightUpDownVector;', _1: '⥏'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&DownLeftRightVector;', _1: '⥐'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&LeftUpDownVector;', _1: '⥑'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&LeftVectorBar;', _1: '⥒'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&RightVectorBar;', _1: '⥓'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&RightUpVectorBar;', _1: '⥔'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&RightDownVectorBar;', _1: '⥕'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DownLeftVectorBar;', _1: '⥖'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&DownRightVectorBar;', _1: '⥗'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LeftUpVectorBar;', _1: '⥘'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&LeftDownVectorBar;', _1: '⥙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&LeftTeeVector;', _1: '⥚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&RightTeeVector;', _1: '⥛'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&RightUpTeeVector;', _1: '⥜'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&RightDownTeeVector;', _1: '⥝'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&DownLeftTeeVector;', _1: '⥞'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&DownRightTeeVector;', _1: '⥟'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&LeftUpTeeVector;', _1: '⥠'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&LeftDownTeeVector;', _1: '⥡'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lHar;', _1: '⥢'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&uHar;', _1: '⥣'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rHar;', _1: '⥤'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&dHar;', _1: '⥥'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&luruhar;', _1: '⥦'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ldrdhar;', _1: '⥧'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&ruluhar;', _1: '⥨'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&rdldhar;', _1: '⥩'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&lharul;', _1: '⥪'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&llhard;', _1: '⥫'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&rharul;', _1: '⥬'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&lrhard;', _1: '⥭'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&udhar;', _1: '⥮'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&UpEquilibrium;', _1: '⥮'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&duhar;', _1: '⥯'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&ReverseUpEquilibrium;', _1: '⥯'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&RoundImplies;', _1: '⥰'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&erarr;', _1: '⥱'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&simrarr;', _1: '⥲'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&larrsim;', _1: '⥳'},
																																																																																	_1: {ctor: '[]'}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									},
																																									A2(
																																										_elm_lang$core$Basics_ops['++'],
																																										{
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rarrsim;', _1: '⥴'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&rarrap;', _1: '⥵'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ltlarr;', _1: '⥶'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&gtrarr;', _1: '⥸'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&subrarr;', _1: '⥹'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&suplarr;', _1: '⥻'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&lfisht;', _1: '⥼'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&rfisht;', _1: '⥽'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&ufisht;', _1: '⥾'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&dfisht;', _1: '⥿'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&lopar;', _1: '⦅'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ropar;', _1: '⦆'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&lbrke;', _1: '⦋'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rbrke;', _1: '⦌'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lbrkslu;', _1: '⦍'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&rbrksld;', _1: '⦎'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&lbrksld;', _1: '⦏'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rbrkslu;', _1: '⦐'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&langd;', _1: '⦑'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&rangd;', _1: '⦒'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lparlt;', _1: '⦓'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rpargt;', _1: '⦔'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&gtlPar;', _1: '⦕'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ltrPar;', _1: '⦖'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&vzigzag;', _1: '⦚'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&vangrt;', _1: '⦜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&angrtvbd;', _1: '⦝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&ange;', _1: '⦤'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&range;', _1: '⦥'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&dwangle;', _1: '⦦'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&uwangle;', _1: '⦧'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&angmsdaa;', _1: '⦨'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&angmsdab;', _1: '⦩'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&angmsdac;', _1: '⦪'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&angmsdad;', _1: '⦫'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&angmsdae;', _1: '⦬'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&angmsdaf;', _1: '⦭'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&angmsdag;', _1: '⦮'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&angmsdah;', _1: '⦯'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&bemptyv;', _1: '⦰'},
																																																																																		_1: {ctor: '[]'}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										},
																																										A2(
																																											_elm_lang$core$Basics_ops['++'],
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&demptyv;', _1: '⦱'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&cemptyv;', _1: '⦲'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&raemptyv;', _1: '⦳'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&laemptyv;', _1: '⦴'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ohbar;', _1: '⦵'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&omid;', _1: '⦶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&opar;', _1: '⦷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&operp;', _1: '⦹'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&olcross;', _1: '⦻'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&odsold;', _1: '⦼'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&olcir;', _1: '⦾'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ofcir;', _1: '⦿'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&olt;', _1: '⧀'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ogt;', _1: '⧁'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&cirscir;', _1: '⧂'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&cirE;', _1: '⧃'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&solb;', _1: '⧄'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&bsolb;', _1: '⧅'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&boxbox;', _1: '⧉'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&trisb;', _1: '⧍'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rtriltri;', _1: '⧎'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&LeftTriangleBar;', _1: '⧏'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&RightTriangleBar;', _1: '⧐'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&race;', _1: '⧚'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&iinfin;', _1: '⧜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&infintie;', _1: '⧝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&nvinfin;', _1: '⧞'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&eparsl;', _1: '⧣'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&smeparsl;', _1: '⧤'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&eqvparsl;', _1: '⧥'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lozf;', _1: '⧫'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&blacklozenge;', _1: '⧫'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&RuleDelayed;', _1: '⧴'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&dsol;', _1: '⧶'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&xodot;', _1: '⨀'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&bigodot;', _1: '⨀'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&xoplus;', _1: '⨁'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&bigoplus;', _1: '⨁'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&xotime;', _1: '⨂'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&bigotimes;', _1: '⨂'},
																																																																																			_1: {ctor: '[]'}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											},
																																											A2(
																																												_elm_lang$core$Basics_ops['++'],
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&xuplus;', _1: '⨄'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&biguplus;', _1: '⨄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&xsqcup;', _1: '⨆'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bigsqcup;', _1: '⨆'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&qint;', _1: '⨌'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&iiiint;', _1: '⨌'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fpartint;', _1: '⨍'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&cirfnint;', _1: '⨐'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&awint;', _1: '⨑'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&rppolint;', _1: '⨒'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&scpolint;', _1: '⨓'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&npolint;', _1: '⨔'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&pointint;', _1: '⨕'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&quatint;', _1: '⨖'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&intlarhk;', _1: '⨗'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&pluscir;', _1: '⨢'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&plusacir;', _1: '⨣'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&simplus;', _1: '⨤'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&plusdu;', _1: '⨥'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&plussim;', _1: '⨦'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&plustwo;', _1: '⨧'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&mcomma;', _1: '⨩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&minusdu;', _1: '⨪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&loplus;', _1: '⨭'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&roplus;', _1: '⨮'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Cross;', _1: '⨯'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&timesd;', _1: '⨰'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&timesbar;', _1: '⨱'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&smashp;', _1: '⨳'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lotimes;', _1: '⨴'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&rotimes;', _1: '⨵'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&otimesas;', _1: '⨶'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Otimes;', _1: '⨷'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&odiv;', _1: '⨸'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&triplus;', _1: '⨹'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&triminus;', _1: '⨺'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&tritime;', _1: '⨻'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&iprod;', _1: '⨼'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&intprod;', _1: '⨼'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&amalg;', _1: '⨿'},
																																																																																				_1: {ctor: '[]'}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												},
																																												A2(
																																													_elm_lang$core$Basics_ops['++'],
																																													{
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&capdot;', _1: '⩀'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&ncup;', _1: '⩂'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ncap;', _1: '⩃'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&capand;', _1: '⩄'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&cupor;', _1: '⩅'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&cupcap;', _1: '⩆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&capcup;', _1: '⩇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&cupbrcap;', _1: '⩈'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&capbrcup;', _1: '⩉'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&cupcup;', _1: '⩊'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&capcap;', _1: '⩋'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ccups;', _1: '⩌'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&ccaps;', _1: '⩍'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&ccupssm;', _1: '⩐'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&And;', _1: '⩓'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&Or;', _1: '⩔'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&andand;', _1: '⩕'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&oror;', _1: '⩖'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&orslope;', _1: '⩗'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&andslope;', _1: '⩘'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&andv;', _1: '⩚'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&orv;', _1: '⩛'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&andd;', _1: '⩜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&ord;', _1: '⩝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&wedbar;', _1: '⩟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&sdote;', _1: '⩦'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&simdot;', _1: '⩪'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&congdot;', _1: '⩭'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&easter;', _1: '⩮'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&apacir;', _1: '⩯'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&apE;', _1: '⩰'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&eplus;', _1: '⩱'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&pluse;', _1: '⩲'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Esim;', _1: '⩳'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Colone;', _1: '⩴'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Equal;', _1: '⩵'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&eDDot;', _1: '⩷'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&ddotseq;', _1: '⩷'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&equivDD;', _1: '⩸'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&ltcir;', _1: '⩹'},
																																																																																					_1: {ctor: '[]'}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													},
																																													A2(
																																														_elm_lang$core$Basics_ops['++'],
																																														{
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&gtcir;', _1: '⩺'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ltquest;', _1: '⩻'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&gtquest;', _1: '⩼'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&les;', _1: '⩽'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&LessSlantEqual;', _1: '⩽'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&leqslant;', _1: '⩽'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ges;', _1: '⩾'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&GreaterSlantEqual;', _1: '⩾'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&geqslant;', _1: '⩾'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&lesdot;', _1: '⩿'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&gesdot;', _1: '⪀'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&lesdoto;', _1: '⪁'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&gesdoto;', _1: '⪂'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&lesdotor;', _1: '⪃'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&gesdotol;', _1: '⪄'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lap;', _1: '⪅'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lessapprox;', _1: '⪅'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&gap;', _1: '⪆'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&gtrapprox;', _1: '⪆'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&lne;', _1: '⪇'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&lneq;', _1: '⪇'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&gne;', _1: '⪈'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&gneq;', _1: '⪈'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&lnap;', _1: '⪉'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&lnapprox;', _1: '⪉'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&gnap;', _1: '⪊'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&gnapprox;', _1: '⪊'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lEg;', _1: '⪋'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lesseqqgtr;', _1: '⪋'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&gEl;', _1: '⪌'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&gtreqqless;', _1: '⪌'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&lsime;', _1: '⪍'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&gsime;', _1: '⪎'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&lsimg;', _1: '⪏'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&gsiml;', _1: '⪐'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&lgE;', _1: '⪑'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&glE;', _1: '⪒'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&lesges;', _1: '⪓'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&gesles;', _1: '⪔'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&els;', _1: '⪕'},
																																																																																						_1: {ctor: '[]'}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														},
																																														A2(
																																															_elm_lang$core$Basics_ops['++'],
																																															{
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&eqslantless;', _1: '⪕'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&egs;', _1: '⪖'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&eqslantgtr;', _1: '⪖'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&elsdot;', _1: '⪗'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&egsdot;', _1: '⪘'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&el;', _1: '⪙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&eg;', _1: '⪚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&siml;', _1: '⪝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&simg;', _1: '⪞'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&simlE;', _1: '⪟'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&simgE;', _1: '⪠'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&LessLess;', _1: '⪡'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&GreaterGreater;', _1: '⪢'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&glj;', _1: '⪤'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&gla;', _1: '⪥'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&ltcc;', _1: '⪦'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&gtcc;', _1: '⪧'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&lescc;', _1: '⪨'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&gescc;', _1: '⪩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&smt;', _1: '⪪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&lat;', _1: '⪫'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&smte;', _1: '⪬'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&late;', _1: '⪭'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&bumpE;', _1: '⪮'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&pre;', _1: '⪯'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&preceq;', _1: '⪯'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&PrecedesEqual;', _1: '⪯'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&sce;', _1: '⪰'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&succeq;', _1: '⪰'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&SucceedsEqual;', _1: '⪰'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&prE;', _1: '⪳'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&scE;', _1: '⪴'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&prnE;', _1: '⪵'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&precneqq;', _1: '⪵'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&scnE;', _1: '⪶'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&succneqq;', _1: '⪶'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&prap;', _1: '⪷'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&precapprox;', _1: '⪷'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&scap;', _1: '⪸'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&succapprox;', _1: '⪸'},
																																																																																							_1: {ctor: '[]'}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															},
																																															A2(
																																																_elm_lang$core$Basics_ops['++'],
																																																{
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prnap;', _1: '⪹'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&precnapprox;', _1: '⪹'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&scnap;', _1: '⪺'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&succnapprox;', _1: '⪺'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Pr;', _1: '⪻'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Sc;', _1: '⪼'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&subdot;', _1: '⪽'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&supdot;', _1: '⪾'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&subplus;', _1: '⪿'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&supplus;', _1: '⫀'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&submult;', _1: '⫁'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&supmult;', _1: '⫂'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&subedot;', _1: '⫃'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&supedot;', _1: '⫄'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&subE;', _1: '⫅'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&subseteqq;', _1: '⫅'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&supE;', _1: '⫆'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&supseteqq;', _1: '⫆'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&subsim;', _1: '⫇'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&supsim;', _1: '⫈'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&subnE;', _1: '⫋'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&subsetneqq;', _1: '⫋'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&supnE;', _1: '⫌'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&supsetneqq;', _1: '⫌'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&csub;', _1: '⫏'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&csup;', _1: '⫐'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&csube;', _1: '⫑'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&csupe;', _1: '⫒'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&subsup;', _1: '⫓'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&supsub;', _1: '⫔'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&subsub;', _1: '⫕'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&supsup;', _1: '⫖'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&suphsub;', _1: '⫗'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&supdsub;', _1: '⫘'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&forkv;', _1: '⫙'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&topfork;', _1: '⫚'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&mlcp;', _1: '⫛'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Dashv;', _1: '⫤'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&DoubleLeftTee;', _1: '⫤'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Vdashl;', _1: '⫦'},
																																																																																								_1: {ctor: '[]'}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																},
																																																A2(
																																																	_elm_lang$core$Basics_ops['++'],
																																																	{
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Barv;', _1: '⫧'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&vBar;', _1: '⫨'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&vBarv;', _1: '⫩'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Vbar;', _1: '⫫'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Not;', _1: '⫬'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&bNot;', _1: '⫭'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rnmid;', _1: '⫮'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&cirmid;', _1: '⫯'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&midcir;', _1: '⫰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&topcir;', _1: '⫱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&nhpar;', _1: '⫲'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&parsim;', _1: '⫳'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&parsl;', _1: '⫽'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&fflig;', _1: 'ﬀ'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&filig;', _1: 'ﬁ'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&fllig;', _1: 'ﬂ'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ffilig;', _1: 'ﬃ'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ffllig;', _1: 'ﬄ'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&Ascr;', _1: '𝒜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&Cscr;', _1: '𝒞'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Dscr;', _1: '𝒟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Gscr;', _1: '𝒢'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Jscr;', _1: '𝒥'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&Kscr;', _1: '𝒦'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Nscr;', _1: '𝒩'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&Oscr;', _1: '𝒪'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&Pscr;', _1: '𝒫'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Qscr;', _1: '𝒬'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Sscr;', _1: '𝒮'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Tscr;', _1: '𝒯'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Uscr;', _1: '𝒰'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Vscr;', _1: '𝒱'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Wscr;', _1: '𝒲'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Xscr;', _1: '𝒳'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Yscr;', _1: '𝒴'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Zscr;', _1: '𝒵'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&ascr;', _1: '𝒶'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&bscr;', _1: '𝒷'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&cscr;', _1: '𝒸'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&dscr;', _1: '𝒹'},
																																																																																									_1: {ctor: '[]'}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	},
																																																	A2(
																																																		_elm_lang$core$Basics_ops['++'],
																																																		{
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fscr;', _1: '𝒻'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&hscr;', _1: '𝒽'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&iscr;', _1: '𝒾'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&jscr;', _1: '𝒿'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&kscr;', _1: '𝓀'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&lscr;', _1: '𝓁'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&mscr;', _1: '𝓂'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nscr;', _1: '𝓃'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&pscr;', _1: '𝓅'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&qscr;', _1: '𝓆'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&rscr;', _1: '𝓇'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&sscr;', _1: '𝓈'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&tscr;', _1: '𝓉'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&uscr;', _1: '𝓊'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&vscr;', _1: '𝓋'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&wscr;', _1: '𝓌'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&xscr;', _1: '𝓍'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&yscr;', _1: '𝓎'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&zscr;', _1: '𝓏'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Afr;', _1: '𝔄'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Bfr;', _1: '𝔅'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Dfr;', _1: '𝔇'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&Efr;', _1: '𝔈'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Ffr;', _1: '𝔉'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&Gfr;', _1: '𝔊'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&Jfr;', _1: '𝔍'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Kfr;', _1: '𝔎'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Lfr;', _1: '𝔏'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Mfr;', _1: '𝔐'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Nfr;', _1: '𝔑'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Ofr;', _1: '𝔒'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Pfr;', _1: '𝔓'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Qfr;', _1: '𝔔'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Sfr;', _1: '𝔖'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Tfr;', _1: '𝔗'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Ufr;', _1: '𝔘'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&Vfr;', _1: '𝔙'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Wfr;', _1: '𝔚'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&Xfr;', _1: '𝔛'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: '&Yfr;', _1: '𝔜'},
																																																																																										_1: {ctor: '[]'}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		},
																																																		A2(
																																																			_elm_lang$core$Basics_ops['++'],
																																																			{
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&afr;', _1: '𝔞'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&bfr;', _1: '𝔟'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&cfr;', _1: '𝔠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&dfr;', _1: '𝔡'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&efr;', _1: '𝔢'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ffr;', _1: '𝔣'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&gfr;', _1: '𝔤'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&hfr;', _1: '𝔥'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&ifr;', _1: '𝔦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&jfr;', _1: '𝔧'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&kfr;', _1: '𝔨'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lfr;', _1: '𝔩'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&mfr;', _1: '𝔪'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&nfr;', _1: '𝔫'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ofr;', _1: '𝔬'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&pfr;', _1: '𝔭'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&qfr;', _1: '𝔮'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&rfr;', _1: '𝔯'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&sfr;', _1: '𝔰'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&tfr;', _1: '𝔱'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ufr;', _1: '𝔲'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&vfr;', _1: '𝔳'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&wfr;', _1: '𝔴'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&xfr;', _1: '𝔵'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&yfr;', _1: '𝔶'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&zfr;', _1: '𝔷'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Aopf;', _1: '𝔸'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Bopf;', _1: '𝔹'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Dopf;', _1: '𝔻'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Eopf;', _1: '𝔼'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Fopf;', _1: '𝔽'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Gopf;', _1: '𝔾'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Iopf;', _1: '𝕀'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Jopf;', _1: '𝕁'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Kopf;', _1: '𝕂'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&Lopf;', _1: '𝕃'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Mopf;', _1: '𝕄'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&Oopf;', _1: '𝕆'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: '&Sopf;', _1: '𝕊'},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: '&Topf;', _1: '𝕋'},
																																																																																											_1: {ctor: '[]'}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			},
																																																			{
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Uopf;', _1: '𝕌'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Vopf;', _1: '𝕍'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Wopf;', _1: '𝕎'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Xopf;', _1: '𝕏'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Yopf;', _1: '𝕐'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&aopf;', _1: '𝕒'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&bopf;', _1: '𝕓'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&copf;', _1: '𝕔'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&dopf;', _1: '𝕕'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&eopf;', _1: '𝕖'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&fopf;', _1: '𝕗'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&gopf;', _1: '𝕘'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&hopf;', _1: '𝕙'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&iopf;', _1: '𝕚'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&jopf;', _1: '𝕛'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&kopf;', _1: '𝕜'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&lopf;', _1: '𝕝'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&mopf;', _1: '𝕞'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&nopf;', _1: '𝕟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&oopf;', _1: '𝕠'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&popf;', _1: '𝕡'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&qopf;', _1: '𝕢'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&ropf;', _1: '𝕣'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&sopf;', _1: '𝕤'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&topf;', _1: '𝕥'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&uopf;', _1: '𝕦'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&vopf;', _1: '𝕧'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&wopf;', _1: '𝕨'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&xopf;', _1: '𝕩'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&yopf;', _1: '𝕪'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&zopf;', _1: '𝕫'},
																																																																																		_1: {ctor: '[]'}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			})))))))))))))))))))))))))))))))))))))))))))))))))));

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _jinjor$elm_html_parser$HtmlParser$attributeValueEntityString = function (quote) {
	return _Bogdanp$elm_combine$Combine$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'[^<&',
			A2(_elm_lang$core$Basics_ops['++'], quote, ']*')));
};
var _jinjor$elm_html_parser$HtmlParser$textNodeNonEntityString = _Bogdanp$elm_combine$Combine$regex('[^<&]*');
var _jinjor$elm_html_parser$HtmlParser$entityStringDec = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (num) {
		return A2(
			_elm_lang$core$Result$withDefault,
			num,
			A2(
				_elm_lang$core$Result$map,
				function (_p0) {
					return _elm_lang$core$String$fromList(
						_elm_lang$core$List$singleton(
							_elm_lang$core$Char$fromCode(_p0)));
				},
				_elm_lang$core$String$toInt(
					A2(
						_elm_lang$core$String$dropRight,
						1,
						A2(_elm_lang$core$String$dropLeft, 2, num)))));
	},
	_Bogdanp$elm_combine$Combine$regex('&#[1-9]*[0-9]+;'));
var _jinjor$elm_html_parser$HtmlParser$entityStringHex = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (num) {
		return A2(
			_elm_lang$core$Result$withDefault,
			num,
			A2(
				_elm_lang$core$Result$map,
				function (_p1) {
					return _elm_lang$core$String$fromList(
						_elm_lang$core$List$singleton(
							_elm_lang$core$Char$fromCode(_p1)));
				},
				_rtfeldman$hex$Hex$fromString(
					_elm_lang$core$String$toLower(
						A2(
							_elm_lang$core$String$dropRight,
							1,
							A2(_elm_lang$core$String$dropLeft, 3, num))))));
	},
	_Bogdanp$elm_combine$Combine$regex('&#x[0-9A-F]+;'));
var _jinjor$elm_html_parser$HtmlParser$entityString = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (code) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			code,
			A2(_elm_lang$core$Dict$get, code, _jinjor$elm_html_parser$Escape$dict));
	},
	_Bogdanp$elm_combine$Combine$regex('&[0-9a-zA-Z]+;'));
var _jinjor$elm_html_parser$HtmlParser$attributeString = function (quote) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		function (list) {
			return A2(_elm_lang$core$String$join, '', list);
		},
		_Bogdanp$elm_combine$Combine$many(
			A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$entityString,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$entityStringHex,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_jinjor$elm_html_parser$HtmlParser$entityStringDec,
						A2(
							_Bogdanp$elm_combine$Combine_ops['<|>'],
							_Bogdanp$elm_combine$Combine$string('&'),
							_jinjor$elm_html_parser$HtmlParser$attributeValueEntityString(quote)))))));
};
var _jinjor$elm_html_parser$HtmlParser$textNodeString = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (list) {
		return A2(_elm_lang$core$String$join, '', list);
	},
	_Bogdanp$elm_combine$Combine$many(
		A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			_jinjor$elm_html_parser$HtmlParser$entityString,
			A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$entityStringHex,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$entityStringDec,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_Bogdanp$elm_combine$Combine$string('&'),
						_jinjor$elm_html_parser$HtmlParser$textNodeNonEntityString))))));
var _jinjor$elm_html_parser$HtmlParser$ngSetForP = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'address',
		_1: {
			ctor: '::',
			_0: 'article',
			_1: {
				ctor: '::',
				_0: 'aside',
				_1: {
					ctor: '::',
					_0: 'blockquote',
					_1: {
						ctor: '::',
						_0: 'details',
						_1: {
							ctor: '::',
							_0: 'div',
							_1: {
								ctor: '::',
								_0: 'dl',
								_1: {
									ctor: '::',
									_0: 'fieldset',
									_1: {
										ctor: '::',
										_0: 'figcaption',
										_1: {
											ctor: '::',
											_0: 'figure',
											_1: {
												ctor: '::',
												_0: 'footer',
												_1: {
													ctor: '::',
													_0: 'form',
													_1: {
														ctor: '::',
														_0: 'h1',
														_1: {
															ctor: '::',
															_0: 'h2',
															_1: {
																ctor: '::',
																_0: 'h3',
																_1: {
																	ctor: '::',
																	_0: 'h4',
																	_1: {
																		ctor: '::',
																		_0: 'h5',
																		_1: {
																			ctor: '::',
																			_0: 'h6',
																			_1: {
																				ctor: '::',
																				_0: 'header',
																				_1: {
																					ctor: '::',
																					_0: 'hgroup',
																					_1: {
																						ctor: '::',
																						_0: 'hr',
																						_1: {
																							ctor: '::',
																							_0: 'main',
																							_1: {
																								ctor: '::',
																								_0: 'menu',
																								_1: {
																									ctor: '::',
																									_0: 'nav',
																									_1: {
																										ctor: '::',
																										_0: 'ol',
																										_1: {
																											ctor: '::',
																											_0: 'p',
																											_1: {
																												ctor: '::',
																												_0: 'pre',
																												_1: {
																													ctor: '::',
																													_0: 'section',
																													_1: {
																														ctor: '::',
																														_0: 'table',
																														_1: {
																															ctor: '::',
																															_0: 'ul',
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$isInvalidNest = F2(
	function (tagName, childTagName) {
		return (_elm_lang$core$Native_Utils.eq(tagName, 'head') && _elm_lang$core$Native_Utils.eq(childTagName, 'body')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'li') && _elm_lang$core$Native_Utils.eq(childTagName, 'li')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'dt') && (_elm_lang$core$Native_Utils.eq(childTagName, 'dt') || _elm_lang$core$Native_Utils.eq(childTagName, 'dd'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'dd') && (_elm_lang$core$Native_Utils.eq(childTagName, 'dt') || _elm_lang$core$Native_Utils.eq(childTagName, 'dd'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'p') && A2(_elm_lang$core$Set$member, childTagName, _jinjor$elm_html_parser$HtmlParser$ngSetForP)) || ((_elm_lang$core$Native_Utils.eq(tagName, 'rt') && (_elm_lang$core$Native_Utils.eq(childTagName, 'rt') || _elm_lang$core$Native_Utils.eq(childTagName, 'rp'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'rp') && (_elm_lang$core$Native_Utils.eq(childTagName, 'rt') || _elm_lang$core$Native_Utils.eq(childTagName, 'rp'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'optgroup') && _elm_lang$core$Native_Utils.eq(childTagName, 'optgroup')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'option') && (_elm_lang$core$Native_Utils.eq(childTagName, 'option') || _elm_lang$core$Native_Utils.eq(childTagName, 'optgroup'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'colgroup') && (!_elm_lang$core$Native_Utils.eq(childTagName, 'col'))) || (_elm_lang$core$Native_Utils.eq(tagName, 'caption') || ((_elm_lang$core$Native_Utils.eq(tagName, 'thead') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tbody') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tfoot') || _elm_lang$core$Native_Utils.eq(childTagName, 'table')))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tfoot') && _elm_lang$core$Native_Utils.eq(childTagName, 'table')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tr') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'thead') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot'))))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'td') && (_elm_lang$core$Native_Utils.eq(childTagName, 'td') || (_elm_lang$core$Native_Utils.eq(childTagName, 'th') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot')))))) || (_elm_lang$core$Native_Utils.eq(tagName, 'th') && (_elm_lang$core$Native_Utils.eq(childTagName, 'td') || (_elm_lang$core$Native_Utils.eq(childTagName, 'th') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot')))))))))))))))))))));
	});
var _jinjor$elm_html_parser$HtmlParser$optionalEndTag = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'li',
		_1: {
			ctor: '::',
			_0: 'dt',
			_1: {
				ctor: '::',
				_0: 'dd',
				_1: {
					ctor: '::',
					_0: 'p',
					_1: {
						ctor: '::',
						_0: 'rt',
						_1: {
							ctor: '::',
							_0: 'rp',
							_1: {
								ctor: '::',
								_0: 'optgroup',
								_1: {
									ctor: '::',
									_0: 'option',
									_1: {
										ctor: '::',
										_0: 'colgroup',
										_1: {
											ctor: '::',
											_0: 'caption',
											_1: {
												ctor: '::',
												_0: 'thead',
												_1: {
													ctor: '::',
													_0: 'tbody',
													_1: {
														ctor: '::',
														_0: 'tfoot',
														_1: {
															ctor: '::',
															_0: 'tr',
															_1: {
																ctor: '::',
																_0: 'td',
																_1: {
																	ctor: '::',
																	_0: 'th',
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$startTagOnly = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'br',
		_1: {
			ctor: '::',
			_0: 'img',
			_1: {
				ctor: '::',
				_0: 'hr',
				_1: {
					ctor: '::',
					_0: 'meta',
					_1: {
						ctor: '::',
						_0: 'input',
						_1: {
							ctor: '::',
							_0: 'embed',
							_1: {
								ctor: '::',
								_0: 'area',
								_1: {
									ctor: '::',
									_0: 'base',
									_1: {
										ctor: '::',
										_0: 'col',
										_1: {
											ctor: '::',
											_0: 'keygen',
											_1: {
												ctor: '::',
												_0: 'link',
												_1: {
													ctor: '::',
													_0: 'param',
													_1: {
														ctor: '::',
														_0: 'source',
														_1: {
															ctor: '::',
															_0: 'command',
															_1: {
																ctor: '::',
																_0: 'link',
																_1: {
																	ctor: '::',
																	_0: 'track',
																	_1: {
																		ctor: '::',
																		_0: 'wbr',
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$attributeBareValue = _Bogdanp$elm_combine$Combine$regex('[^ `\"\'<>=\n\r\t]+');
var _jinjor$elm_html_parser$HtmlParser$attributeQuotedValue = A2(
	_Bogdanp$elm_combine$Combine_ops['<|>'],
	A3(
		_Bogdanp$elm_combine$Combine$between,
		_Bogdanp$elm_combine$Combine$string('\"'),
		_Bogdanp$elm_combine$Combine$string('\"'),
		_jinjor$elm_html_parser$HtmlParser$attributeString('\"')),
	A3(
		_Bogdanp$elm_combine$Combine$between,
		_Bogdanp$elm_combine$Combine$string('\''),
		_Bogdanp$elm_combine$Combine$string('\''),
		_jinjor$elm_html_parser$HtmlParser$attributeString('\'')));
var _jinjor$elm_html_parser$HtmlParser$attributeValue = A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _jinjor$elm_html_parser$HtmlParser$attributeQuotedValue, _jinjor$elm_html_parser$HtmlParser$attributeBareValue);
var _jinjor$elm_html_parser$HtmlParser$attributeName = A2(
	_Bogdanp$elm_combine$Combine$map,
	_elm_lang$core$String$toLower,
	_Bogdanp$elm_combine$Combine$regex('[a-zA-Z][a-zA-Z0-9:\\-]*'));
var _jinjor$elm_html_parser$HtmlParser$tagName = A2(
	_Bogdanp$elm_combine$Combine$map,
	_elm_lang$core$String$toLower,
	_Bogdanp$elm_combine$Combine$regex('[a-zA-Z][a-zA-Z0-9\\-]*'));
var _jinjor$elm_html_parser$HtmlParser$spaces1 = _Bogdanp$elm_combine$Combine$regex('[ \t\r\n]+');
var _jinjor$elm_html_parser$HtmlParser$spaces = _Bogdanp$elm_combine$Combine$regex('[ \t\r\n]*');
var _jinjor$elm_html_parser$HtmlParser$spaced = function (p) {
	return A3(_Bogdanp$elm_combine$Combine$between, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$spaces, p);
};
var _jinjor$elm_html_parser$HtmlParser$attributeNameValuePair = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F3(
				function (name, _p2, value) {
					return {ctor: '_Tuple2', _0: name, _1: value};
				}),
			_jinjor$elm_html_parser$HtmlParser$attributeName),
		A3(
			_Bogdanp$elm_combine$Combine$between,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_Bogdanp$elm_combine$Combine$string('='))),
	_jinjor$elm_html_parser$HtmlParser$attributeValue);
var _jinjor$elm_html_parser$HtmlParser$attribute = A2(
	_Bogdanp$elm_combine$Combine_ops['<|>'],
	_jinjor$elm_html_parser$HtmlParser$attributeNameValuePair,
	A2(
		_Bogdanp$elm_combine$Combine$map,
		A2(
			_elm_lang$core$Basics$flip,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			''),
		_jinjor$elm_html_parser$HtmlParser$attributeName));
var _jinjor$elm_html_parser$HtmlParser$startTag = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F4(
					function (_p4, tagName, attrs, _p3) {
						return {ctor: '_Tuple2', _0: tagName, _1: attrs};
					}),
				_Bogdanp$elm_combine$Combine$string('<')),
			_jinjor$elm_html_parser$HtmlParser$tagName),
		A3(
			_Bogdanp$elm_combine$Combine$between,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			A2(_Bogdanp$elm_combine$Combine$sepBy, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$attribute))),
	_Bogdanp$elm_combine$Combine$string('>'));
var _jinjor$elm_html_parser$HtmlParser$generalEndTag = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F4(
					function (_p7, tagName, _p6, _p5) {
						return tagName;
					}),
				_Bogdanp$elm_combine$Combine$string('</')),
			_jinjor$elm_html_parser$HtmlParser$tagName),
		_jinjor$elm_html_parser$HtmlParser$spaces),
	_Bogdanp$elm_combine$Combine$string('>'));
var _jinjor$elm_html_parser$HtmlParser$endTag = function (tagName) {
	return A2(
		_Bogdanp$elm_combine$Combine$andThen,
		function (endTagName) {
			return _elm_lang$core$Native_Utils.eq(tagName, endTagName) ? _Bogdanp$elm_combine$Combine$succeed(
				{ctor: '_Tuple0'}) : _Bogdanp$elm_combine$Combine$fail('');
		},
		_jinjor$elm_html_parser$HtmlParser$generalEndTag);
};
var _jinjor$elm_html_parser$HtmlParser$singleTag = _Bogdanp$elm_combine$Combine$lazy(
	function (_p8) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<*>'],
				A2(
					_Bogdanp$elm_combine$Combine_ops['<*>'],
					A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						F4(
							function (_p10, tagName, attrs, _p9) {
								return {ctor: '_Tuple2', _0: tagName, _1: attrs};
							}),
						_Bogdanp$elm_combine$Combine$string('<')),
					_jinjor$elm_html_parser$HtmlParser$tagName),
				A3(
					_Bogdanp$elm_combine$Combine$between,
					_jinjor$elm_html_parser$HtmlParser$spaces,
					_jinjor$elm_html_parser$HtmlParser$spaces,
					A2(_Bogdanp$elm_combine$Combine$sepBy, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$attribute))),
			_Bogdanp$elm_combine$Combine$string('/>'));
	});
var _jinjor$elm_html_parser$HtmlParser$Comment = function (a) {
	return {ctor: 'Comment', _0: a};
};
var _jinjor$elm_html_parser$HtmlParser$untilCommentEnd = A2(
	_Bogdanp$elm_combine$Combine$map,
	_jinjor$elm_html_parser$HtmlParser$Comment,
	A2(
		_Bogdanp$elm_combine$Combine$map,
		_elm_lang$core$String$fromList,
		A2(
			_Bogdanp$elm_combine$Combine$manyTill,
			_Bogdanp$elm_combine$Combine_Char$anyChar,
			_Bogdanp$elm_combine$Combine$string('-->'))));
var _jinjor$elm_html_parser$HtmlParser$commentNode = A2(
	_Bogdanp$elm_combine$Combine_ops['*>'],
	_Bogdanp$elm_combine$Combine$string('<!--'),
	_jinjor$elm_html_parser$HtmlParser$untilCommentEnd);
var _jinjor$elm_html_parser$HtmlParser$Element = F3(
	function (a, b, c) {
		return {ctor: 'Element', _0: a, _1: b, _2: c};
	});
var _jinjor$elm_html_parser$HtmlParser$doctypeNode = A2(
	_Bogdanp$elm_combine$Combine$map,
	function (_p11) {
		return A3(
			_jinjor$elm_html_parser$HtmlParser$Element,
			'!DOCTYPE',
			{ctor: '[]'},
			{ctor: '[]'});
	},
	_Bogdanp$elm_combine$Combine$regex('<!DOCTYPE [^>]*>'));
var _jinjor$elm_html_parser$HtmlParser$singleNode = A2(
	_Bogdanp$elm_combine$Combine$map,
	function (_p12) {
		var _p13 = _p12;
		return A3(
			_jinjor$elm_html_parser$HtmlParser$Element,
			_p13._0,
			_p13._1,
			{ctor: '[]'});
	},
	_jinjor$elm_html_parser$HtmlParser$singleTag);
var _jinjor$elm_html_parser$HtmlParser$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _jinjor$elm_html_parser$HtmlParser$textNode = A2(_Bogdanp$elm_combine$Combine$map, _jinjor$elm_html_parser$HtmlParser$Text, _jinjor$elm_html_parser$HtmlParser$textNodeString);
var _jinjor$elm_html_parser$HtmlParser$untilScriptEnd = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p14) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				function (_p15) {
					var _p16 = _p15;
					var _p18 = _p16._0;
					var _p17 = _p16._1;
					return _elm_lang$core$Native_Utils.eq(_p18, '') ? _p17 : {
						ctor: '::',
						_0: _jinjor$elm_html_parser$HtmlParser$Text(_p18),
						_1: _p17
					};
				},
				_jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp(tagName));
		});
};
var _jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p19) {
			return A2(
				_Bogdanp$elm_combine$Combine$andThen,
				function (s) {
					return A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						A2(
							_Bogdanp$elm_combine$Combine_ops['<*>'],
							A2(
								_Bogdanp$elm_combine$Combine_ops['<*>'],
								A2(
									_Bogdanp$elm_combine$Combine_ops['<$>'],
									F3(
										function (_p20, comment, rest) {
											return {
												ctor: '_Tuple2',
												_0: s,
												_1: {ctor: '::', _0: comment, _1: rest}
											};
										}),
									_Bogdanp$elm_combine$Combine$string('<!--')),
								_jinjor$elm_html_parser$HtmlParser$untilCommentEnd),
							_jinjor$elm_html_parser$HtmlParser$untilScriptEnd(tagName)),
						A2(
							_Bogdanp$elm_combine$Combine_ops['<|>'],
							A2(
								_Bogdanp$elm_combine$Combine_ops['<$>'],
								function (_p21) {
									return {
										ctor: '_Tuple2',
										_0: s,
										_1: {ctor: '[]'}
									};
								},
								_jinjor$elm_html_parser$HtmlParser$endTag(tagName)),
							A2(
								_Bogdanp$elm_combine$Combine_ops['<*>'],
								A2(
									_Bogdanp$elm_combine$Combine_ops['<$>'],
									F2(
										function (lt, _p22) {
											var _p23 = _p22;
											return {
												ctor: '_Tuple2',
												_0: A2(
													_elm_lang$core$Basics_ops['++'],
													s,
													A2(_elm_lang$core$Basics_ops['++'], lt, _p23._0)),
												_1: _p23._1
											};
										}),
									_Bogdanp$elm_combine$Combine$string('<')),
								_jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp(tagName))));
				},
				_Bogdanp$elm_combine$Combine$regex('[^<]*'));
		});
};
var _jinjor$elm_html_parser$HtmlParser$normalNode = function (parentTagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p24) {
			return A2(
				_Bogdanp$elm_combine$Combine$andThen,
				function (_p25) {
					var _p26 = _p25;
					var _p28 = _p26._0;
					var _p27 = _p26._1;
					return (_elm_lang$core$Native_Utils.eq(_p28, 'script') || _elm_lang$core$Native_Utils.eq(_p28, 'style')) ? A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						function (children) {
							return A3(_jinjor$elm_html_parser$HtmlParser$Element, _p28, _p27, children);
						},
						_jinjor$elm_html_parser$HtmlParser$untilScriptEnd(_p28)) : (A2(_jinjor$elm_html_parser$HtmlParser$isInvalidNest, parentTagName, _p28) ? _Bogdanp$elm_combine$Combine$fail('') : (A2(_elm_lang$core$Set$member, _p28, _jinjor$elm_html_parser$HtmlParser$startTagOnly) ? _Bogdanp$elm_combine$Combine$succeed(
						A3(
							_jinjor$elm_html_parser$HtmlParser$Element,
							_p28,
							_p27,
							{ctor: '[]'})) : A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						function (children) {
							return A3(_jinjor$elm_html_parser$HtmlParser$Element, _p28, _p27, children);
						},
						_jinjor$elm_html_parser$HtmlParser$untilEndTag(_p28))));
				},
				_jinjor$elm_html_parser$HtmlParser$startTag);
		});
};
var _jinjor$elm_html_parser$HtmlParser$untilEndTag = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p29) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<*>'],
				A2(
					_Bogdanp$elm_combine$Combine_ops['<$>'],
					F2(
						function (children1, children2) {
							return A2(_elm_lang$core$Basics_ops['++'], children1, children2);
						}),
					_Bogdanp$elm_combine$Combine$many(
						_jinjor$elm_html_parser$HtmlParser$node(tagName))),
				A2(
					_Bogdanp$elm_combine$Combine$optional,
					{ctor: '[]'},
					A2(
						_Bogdanp$elm_combine$Combine$andThen,
						function (endTagName) {
							return _elm_lang$core$Native_Utils.eq(tagName, endTagName) ? _Bogdanp$elm_combine$Combine$succeed(
								{ctor: '[]'}) : _jinjor$elm_html_parser$HtmlParser$untilEndTag(tagName);
						},
						_jinjor$elm_html_parser$HtmlParser$generalEndTag)));
		});
};
var _jinjor$elm_html_parser$HtmlParser$node = function (parentTagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p30) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$doctypeNode,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$singleNode,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_jinjor$elm_html_parser$HtmlParser$normalNode(parentTagName),
						A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _jinjor$elm_html_parser$HtmlParser$commentNode, _jinjor$elm_html_parser$HtmlParser$textNode))));
		});
};
var _jinjor$elm_html_parser$HtmlParser$nodesAndEnd = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		F2(
			function (nodes, _p31) {
				return nodes;
			}),
		_jinjor$elm_html_parser$HtmlParser$untilEndTag('')),
	_Bogdanp$elm_combine$Combine$end);
var _jinjor$elm_html_parser$HtmlParser$parse = function (s) {
	var _p32 = A2(_Bogdanp$elm_combine$Combine$parse, _jinjor$elm_html_parser$HtmlParser$nodesAndEnd, s);
	if (_p32.ctor === 'Ok') {
		return _p32._0._2;
	} else {
		return {ctor: '[]'};
	}
};

var _rnons$ordered_containers$OrderedDict$values = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$List$filterMap,
		function (key) {
			return A2(_elm_lang$core$Dict$get, key, _p1._1);
		},
		_p1._0);
};
var _rnons$ordered_containers$OrderedDict$keys = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _rnons$ordered_containers$OrderedDict$reducer = F4(
	function (dict, f, key, acc) {
		var _p4 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p4.ctor === 'Just') {
			return A3(f, key, _p4._0, acc);
		} else {
			return acc;
		}
	});
var _rnons$ordered_containers$OrderedDict$foldl = F3(
	function (f, acc, _p5) {
		var _p6 = _p5;
		return A3(
			_elm_lang$core$List$foldl,
			A2(_rnons$ordered_containers$OrderedDict$reducer, _p6._1, f),
			acc,
			_p6._0);
	});
var _rnons$ordered_containers$OrderedDict$foldr = F3(
	function (f, acc, _p7) {
		var _p8 = _p7;
		return A3(
			_elm_lang$core$List$foldr,
			A2(_rnons$ordered_containers$OrderedDict$reducer, _p8._1, f),
			acc,
			_p8._0);
	});
var _rnons$ordered_containers$OrderedDict$size = function (_p9) {
	var _p10 = _p9;
	return _elm_lang$core$List$length(_p10._0);
};
var _rnons$ordered_containers$OrderedDict$member = F2(
	function (key, _p11) {
		var _p12 = _p11;
		return A2(_elm_lang$core$Dict$member, key, _p12._1);
	});
var _rnons$ordered_containers$OrderedDict$get = F2(
	function (key, _p13) {
		var _p14 = _p13;
		return A2(_elm_lang$core$Dict$get, key, _p14._1);
	});
var _rnons$ordered_containers$OrderedDict$OrderedDict = F2(
	function (a, b) {
		return {ctor: 'OrderedDict', _0: a, _1: b};
	});
var _rnons$ordered_containers$OrderedDict$empty = A2(
	_rnons$ordered_containers$OrderedDict$OrderedDict,
	{ctor: '[]'},
	_elm_lang$core$Dict$empty);
var _rnons$ordered_containers$OrderedDict$isEmpty = function (odict) {
	return _elm_lang$core$Native_Utils.eq(odict, _rnons$ordered_containers$OrderedDict$empty);
};
var _rnons$ordered_containers$OrderedDict$update = F3(
	function (key, updater, _p15) {
		var _p16 = _p15;
		var _p19 = _p16._0;
		var _p18 = _p16._1;
		var newList = function () {
			var _p17 = updater(
				A2(_elm_lang$core$Dict$get, key, _p18));
			if (_p17.ctor === 'Just') {
				return A2(_elm_lang$core$List$member, key, _p19) ? _p19 : A2(
					_elm_lang$core$Basics_ops['++'],
					_p19,
					{
						ctor: '::',
						_0: key,
						_1: {ctor: '[]'}
					});
			} else {
				return A2(_elm_lang$core$List$member, key, _p19) ? A2(
					_elm_lang$core$List$filter,
					function (k) {
						return !_elm_lang$core$Native_Utils.eq(k, key);
					},
					_p19) : _p19;
			}
		}();
		var newDict = A3(_elm_lang$core$Dict$update, key, updater, _p18);
		return A2(_rnons$ordered_containers$OrderedDict$OrderedDict, newList, newDict);
	});
var _rnons$ordered_containers$OrderedDict$insert = F3(
	function (key, value, odict) {
		return A3(
			_rnons$ordered_containers$OrderedDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			odict);
	});
var _rnons$ordered_containers$OrderedDict$singleton = F2(
	function (key, value) {
		return A3(_rnons$ordered_containers$OrderedDict$insert, key, value, _rnons$ordered_containers$OrderedDict$empty);
	});
var _rnons$ordered_containers$OrderedDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, odict) {
				return A2(predicate, key, value) ? A3(_rnons$ordered_containers$OrderedDict$insert, key, value, odict) : odict;
			});
		return A3(_rnons$ordered_containers$OrderedDict$foldl, add, _rnons$ordered_containers$OrderedDict$empty, dictionary);
	});
var _rnons$ordered_containers$OrderedDict$intersect = F2(
	function (odict1, odict2) {
		return A2(
			_rnons$ordered_containers$OrderedDict$filter,
			F2(
				function (k, _p20) {
					return A2(_rnons$ordered_containers$OrderedDict$member, k, odict2);
				}),
			odict1);
	});
var _rnons$ordered_containers$OrderedDict$partition = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, _p21) {
				var _p22 = _p21;
				var _p24 = _p22._1;
				var _p23 = _p22._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_rnons$ordered_containers$OrderedDict$insert, key, value, _p23),
					_1: _p24
				} : {
					ctor: '_Tuple2',
					_0: _p23,
					_1: A3(_rnons$ordered_containers$OrderedDict$insert, key, value, _p24)
				};
			});
		return A3(
			_rnons$ordered_containers$OrderedDict$foldl,
			add,
			{ctor: '_Tuple2', _0: _rnons$ordered_containers$OrderedDict$empty, _1: _rnons$ordered_containers$OrderedDict$empty},
			dictionary);
	});
var _rnons$ordered_containers$OrderedDict$union = F2(
	function (odict1, odict2) {
		var reducer = F3(
			function (k, v, acc) {
				return A2(_rnons$ordered_containers$OrderedDict$member, k, odict1) ? acc : A3(_rnons$ordered_containers$OrderedDict$insert, k, v, acc);
			});
		return A3(_rnons$ordered_containers$OrderedDict$foldl, reducer, odict1, odict2);
	});
var _rnons$ordered_containers$OrderedDict$remove = F2(
	function (key, odict) {
		return A3(
			_rnons$ordered_containers$OrderedDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			odict);
	});
var _rnons$ordered_containers$OrderedDict$diff = F2(
	function (odict1, odict2) {
		return A3(
			_rnons$ordered_containers$OrderedDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_rnons$ordered_containers$OrderedDict$remove, k, t);
				}),
			odict1,
			odict2);
	});
var _rnons$ordered_containers$OrderedDict$map = F2(
	function (f, _p25) {
		var _p26 = _p25;
		return A2(
			_rnons$ordered_containers$OrderedDict$OrderedDict,
			_p26._0,
			A2(_elm_lang$core$Dict$map, f, _p26._1));
	});
var _rnons$ordered_containers$OrderedDict$toList = function (_p27) {
	var _p28 = _p27;
	var _p29 = _p28._0;
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		_p29,
		_rnons$ordered_containers$OrderedDict$values(
			A2(_rnons$ordered_containers$OrderedDict$OrderedDict, _p29, _p28._1)));
};
var _rnons$ordered_containers$OrderedDict$fromList = function (assocs) {
	var dict = _elm_lang$core$Dict$fromList(assocs);
	var _p30 = _elm_lang$core$List$unzip(assocs);
	var list = _p30._0;
	return A2(_rnons$ordered_containers$OrderedDict$OrderedDict, list, dict);
};

var _user$project$Answer_Model$generate_answer = function (i) {
	return {id: _elm_lang$core$Maybe$Nothing, question_id: _elm_lang$core$Maybe$Nothing, text: '', correct: false, order: i, feedback: ''};
};
var _user$project$Answer_Model$generate_answers = function (n) {
	return _elm_lang$core$Array$fromList(
		A2(
			_elm_lang$core$List$map,
			_user$project$Answer_Model$generate_answer,
			A2(_elm_lang$core$List$range, 0, n - 1)));
};
var _user$project$Answer_Model$default_answer_text = function (answer) {
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: 'Click to write choice',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(answer.order + 1),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Answer_Model$Answer = F6(
	function (a, b, c, d, e, f) {
		return {id: a, question_id: b, text: c, correct: d, order: e, feedback: f};
	});

var _user$project$Answer_Decode$answerDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'feedback',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'order',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'correct',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'text',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'question_id',
					_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Answer_Model$Answer)))))));
var _user$project$Answer_Decode$answersDecoder = _elm_lang$core$Json_Decode$array(_user$project$Answer_Decode$answerDecoder);

var _user$project$Answer_Encode$answerEncoder = function (answer) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'text',
				_1: _elm_lang$core$Json_Encode$string(answer.text)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'correct',
					_1: _elm_lang$core$Json_Encode$bool(answer.correct)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'order',
						_1: _elm_lang$core$Json_Encode$int(answer.order)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'feedback',
							_1: _elm_lang$core$Json_Encode$string(answer.feedback)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Answer_Encode$answersEncoder = function (answers) {
	return _elm_lang$core$Json_Encode$list(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (answer) {
					return _user$project$Answer_Encode$answerEncoder(answer);
				},
				answers)));
};

var _user$project$Field$fieldIDDecoder = _elm_lang$core$Json_Decode$int;

var _user$project$Answer_Field$get_answer_field = F2(
	function (answer_fields, index) {
		return A2(_elm_lang$core$Array$get, index, answer_fields);
	});
var _user$project$Answer_Field$answer = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$Answer_Field$attributes = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Answer_Field$name = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.name;
};
var _user$project$Answer_Field$id = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.id;
};
var _user$project$Answer_Field$error = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.error;
};
var _user$project$Answer_Field$index = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.index;
};
var _user$project$Answer_Field$editable = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.editable;
};
var _user$project$Answer_Field$question_index = function (answer_field) {
	var attrs = _user$project$Answer_Field$attributes(answer_field);
	return attrs.question_index;
};
var _user$project$Answer_Field$feedback_field = function (_p4) {
	var _p5 = _p4;
	return _p5._2;
};
var _user$project$Answer_Field$toAnswers = function (answer_fields) {
	return A2(_elm_lang$core$Array$map, _user$project$Answer_Field$answer, answer_fields);
};
var _user$project$Answer_Field$generate_answer_feedback_field = function (id) {
	return {id: id, editable: false, error_string: '', error: false};
};
var _user$project$Answer_Field$AnswerFeedbackField = F4(
	function (a, b, c, d) {
		return {id: a, editable: b, error_string: c, error: d};
	});
var _user$project$Answer_Field$AnswerFieldAttributes = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, name: b, editable: c, error: d, error_string: e, question_index: f, index: g};
	});
var _user$project$Answer_Field$AnswerField = F3(
	function (a, b, c) {
		return {ctor: 'AnswerField', _0: a, _1: b, _2: c};
	});
var _user$project$Answer_Field$update_question_index = F2(
	function (_p6, i) {
		var _p7 = _p6;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_p7._0,
			_elm_lang$core$Native_Utils.update(
				_p7._1,
				{question_index: i}),
			_p7._2);
	});
var _user$project$Answer_Field$update_answer_index = F2(
	function (_p8, i) {
		var _p9 = _p8;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_elm_lang$core$Native_Utils.update(
				_p9._0,
				{order: i}),
			_elm_lang$core$Native_Utils.update(
				_p9._1,
				{index: i}),
			_p9._2);
	});
var _user$project$Answer_Field$update_answer_indexes = function (answer_fields) {
	return A2(
		_elm_lang$core$Array$indexedMap,
		F2(
			function (i, ans) {
				return A2(_user$project$Answer_Field$update_answer_index, ans, i);
			}),
		answer_fields);
};
var _user$project$Answer_Field$add_answer = F3(
	function (answer_fields, answer_field, new_answer_field) {
		var begin = A3(
			_elm_lang$core$Array$slice,
			0,
			_user$project$Answer_Field$index(answer_field) + 1,
			answer_fields);
		var last_elem_index = _elm_lang$core$Array$length(answer_fields);
		var end = A3(
			_elm_lang$core$Array$slice,
			_user$project$Answer_Field$index(new_answer_field),
			last_elem_index,
			answer_fields);
		return _user$project$Answer_Field$update_answer_indexes(
			A2(
				_elm_lang$core$Array$append,
				A2(_elm_lang$core$Array$push, new_answer_field, begin),
				end));
	});
var _user$project$Answer_Field$delete_answer = F2(
	function (answer_fields, answer_field) {
		return _user$project$Answer_Field$update_answer_indexes(
			A2(
				_elm_lang$core$Array$filter,
				function (ans) {
					return !_elm_lang$core$Native_Utils.eq(
						_user$project$Answer_Field$index(ans),
						_user$project$Answer_Field$index(answer_field));
				},
				answer_fields));
	});
var _user$project$Answer_Field$generate_answer_field = F4(
	function (i, j, k, answer) {
		var answer_name = A2(
			_elm_lang$core$String$join,
			'_',
			{
				ctor: '::',
				_0: 'textsection',
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(i),
					_1: {
						ctor: '::',
						_0: 'question',
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(j),
							_1: {
								ctor: '::',
								_0: 'correct_answer',
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var answer_id = A2(
			_elm_lang$core$String$join,
			'_',
			{
				ctor: '::',
				_0: 'textsection',
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(i),
					_1: {
						ctor: '::',
						_0: 'question',
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(j),
							_1: {
								ctor: '::',
								_0: 'answer',
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Basics$toString(k),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
		return A3(
			_user$project$Answer_Field$AnswerField,
			answer,
			{
				id: answer_id,
				input_id: A2(
					_elm_lang$core$String$join,
					'_',
					{
						ctor: '::',
						_0: answer_id,
						_1: {
							ctor: '::',
							_0: 'input',
							_1: {ctor: '[]'}
						}
					}),
				name: answer_name,
				editable: false,
				error: false,
				error_string: '',
				question_index: j,
				index: k
			},
			_user$project$Answer_Field$generate_answer_feedback_field(
				A2(
					_elm_lang$core$String$join,
					'_',
					{
						ctor: '::',
						_0: answer_id,
						_1: {
							ctor: '::',
							_0: 'feedback',
							_1: {ctor: '[]'}
						}
					})));
	});
var _user$project$Answer_Field$switch_editable = function (_p10) {
	var _p11 = _p10;
	var _p12 = _p11._1;
	return A3(
		_user$project$Answer_Field$AnswerField,
		_p11._0,
		_elm_lang$core$Native_Utils.update(
			_p12,
			{
				editable: _p12.editable ? false : true
			}),
		_p11._2);
};
var _user$project$Answer_Field$set_answer_text = F2(
	function (_p13, text) {
		var _p14 = _p13;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_elm_lang$core$Native_Utils.update(
				_p14._0,
				{text: text}),
			_p14._1,
			_p14._2);
	});
var _user$project$Answer_Field$set_answer_correct = F2(
	function (_p15, correct) {
		var _p16 = _p15;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_elm_lang$core$Native_Utils.update(
				_p16._0,
				{correct: correct}),
			_p16._1,
			_p16._2);
	});
var _user$project$Answer_Field$set_answer_feedback = F2(
	function (_p17, new_feedback) {
		var _p18 = _p17;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_elm_lang$core$Native_Utils.update(
				_p18._0,
				{feedback: new_feedback}),
			_p18._1,
			_p18._2);
	});
var _user$project$Answer_Field$update_error = F2(
	function (_p19, error_string) {
		var _p20 = _p19;
		return A3(
			_user$project$Answer_Field$AnswerField,
			_p20._0,
			_elm_lang$core$Native_Utils.update(
				_p20._1,
				{error: true, error_string: error_string}),
			_p20._2);
	});
var _user$project$Answer_Field$update_feedback_error = F2(
	function (_p21, error_string) {
		var _p22 = _p21;
		return _user$project$Answer_Field$switch_editable(
			A3(
				_user$project$Answer_Field$AnswerField,
				_p22._0,
				_p22._1,
				_elm_lang$core$Native_Utils.update(
					_p22._2,
					{error: true, error_string: error_string})));
	});

var _user$project$Question_Model$new_question = function (i) {
	return {
		id: _elm_lang$core$Maybe$Nothing,
		text_id: _elm_lang$core$Maybe$Nothing,
		created_dt: _elm_lang$core$Maybe$Nothing,
		modified_dt: _elm_lang$core$Maybe$Nothing,
		body: '',
		order: i,
		answers: _user$project$Answer_Model$generate_answers(4),
		question_type: 'main_idea'
	};
};
var _user$project$Question_Model$initial_questions = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: _user$project$Question_Model$new_question(0),
		_1: {ctor: '[]'}
	});
var _user$project$Question_Model$Question = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, text_id: b, created_dt: c, modified_dt: d, body: e, order: f, answers: g, question_type: h};
	});

var _user$project$Question_Field$answers = function (_p0) {
	var _p1 = _p0;
	return _p1._2;
};
var _user$project$Question_Field$attributes = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Question_Field$index = function (question_field) {
	var attrs = _user$project$Question_Field$attributes(question_field);
	return attrs.index;
};
var _user$project$Question_Field$id = function (question_field) {
	var attrs = _user$project$Question_Field$attributes(question_field);
	return attrs.id;
};
var _user$project$Question_Field$editable = function (question_field) {
	var attrs = _user$project$Question_Field$attributes(question_field);
	return attrs.editable;
};
var _user$project$Question_Field$delete_selected = function (question_fields) {
	return A2(
		_elm_lang$core$Array$filter,
		function (q) {
			var q_attrs = _user$project$Question_Field$attributes(q);
			return !q_attrs.selected;
		},
		question_fields);
};
var _user$project$Question_Field$menu_visible = function (question_field) {
	var attrs = _user$project$Question_Field$attributes(question_field);
	return attrs.menu_visible;
};
var _user$project$Question_Field$error = function (question_field) {
	var attrs = _user$project$Question_Field$attributes(question_field);
	return attrs.error;
};
var _user$project$Question_Field$question = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Question_Field$question_index = function (_p6) {
	var _p7 = _p6;
	return _p7._1.index;
};
var _user$project$Question_Field$update_question_field = F2(
	function (new_question_field, question_fields) {
		return A3(
			_elm_lang$core$Array$set,
			_user$project$Question_Field$question_index(new_question_field),
			new_question_field,
			question_fields);
	});
var _user$project$Question_Field$question_field_for_answer = F2(
	function (question_fields, answer_field) {
		var question_index = _user$project$Answer_Field$question_index(answer_field);
		return A2(_elm_lang$core$Array$get, question_index, question_fields);
	});
var _user$project$Question_Field$get_question_field = F2(
	function (question_fields, index) {
		return A2(_elm_lang$core$Array$get, index, question_fields);
	});
var _user$project$Question_Field$toQuestion = function (question_field) {
	var new_answers = _user$project$Answer_Field$toAnswers(
		_user$project$Question_Field$answers(question_field));
	var new_question = _user$project$Question_Field$question(question_field);
	return _elm_lang$core$Native_Utils.update(
		new_question,
		{answers: new_answers});
};
var _user$project$Question_Field$toQuestions = function (question_fields) {
	return A2(_elm_lang$core$Array$map, _user$project$Question_Field$toQuestion, question_fields);
};
var _user$project$Question_Field$Detail = {ctor: 'Detail'};
var _user$project$Question_Field$MainIdea = {ctor: 'MainIdea'};
var _user$project$Question_Field$QuestionField = F3(
	function (a, b, c) {
		return {ctor: 'QuestionField', _0: a, _1: b, _2: c};
	});
var _user$project$Question_Field$generate_question_field = F3(
	function (text_index, question_index, question) {
		var question_field_id = A2(
			_elm_lang$core$String$join,
			'_',
			{
				ctor: '::',
				_0: 'textsection',
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(text_index),
					_1: {
						ctor: '::',
						_0: 'question',
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(question_index),
							_1: {ctor: '[]'}
						}
					}
				}
			});
		return A3(
			_user$project$Question_Field$QuestionField,
			question,
			{
				id: question_field_id,
				input_id: A2(
					_elm_lang$core$String$join,
					'_',
					{
						ctor: '::',
						_0: question_field_id,
						_1: {
							ctor: '::',
							_0: 'input',
							_1: {ctor: '[]'}
						}
					}),
				editable: false,
				menu_visible: false,
				selected: false,
				error_string: '',
				error: false,
				index: question_index
			},
			A2(
				_elm_lang$core$Array$indexedMap,
				A2(_user$project$Answer_Field$generate_answer_field, text_index, question_index),
				question.answers));
	});
var _user$project$Question_Field$fromQuestions = F2(
	function (text_index, questions) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			_user$project$Question_Field$generate_question_field(text_index),
			questions);
	});
var _user$project$Question_Field$add_new_question = F2(
	function (text_index, fields) {
		var new_question_index = _elm_lang$core$Array$length(fields);
		return A2(
			_elm_lang$core$Array$push,
			A3(
				_user$project$Question_Field$generate_question_field,
				text_index,
				new_question_index,
				_user$project$Question_Model$new_question(new_question_index)),
			fields);
	});
var _user$project$Question_Field$initial_question_fields = function (text_index) {
	return A2(
		_elm_lang$core$Array$indexedMap,
		_user$project$Question_Field$generate_question_field(text_index),
		_user$project$Question_Model$initial_questions);
};
var _user$project$Question_Field$update_error = F2(
	function (_p8, error_string) {
		var _p9 = _p8;
		return A3(
			_user$project$Question_Field$QuestionField,
			_p9._0,
			_elm_lang$core$Native_Utils.update(
				_p9._1,
				{error: true, error_string: error_string}),
			_p9._2);
	});
var _user$project$Question_Field$set_answer_field = F2(
	function (question_fields, answer_field) {
		var answer_index = _user$project$Answer_Field$index(answer_field);
		var question_index = _user$project$Answer_Field$question_index(answer_field);
		var _p10 = A2(_elm_lang$core$Array$get, question_index, question_fields);
		if (_p10.ctor === 'Just') {
			return A3(
				_elm_lang$core$Array$set,
				question_index,
				A3(
					_user$project$Question_Field$QuestionField,
					_p10._0._0,
					_p10._0._1,
					A3(_elm_lang$core$Array$set, answer_index, answer_field, _p10._0._2)),
				question_fields);
		} else {
			return question_fields;
		}
	});
var _user$project$Question_Field$update_errors = F2(
	function (question_fields, _p11) {
		var _p12 = _p11;
		var _p21 = _p12._1;
		var error_key = A2(_elm_lang$core$String$split, '_', _p12._0);
		var _p13 = error_key;
		_v7_2:
		do {
			if ((((_p13.ctor === '::') && (_p13._0 === 'question')) && (_p13._1.ctor === '::')) && (_p13._1._1.ctor === '::')) {
				if (_p13._1._1._1.ctor === '::') {
					if (_p13._1._1._0 === 'answer') {
						var _p14 = _elm_lang$core$String$toInt(_p13._1._0);
						if (_p14.ctor === 'Ok') {
							var _p15 = _elm_lang$core$String$toInt(_p13._1._1._1._0);
							if (_p15.ctor === 'Ok') {
								var _p16 = A2(_user$project$Question_Field$get_question_field, question_fields, _p14._0);
								if (_p16.ctor === 'Just') {
									var _p17 = A2(
										_user$project$Answer_Field$get_answer_field,
										_user$project$Question_Field$answers(_p16._0),
										_p15._0);
									if (_p17.ctor === 'Just') {
										var _p18 = _p17._0;
										return A2(
											_user$project$Question_Field$set_answer_field,
											question_fields,
											_elm_lang$core$List$isEmpty(_p13._1._1._1._1) ? A2(_user$project$Answer_Field$update_error, _p18, _p21) : A2(_user$project$Answer_Field$update_feedback_error, _p18, _p21));
									} else {
										return question_fields;
									}
								} else {
									return question_fields;
								}
							} else {
								return question_fields;
							}
						} else {
							return question_fields;
						}
					} else {
						break _v7_2;
					}
				} else {
					var _p19 = _elm_lang$core$String$toInt(_p13._1._0);
					if (_p19.ctor === 'Ok') {
						var _p20 = A2(_user$project$Question_Field$get_question_field, question_fields, _p19._0);
						if (_p20.ctor === 'Just') {
							return A2(
								_user$project$Question_Field$update_question_field,
								A2(_user$project$Question_Field$update_error, _p20._0, _p21),
								question_fields);
						} else {
							return question_fields;
						}
					} else {
						return question_fields;
					}
				}
			} else {
				break _v7_2;
			}
		} while(false);
		return question_fields;
	});
var _user$project$Question_Field$set_answer_feedback = F3(
	function (_p22, answer_field, feedback) {
		var _p23 = _p22;
		var new_answer_field = A2(_user$project$Answer_Field$set_answer_feedback, answer_field, feedback);
		var index = _user$project$Answer_Field$index(answer_field);
		return A3(
			_user$project$Question_Field$QuestionField,
			_p23._0,
			_p23._1,
			A3(_elm_lang$core$Array$set, index, new_answer_field, _p23._2));
	});
var _user$project$Question_Field$set_answer_correct = F2(
	function (_p24, answer_field) {
		var _p25 = _p24;
		var index = _user$project$Answer_Field$index;
		var correct = _user$project$Answer_Field$set_answer_correct;
		var answer_index = _user$project$Answer_Field$index(answer_field);
		return A3(
			_user$project$Question_Field$QuestionField,
			_p25._0,
			_p25._1,
			A2(
				_elm_lang$core$Array$map,
				function (a) {
					return _elm_lang$core$Native_Utils.eq(
						index(a),
						answer_index) ? A2(correct, a, true) : A2(correct, a, false);
				},
				_p25._2));
	});
var _user$project$Question_Field$update_question = F2(
	function (_p26, new_question) {
		var _p27 = _p26;
		return A3(_user$project$Question_Field$QuestionField, new_question, _p27._1, _p27._2);
	});
var _user$project$Question_Field$delete_question = F2(
	function (index, fields) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			F2(
				function (i, _p28) {
					var _p29 = _p28;
					return A3(
						_user$project$Question_Field$QuestionField,
						_p29._0,
						_elm_lang$core$Native_Utils.update(
							_p29._1,
							{index: i}),
						A2(
							_elm_lang$core$Array$map,
							function (answer_field) {
								return A2(_user$project$Answer_Field$update_question_index, answer_field, i);
							},
							_p29._2));
				}),
			A2(
				_elm_lang$core$Array$filter,
				function (field) {
					return !_elm_lang$core$Native_Utils.eq(
						_user$project$Question_Field$question_index(field),
						index);
				},
				fields));
	});
var _user$project$Question_Field$delete_question_field = F2(
	function (question_field, question_fields) {
		return A2(
			function (_p30) {
				return _user$project$Question_Field$delete_question(
					_user$project$Question_Field$index(_p30));
			},
			question_field,
			question_fields);
	});
var _user$project$Question_Field$set_question_type = F2(
	function (_p31, question_type) {
		var _p32 = _p31;
		var q_type = function () {
			var _p33 = question_type;
			if (_p33.ctor === 'MainIdea') {
				return 'main_idea';
			} else {
				return 'detail';
			}
		}();
		return A3(
			_user$project$Question_Field$QuestionField,
			_elm_lang$core$Native_Utils.update(
				_p32._0,
				{question_type: q_type}),
			_p32._1,
			_p32._2);
	});
var _user$project$Question_Field$switch_editable = function (_p34) {
	var _p35 = _p34;
	var _p36 = _p35._1;
	return A3(
		_user$project$Question_Field$QuestionField,
		_p35._0,
		_elm_lang$core$Native_Utils.update(
			_p36,
			{
				editable: _p36.editable ? false : true
			}),
		_p35._2);
};
var _user$project$Question_Field$set_question_body = F2(
	function (_p37, value) {
		var _p38 = _p37;
		return A3(
			_user$project$Question_Field$QuestionField,
			_elm_lang$core$Native_Utils.update(
				_p38._0,
				{body: value}),
			_elm_lang$core$Native_Utils.update(
				_p38._1,
				{error: false}),
			_p38._2);
	});
var _user$project$Question_Field$set_menu_visible = F2(
	function (_p39, visible) {
		var _p40 = _p39;
		return A3(
			_user$project$Question_Field$QuestionField,
			_p40._0,
			_elm_lang$core$Native_Utils.update(
				_p40._1,
				{menu_visible: visible}),
			_p40._2);
	});
var _user$project$Question_Field$set_selected = F2(
	function (_p41, selected) {
		var _p42 = _p41;
		return A3(
			_user$project$Question_Field$QuestionField,
			_p42._0,
			_elm_lang$core$Native_Utils.update(
				_p42._1,
				{selected: selected}),
			_p42._2);
	});
var _user$project$Question_Field$set_answers = F2(
	function (_p43, new_answer_fields) {
		var _p44 = _p43;
		return A3(_user$project$Question_Field$QuestionField, _p44._0, _p44._1, new_answer_fields);
	});
var _user$project$Question_Field$add_answer_field = F3(
	function (question_field, answer_field, new_answer_field) {
		var new_answer_fields = A3(
			_user$project$Answer_Field$add_answer,
			_user$project$Question_Field$answers(question_field),
			answer_field,
			new_answer_field);
		return A2(_user$project$Question_Field$set_answers, question_field, new_answer_fields);
	});
var _user$project$Question_Field$delete_answer_field = F2(
	function (question_field, answer_field) {
		var new_answer_fields = A2(
			_user$project$Answer_Field$delete_answer,
			_user$project$Question_Field$answers(question_field),
			answer_field);
		return A2(_user$project$Question_Field$set_answers, question_field, new_answer_fields);
	});

var _user$project$Text_Section_Model$emptyTextSection = function (i) {
	var initial_questions = _user$project$Question_Model$initial_questions;
	return {
		order: i,
		question_count: _elm_lang$core$Array$length(initial_questions),
		questions: initial_questions,
		body: ''
	};
};
var _user$project$Text_Section_Model$TextSection = F4(
	function (a, b, c, d) {
		return {order: a, body: b, question_count: c, questions: d};
	});
var _user$project$Text_Section_Model$Section = function (a) {
	return {ctor: 'Section', _0: a};
};

var _user$project$Menu$linkTextToString = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$Menu$uriToString = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Menu$selected = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Menu$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _user$project$Menu$URI = function (a) {
	return {ctor: 'URI', _0: a};
};
var _user$project$Menu$LinkText = function (a) {
	return {ctor: 'LinkText', _0: a};
};

var _user$project$Menu_Item_Link$text = function (_p0) {
	var _p1 = _p0;
	return _p1._1;
};
var _user$project$Menu_Item_Link$uri = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Menu_Item_Link$MenuItemLink = F2(
	function (a, b) {
		return {ctor: 'MenuItemLink', _0: a, _1: b};
	});
var _user$project$Menu_Item_Link$new = F2(
	function (uri, link_text) {
		return A2(_user$project$Menu_Item_Link$MenuItemLink, uri, link_text);
	});

var _user$project$Menu_Item$linkText = function (_p0) {
	var _p1 = _p0;
	return _user$project$Menu_Item_Link$text(_p1._0);
};
var _user$project$Menu_Item$linkTextToString = function (menu_item) {
	return _user$project$Menu$linkTextToString(
		_user$project$Menu_Item$linkText(menu_item));
};
var _user$project$Menu_Item$uri = function (_p2) {
	var _p3 = _p2;
	return _user$project$Menu_Item_Link$uri(_p3._0);
};
var _user$project$Menu_Item$uriToString = function (menu_item) {
	return _user$project$Menu$uriToString(
		_user$project$Menu_Item$uri(menu_item));
};
var _user$project$Menu_Item$selected = function (_p4) {
	var _p5 = _p4;
	return _user$project$Menu$selected(_p5._1);
};
var _user$project$Menu_Item$MenuItem = F2(
	function (a, b) {
		return {ctor: 'MenuItem', _0: a, _1: b};
	});
var _user$project$Menu_Item$new = F2(
	function (link, select) {
		return A2(_user$project$Menu_Item$MenuItem, link, select);
	});
var _user$project$Menu_Item$setSelected = F2(
	function (_p6, select) {
		var _p7 = _p6;
		return A2(
			_user$project$Menu_Item$MenuItem,
			_p7._0,
			_user$project$Menu$Select(select));
	});

var _user$project$Menu_Items$getItem = F2(
	function (_p0, index) {
		var _p1 = _p0;
		return A2(_elm_lang$core$Array$get, index, _p1._0);
	});
var _user$project$Menu_Items$items = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Menu_Items$initMenuItemFromParams = function (param) {
	var menu_link = A2(
		_user$project$Menu_Item_Link$new,
		_user$project$Menu$URI(param.link),
		_user$project$Menu$LinkText(param.link_text));
	return A2(
		_user$project$Menu_Item$new,
		menu_link,
		_user$project$Menu$Select(param.selected));
};
var _user$project$Menu_Items$MenuItemParams = F3(
	function (a, b, c) {
		return {link: a, link_text: b, selected: c};
	});
var _user$project$Menu_Items$MenuItems = function (a) {
	return {ctor: 'MenuItems', _0: a};
};
var _user$project$Menu_Items$initMenuItems = function (flags) {
	return _user$project$Menu_Items$MenuItems(
		_elm_lang$core$Array$fromList(
			A2(_elm_lang$core$List$map, _user$project$Menu_Items$initMenuItemFromParams, flags.menu_items)));
};
var _user$project$Menu_Items$setItem = F3(
	function (_p4, item, index) {
		var _p5 = _p4;
		return _user$project$Menu_Items$MenuItems(
			A3(_elm_lang$core$Array$set, index, item, _p5._0));
	});
var _user$project$Menu_Items$setSelected = F3(
	function (_p6, index, select) {
		var _p7 = _p6;
		var _p9 = _p7._0;
		var _p8 = A2(_elm_lang$core$Array$get, index, _p9);
		if (_p8.ctor === 'Just') {
			return _user$project$Menu_Items$MenuItems(
				A3(
					_elm_lang$core$Array$set,
					index,
					A2(_user$project$Menu_Item$setSelected, _p8._0, select),
					_p9));
		} else {
			return _user$project$Menu_Items$MenuItems(_p9);
		}
	});

var _user$project$Flags$UnAuthedFlags = function (a) {
	return {csrftoken: a};
};

var _user$project$Text_Translations$expectedGrammemeKeys = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'pos',
		_1: {
			ctor: '::',
			_0: 'tense',
			_1: {
				ctor: '::',
				_0: 'aspect',
				_1: {
					ctor: '::',
					_0: 'form',
					_1: {
						ctor: '::',
						_0: 'mood',
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Text_Translations$WordValues = F2(
	function (a, b) {
		return {grammemes: a, translations: b};
	});
var _user$project$Text_Translations$TextGroupDetails = F4(
	function (a, b, c, d) {
		return {id: a, instance: b, pos: c, length: d};
	});
var _user$project$Text_Translations$Flags = F2(
	function (a, b) {
		return {group_word_endpoint_url: a, csrftoken: b};
	});
var _user$project$Text_Translations$Translation = F4(
	function (a, b, c, d) {
		return {id: a, endpoint: b, correct_for_context: c, text: d};
	});
var _user$project$Text_Translations$Cancelable = {ctor: 'Cancelable'};
var _user$project$Text_Translations$Mergeable = {ctor: 'Mergeable'};

var _user$project$Text_Model$set_tags = F2(
	function (text, tags) {
		return _elm_lang$core$Native_Utils.update(
			text,
			{tags: tags});
	});
var _user$project$Text_Model$set_sections = F2(
	function (text, text_sections) {
		return _elm_lang$core$Native_Utils.update(
			text,
			{sections: text_sections});
	});
var _user$project$Text_Model$new_text = {
	id: _elm_lang$core$Maybe$Nothing,
	title: '',
	author: '',
	source: '',
	difficulty: '',
	introduction: '',
	conclusion: _elm_lang$core$Maybe$Nothing,
	tags: _elm_lang$core$Maybe$Nothing,
	created_by: _elm_lang$core$Maybe$Nothing,
	last_modified_by: _elm_lang$core$Maybe$Nothing,
	created_dt: _elm_lang$core$Maybe$Nothing,
	modified_dt: _elm_lang$core$Maybe$Nothing,
	sections: _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: _user$project$Text_Section_Model$emptyTextSection(0),
			_1: {ctor: '[]'}
		}),
	write_locker: _elm_lang$core$Maybe$Nothing,
	words: _elm_lang$core$Dict$empty
};
var _user$project$Text_Model$Text = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {id: a, title: b, introduction: c, author: d, source: e, difficulty: f, conclusion: g, created_by: h, last_modified_by: i, tags: j, created_dt: k, modified_dt: l, sections: m, write_locker: n, words: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Text_Model$TextListItem = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {id: a, title: b, author: c, difficulty: d, created_by: e, last_modified_by: f, tags: g, created_dt: h, modified_dt: i, last_read_dt: j, text_section_count: k, text_sections_complete: l, questions_correct: m, uri: n, write_locker: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _user$project$Ports$selectAllInputText = _elm_lang$core$Native_Platform.outgoingPort(
	'selectAllInputText',
	function (v) {
		return v;
	});
var _user$project$Ports$clearInputText = _elm_lang$core$Native_Platform.outgoingPort(
	'clearInputText',
	function (v) {
		return v;
	});
var _user$project$Ports$ckEditor = _elm_lang$core$Native_Platform.outgoingPort(
	'ckEditor',
	function (v) {
		return v;
	});
var _user$project$Ports$ckEditorUpdate = _elm_lang$core$Native_Platform.incomingPort(
	'ckEditorUpdate',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return _elm_lang$core$Json_Decode$succeed(
						{ctor: '_Tuple2', _0: x0, _1: x1});
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$ckEditorSetHtml = _elm_lang$core$Native_Platform.outgoingPort(
	'ckEditorSetHtml',
	function (v) {
		return [v._0, v._1];
	});
var _user$project$Ports$addClassToCKEditor = _elm_lang$core$Native_Platform.outgoingPort(
	'addClassToCKEditor',
	function (v) {
		return [v._0, v._1];
	});
var _user$project$Ports$confirm = _elm_lang$core$Native_Platform.outgoingPort(
	'confirm',
	function (v) {
		return v;
	});
var _user$project$Ports$confirmation = _elm_lang$core$Native_Platform.incomingPort('confirmation', _elm_lang$core$Json_Decode$bool);
var _user$project$Ports$redirect = _elm_lang$core$Native_Platform.outgoingPort(
	'redirect',
	function (v) {
		return v;
	});
var _user$project$Ports$scrollTo = _elm_lang$core$Native_Platform.outgoingPort(
	'scrollTo',
	function (v) {
		return v;
	});
var _user$project$Ports$selectedText = _elm_lang$core$Native_Platform.incomingPort(
	'selectedText',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
				_1: {ctor: '[]'}
			}
		}));

var _user$project$Text_Field$post_toggle_source = function (_p0) {
	var _p1 = _p0;
	return _user$project$Ports$selectAllInputText(_p1._0.input_id);
};
var _user$project$Text_Field$post_toggle_author = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3._0;
	return _p4.editable ? _user$project$Ports$selectAllInputText(_p4.input_id) : _elm_lang$core$Platform_Cmd$none;
};
var _user$project$Text_Field$post_toggle_title = function (_p5) {
	var _p6 = _p5;
	return _user$project$Ports$selectAllInputText(_p6._0.input_id);
};
var _user$project$Text_Field$post_toggle_conclusion = function (_p7) {
	var _p8 = _p7;
	var _p9 = _p8._0;
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _user$project$Ports$ckEditor(_p9.input_id),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$addClassToCKEditor(
					{ctor: '_Tuple2', _0: _p9.input_id, _1: 'text_conclusion'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Field$post_toggle_intro = function (_p10) {
	var _p11 = _p10;
	var _p12 = _p11._0;
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _user$project$Ports$ckEditor(_p12.input_id),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$addClassToCKEditor(
					{ctor: '_Tuple2', _0: _p12.input_id, _1: 'text_introduction'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Field$text_conclusion_attrs = function (_p13) {
	var _p14 = _p13;
	return _p14._0;
};
var _user$project$Text_Field$conclusion = function (_p15) {
	var _p16 = _p15;
	return _p16._6;
};
var _user$project$Text_Field$difficulty = function (_p17) {
	var _p18 = _p17;
	return _p18._5;
};
var _user$project$Text_Field$text_source_attrs = function (_p19) {
	var _p20 = _p19;
	return _p20._0;
};
var _user$project$Text_Field$source = function (_p21) {
	var _p22 = _p21;
	return _p22._4;
};
var _user$project$Text_Field$text_author_attrs = function (_p23) {
	var _p24 = _p23;
	return _p24._0;
};
var _user$project$Text_Field$author = function (_p25) {
	var _p26 = _p25;
	return _p26._3;
};
var _user$project$Text_Field$text_tags_attrs = function (_p27) {
	var _p28 = _p27;
	return _p28._0;
};
var _user$project$Text_Field$tags = function (_p29) {
	var _p30 = _p29;
	return _p30._2;
};
var _user$project$Text_Field$text_intro_attrs = function (_p31) {
	var _p32 = _p31;
	return _p32._0;
};
var _user$project$Text_Field$intro = function (_p33) {
	var _p34 = _p33;
	return _p34._1;
};
var _user$project$Text_Field$text_title_attrs = function (_p35) {
	var _p36 = _p35;
	return _p36._0;
};
var _user$project$Text_Field$title = function (_p37) {
	var _p38 = _p37;
	return _p38._0;
};
var _user$project$Text_Field$TextTitle = function (a) {
	return {ctor: 'TextTitle', _0: a};
};
var _user$project$Text_Field$TextIntro = function (a) {
	return {ctor: 'TextIntro', _0: a};
};
var _user$project$Text_Field$TextTags = function (a) {
	return {ctor: 'TextTags', _0: a};
};
var _user$project$Text_Field$TextAuthor = function (a) {
	return {ctor: 'TextAuthor', _0: a};
};
var _user$project$Text_Field$TextSource = function (a) {
	return {ctor: 'TextSource', _0: a};
};
var _user$project$Text_Field$TextDifficulty = function (a) {
	return {ctor: 'TextDifficulty', _0: a};
};
var _user$project$Text_Field$TextConclusion = function (a) {
	return {ctor: 'TextConclusion', _0: a};
};
var _user$project$Text_Field$TextFields = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'TextFields', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Text_Field$set_title = F2(
	function (_p39, field_attrs) {
		var _p40 = _p39;
		return A7(
			_user$project$Text_Field$TextFields,
			_user$project$Text_Field$TextTitle(field_attrs),
			_p40._1,
			_p40._2,
			_p40._3,
			_p40._4,
			_p40._5,
			_p40._6);
	});
var _user$project$Text_Field$set_intro = F2(
	function (_p41, field_attrs) {
		var _p42 = _p41;
		return A7(
			_user$project$Text_Field$TextFields,
			_p42._0,
			_user$project$Text_Field$TextIntro(field_attrs),
			_p42._2,
			_p42._3,
			_p42._4,
			_p42._5,
			_p42._6);
	});
var _user$project$Text_Field$set_tags = F2(
	function (_p43, field_attrs) {
		var _p44 = _p43;
		return A7(
			_user$project$Text_Field$TextFields,
			_p44._0,
			_p44._1,
			_user$project$Text_Field$TextTags(field_attrs),
			_p44._3,
			_p44._4,
			_p44._5,
			_p44._6);
	});
var _user$project$Text_Field$set_author = F2(
	function (_p45, field_attrs) {
		var _p46 = _p45;
		return A7(
			_user$project$Text_Field$TextFields,
			_p46._0,
			_p46._1,
			_p46._2,
			_user$project$Text_Field$TextAuthor(field_attrs),
			_p46._4,
			_p46._5,
			_p46._6);
	});
var _user$project$Text_Field$set_source = F2(
	function (_p47, field_attrs) {
		var _p48 = _p47;
		return A7(
			_user$project$Text_Field$TextFields,
			_p48._0,
			_p48._1,
			_p48._2,
			_p48._3,
			_user$project$Text_Field$TextSource(field_attrs),
			_p48._5,
			_p48._6);
	});
var _user$project$Text_Field$set_difficulty = F2(
	function (_p49, field_attrs) {
		var _p50 = _p49;
		return A7(
			_user$project$Text_Field$TextFields,
			_p50._0,
			_p50._1,
			_p50._2,
			_p50._3,
			_p50._4,
			_user$project$Text_Field$TextDifficulty(field_attrs),
			_p50._6);
	});
var _user$project$Text_Field$set_conclusion = F2(
	function (_p51, field_attrs) {
		var _p52 = _p51;
		return A7(
			_user$project$Text_Field$TextFields,
			_p52._0,
			_p52._1,
			_p52._2,
			_p52._3,
			_p52._4,
			_p52._5,
			_user$project$Text_Field$TextConclusion(field_attrs));
	});
var _user$project$Text_Field$update_error = F2(
	function (_p54, _p53) {
		var _p55 = _p54;
		var _p60 = _p55._1;
		var _p56 = _p53;
		var _p59 = _p56;
		var error_key = A2(_elm_lang$core$String$split, '_', _p55._0);
		var _p57 = error_key;
		if ((((_p57.ctor === '::') && (_p57._0 === 'text')) && (_p57._1.ctor === '::')) && (_p57._1._1.ctor === '[]')) {
			var _p58 = _p57._1._0;
			switch (_p58) {
				case 'introduction':
					return A2(
						_user$project$Text_Field$set_intro,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._1._0,
							{error_string: _p60, error: true}));
				case 'conclusion':
					return A2(
						_user$project$Text_Field$set_conclusion,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._6._0,
							{error_string: _p60, error: true}));
				case 'title':
					return A2(
						_user$project$Text_Field$set_title,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._0._0,
							{error_string: _p60, error: true}));
				case 'author':
					return A2(
						_user$project$Text_Field$set_author,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._3._0,
							{error_string: _p60, error: true}));
				case 'source':
					return A2(
						_user$project$Text_Field$set_source,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._4._0,
							{error_string: _p60, error: true}));
				case 'tags':
					return A2(
						_user$project$Text_Field$set_tags,
						_p59,
						_elm_lang$core$Native_Utils.update(
							_p56._2._0,
							{error_string: _p60, error: true}));
				default:
					return _p59;
			}
		} else {
			return _p59;
		}
	});
var _user$project$Text_Field$init_text_fields = A7(
	_user$project$Text_Field$TextFields,
	_user$project$Text_Field$TextTitle(
		{id: 'text_title', input_id: 'text_title_input', editable: false, error_string: '', error: false, name: 'title', index: 0}),
	_user$project$Text_Field$TextIntro(
		{id: 'text_introduction', input_id: 'text_introduction_input', editable: false, error_string: '', error: false, name: 'introduction', index: 2}),
	_user$project$Text_Field$TextTags(
		{id: 'text_tags', input_id: 'text_tags_input', editable: false, error_string: '', error: false, name: 'tags', index: 1}),
	_user$project$Text_Field$TextAuthor(
		{id: 'text_author', input_id: 'text_author_input', editable: false, error_string: '', error: false, name: 'author', index: 3}),
	_user$project$Text_Field$TextSource(
		{id: 'text_source', input_id: 'text_source_input', editable: false, error_string: '', error: false, name: 'source', index: 4}),
	_user$project$Text_Field$TextDifficulty(
		{id: 'text_difficulty', input_id: 'text_difficulty_input', editable: false, error_string: '', error: false, name: 'difficulty', index: 5}),
	_user$project$Text_Field$TextConclusion(
		{id: 'text_conclusion', input_id: 'text_conclusion_input', editable: false, error_string: '', error: false, name: 'conclusion', index: 6}));

var _user$project$Text_Section_Component$question_fields = function (_p0) {
	var _p1 = _p0;
	return _p1._3;
};
var _user$project$Text_Section_Component$get_field = F2(
	function (_p2, field_name) {
		var _p3 = _p2;
		var _p4 = field_name;
		if (_p4 === 'body') {
			return _elm_lang$core$Maybe$Just(_p3._2.body);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Section_Component$update_field_error = F2(
	function (text_field, error_string) {
		return _elm_lang$core$Native_Utils.update(
			text_field,
			{error: true, error_string: error_string});
	});
var _user$project$Text_Section_Component$attributes = function (_p5) {
	var _p6 = _p5;
	return _p6._1;
};
var _user$project$Text_Section_Component$index = function (text_section) {
	var attrs = _user$project$Text_Section_Component$attributes(text_section);
	return attrs.index;
};
var _user$project$Text_Section_Component$text_section = function (_p7) {
	var _p8 = _p7;
	return _p8._0;
};
var _user$project$Text_Section_Component$toTextSection = function (text_section_component) {
	var questions = _user$project$Question_Field$toQuestions(
		_user$project$Text_Section_Component$question_fields(text_section_component));
	var new_text_section = _user$project$Text_Section_Component$text_section(text_section_component);
	return _elm_lang$core$Native_Utils.update(
		new_text_section,
		{questions: questions});
};
var _user$project$Text_Section_Component$body = function (_p9) {
	var _p10 = _p9;
	return _p10._2.body;
};
var _user$project$Text_Section_Component$body_id = function (text_section_component) {
	var body_field = _user$project$Text_Section_Component$body(text_section_component);
	return body_field.id;
};
var _user$project$Text_Section_Component$post_toggle_commands = function (text_field) {
	var _p11 = text_field.name;
	if (_p11 === 'body') {
		return {
			ctor: '::',
			_0: _user$project$Ports$ckEditor(text_field.id),
			_1: {ctor: '[]'}
		};
	} else {
		return {
			ctor: '::',
			_0: _elm_lang$core$Platform_Cmd$none,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Text_Section_Component$editable = function (text_field) {
	return text_field.editable;
};
var _user$project$Text_Section_Component$text_field_id = function (text_field) {
	return text_field.id;
};
var _user$project$Text_Section_Component$switch_editable = function (text_field) {
	var $switch = function (field) {
		return _elm_lang$core$Native_Utils.update(
			field,
			{
				editable: field.editable ? false : true
			});
	};
	return $switch(text_field);
};
var _user$project$Text_Section_Component$reinitialize_ck_editor = function (text_section_component) {
	var body_field = _user$project$Text_Section_Component$body(text_section_component);
	var t = _user$project$Text_Section_Component$text_section(text_section_component);
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _user$project$Ports$ckEditor(body_field.id),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$ckEditorSetHtml(
					{ctor: '_Tuple2', _0: body_field.id, _1: t.body}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Section_Component$generate_text_section_field_id = F2(
	function (i, attr) {
		return A2(
			_elm_lang$core$String$join,
			'_',
			{
				ctor: '::',
				_0: 'textsection',
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(i),
					_1: {
						ctor: '::',
						_0: attr,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Text_Section_Component$generate_text_section_field_params = F2(
	function (i, attr) {
		return {
			id: A2(_user$project$Text_Section_Component$generate_text_section_field_id, i, attr),
			input_id: A2(
				_elm_lang$core$String$join,
				'_',
				{
					ctor: '::',
					_0: A2(_user$project$Text_Section_Component$generate_text_section_field_id, i, attr),
					_1: {
						ctor: '::',
						_0: 'input',
						_1: {ctor: '[]'}
					}
				}),
			editable: false,
			error_string: '',
			error: false,
			name: attr,
			index: i
		};
	});
var _user$project$Text_Section_Component$generate_text_section_fields = function (i) {
	return {
		body: A2(_user$project$Text_Section_Component$generate_text_section_field_params, i, 'body')
	};
};
var _user$project$Text_Section_Component$TextSectionFields = function (a) {
	return {body: a};
};
var _user$project$Text_Section_Component$TextSectionComponentAttributes = function (a) {
	return {index: a};
};
var _user$project$Text_Section_Component$TextSectionComponent = F4(
	function (a, b, c, d) {
		return {ctor: 'TextSectionComponent', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Text_Section_Component$fromTextSection = F2(
	function (i, text) {
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			text,
			{index: i},
			_user$project$Text_Section_Component$generate_text_section_fields(i),
			A2(_user$project$Question_Field$fromQuestions, i, text.questions));
	});
var _user$project$Text_Section_Component$emptyTextSectionComponent = function (i) {
	return A4(
		_user$project$Text_Section_Component$TextSectionComponent,
		_user$project$Text_Section_Model$emptyTextSection(i),
		{index: i},
		_user$project$Text_Section_Component$generate_text_section_fields(i),
		_user$project$Question_Field$initial_question_fields(i));
};
var _user$project$Text_Section_Component$update_body = F2(
	function (_p12, body) {
		var _p13 = _p12;
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_elm_lang$core$Native_Utils.update(
				_p13._0,
				{body: body}),
			_p13._1,
			_p13._2,
			_p13._3);
	});
var _user$project$Text_Section_Component$set_index = F2(
	function (_p14, index) {
		var _p15 = _p14;
		var _p16 = _p15._2;
		var body_field = _p16.body;
		var new_body_field = _elm_lang$core$Native_Utils.update(
			body_field,
			{
				id: A2(_user$project$Text_Section_Component$generate_text_section_field_id, index, 'body')
			});
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_elm_lang$core$Native_Utils.update(
				_p15._0,
				{order: index}),
			_elm_lang$core$Native_Utils.update(
				_p15._1,
				{index: index}),
			_elm_lang$core$Native_Utils.update(
				_p16,
				{body: new_body_field}),
			_p15._3);
	});
var _user$project$Text_Section_Component$set_question = F2(
	function (_p17, question_field) {
		var _p18 = _p17;
		var question_index = _user$project$Question_Field$index(question_field);
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_p18._0,
			_p18._1,
			_p18._2,
			A3(_elm_lang$core$Array$set, question_index, question_field, _p18._3));
	});
var _user$project$Text_Section_Component$set_answer_correct = F2(
	function (text_section, answer_field) {
		var _p19 = A2(
			_user$project$Question_Field$question_field_for_answer,
			_user$project$Text_Section_Component$question_fields(text_section),
			answer_field);
		if (_p19.ctor === 'Just') {
			return A2(
				_user$project$Text_Section_Component$set_question,
				text_section,
				A2(_user$project$Question_Field$set_answer_correct, _p19._0, answer_field));
		} else {
			return text_section;
		}
	});
var _user$project$Text_Section_Component$set_answer_feedback = F3(
	function (text_section, answer_field, feedback) {
		var _p20 = A2(
			_user$project$Question_Field$question_field_for_answer,
			_user$project$Text_Section_Component$question_fields(text_section),
			answer_field);
		if (_p20.ctor === 'Just') {
			return A2(
				_user$project$Text_Section_Component$set_question,
				text_section,
				A3(_user$project$Question_Field$set_answer_feedback, _p20._0, answer_field, feedback));
		} else {
			return text_section;
		}
	});
var _user$project$Text_Section_Component$toggle_question_menu = F2(
	function (text_section, question_field) {
		var visible = _user$project$Question_Field$menu_visible(question_field) ? false : true;
		return A2(
			_user$project$Text_Section_Component$set_question,
			text_section,
			A2(_user$project$Question_Field$set_menu_visible, question_field, visible));
	});
var _user$project$Text_Section_Component$set_answer = F2(
	function (_p21, answer_field) {
		var _p22 = _p21;
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_p22._0,
			_p22._1,
			_p22._2,
			A2(_user$project$Question_Field$set_answer_field, _p22._3, answer_field));
	});
var _user$project$Text_Section_Component$set_answer_text = F3(
	function (text_section, answer_field, answer_text) {
		return A2(
			_user$project$Text_Section_Component$set_answer,
			text_section,
			A2(_user$project$Answer_Field$set_answer_text, answer_field, answer_text));
	});
var _user$project$Text_Section_Component$set_field_value = F3(
	function (_p23, field_name, value) {
		var _p24 = _p23;
		var _p29 = _p24._0;
		var _p28 = _p24._3;
		var _p27 = _p24._2;
		var _p26 = _p24._1;
		var _p25 = field_name;
		if (_p25 === 'body') {
			return A4(
				_user$project$Text_Section_Component$TextSectionComponent,
				_elm_lang$core$Native_Utils.update(
					_p29,
					{body: value}),
				_p26,
				_p27,
				_p28);
		} else {
			return A4(_user$project$Text_Section_Component$TextSectionComponent, _p29, _p26, _p27, _p28);
		}
	});
var _user$project$Text_Section_Component$set_field = F2(
	function (_p30, new_text_field) {
		var _p31 = _p30;
		var _p32 = new_text_field.name;
		if (_p32 === 'body') {
			return A4(
				_user$project$Text_Section_Component$TextSectionComponent,
				_p31._0,
				_p31._1,
				_elm_lang$core$Native_Utils.update(
					_p31._2,
					{body: new_text_field}),
				_p31._3);
		} else {
			return _p31;
		}
	});
var _user$project$Text_Section_Component$update_errors = F2(
	function (_p34, _p33) {
		var _p35 = _p34;
		var _p42 = _p35;
		var _p36 = _p33;
		var _p41 = _p36._0;
		var _p40 = _p36._1;
		var error_key = A2(_elm_lang$core$String$split, '_', _p41);
		var first_key = _elm_lang$core$List$head(error_key);
		var _p37 = first_key;
		if (_p37.ctor === 'Just') {
			var _p39 = _p37._0;
			if (A2(
				_elm_lang$core$List$member,
				_p39,
				{
					ctor: '::',
					_0: 'body',
					_1: {ctor: '[]'}
				})) {
				var _p38 = A2(_user$project$Text_Section_Component$get_field, _p42, _p39);
				if (_p38.ctor === 'Just') {
					return A2(
						_user$project$Text_Section_Component$set_field,
						_p42,
						A2(_user$project$Text_Section_Component$update_field_error, _p38._0, _p40));
				} else {
					return _p42;
				}
			} else {
				return A4(
					_user$project$Text_Section_Component$TextSectionComponent,
					_p35._0,
					_p35._1,
					_p35._2,
					A2(
						_user$project$Question_Field$update_errors,
						_p35._3,
						{ctor: '_Tuple2', _0: _p41, _1: _p40}));
			}
		} else {
			return _p42;
		}
	});
var _user$project$Text_Section_Component$update_question_field = F2(
	function (_p43, question_field) {
		var _p44 = _p43;
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_p44._0,
			_p44._1,
			_p44._2,
			A2(_user$project$Question_Field$update_question_field, question_field, _p44._3));
	});
var _user$project$Text_Section_Component$add_answer = F2(
	function (text_section_component, answer_field) {
		var question_index = _user$project$Answer_Field$question_index(answer_field);
		var question_field = A2(
			_elm_lang$core$Array$get,
			question_index,
			_user$project$Text_Section_Component$question_fields(text_section_component));
		var text_section_index = _user$project$Text_Section_Component$index(text_section_component);
		var _p45 = question_field;
		if (_p45.ctor === 'Just') {
			var new_answer = _user$project$Answer_Model$generate_answer(
				_user$project$Answer_Field$index(answer_field) + 1);
			var new_answer_field = A4(_user$project$Answer_Field$generate_answer_field, text_section_index, question_index, new_answer.order, new_answer);
			return A2(
				_user$project$Text_Section_Component$update_question_field,
				text_section_component,
				A3(_user$project$Question_Field$add_answer_field, _p45._0, answer_field, new_answer_field));
		} else {
			return text_section_component;
		}
	});
var _user$project$Text_Section_Component$delete_answer = F2(
	function (text_section_component, answer_field) {
		var question_field = A2(
			_elm_lang$core$Array$get,
			_user$project$Answer_Field$question_index(answer_field),
			_user$project$Text_Section_Component$question_fields(text_section_component));
		var _p46 = question_field;
		if (_p46.ctor === 'Just') {
			return A2(
				_user$project$Text_Section_Component$update_question_field,
				text_section_component,
				A2(_user$project$Question_Field$delete_answer_field, _p46._0, answer_field));
		} else {
			return text_section_component;
		}
	});
var _user$project$Text_Section_Component$delete_question_field = F2(
	function (_p47, question_field) {
		var _p48 = _p47;
		return A4(
			_user$project$Text_Section_Component$TextSectionComponent,
			_p48._0,
			_p48._1,
			_p48._2,
			A2(_user$project$Question_Field$delete_question_field, question_field, _p48._3));
	});
var _user$project$Text_Section_Component$delete_selected_question_fields = function (_p49) {
	var _p50 = _p49;
	return A4(
		_user$project$Text_Section_Component$TextSectionComponent,
		_p50._0,
		_p50._1,
		_p50._2,
		_user$project$Question_Field$delete_selected(_p50._3));
};
var _user$project$Text_Section_Component$add_new_question = function (_p51) {
	var _p52 = _p51;
	var _p53 = _p52._1;
	return A4(
		_user$project$Text_Section_Component$TextSectionComponent,
		_p52._0,
		_p53,
		_p52._2,
		A2(_user$project$Question_Field$add_new_question, _p53.index, _p52._3));
};

var _user$project$Text_Section_Component_Group$text_section_component = F2(
	function (_p0, index) {
		var _p1 = _p0;
		return A2(_elm_lang$core$Array$get, index, _p1._0);
	});
var _user$project$Text_Section_Component_Group$toArray = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Text_Section_Component_Group$toTextSections = function (text_components) {
	return A2(
		_elm_lang$core$Array$map,
		_user$project$Text_Section_Component$toTextSection,
		_user$project$Text_Section_Component_Group$toArray(text_components));
};
var _user$project$Text_Section_Component_Group$reinitialize_ck_editors = function (text_component_group) {
	var text_components = _user$project$Text_Section_Component_Group$toArray(text_component_group);
	return _elm_lang$core$Platform_Cmd$batch(
		_elm_lang$core$Array$toList(
			A2(_elm_lang$core$Array$map, _user$project$Text_Section_Component$reinitialize_ck_editor, text_components)));
};
var _user$project$Text_Section_Component_Group$update_error = F2(
	function (_p4, text_section_components) {
		var _p5 = _p4;
		var error_key = A2(_elm_lang$core$String$split, '_', _p5._0);
		var _p6 = error_key;
		if (((_p6.ctor === '::') && (_p6._0 === 'textsection')) && (_p6._1.ctor === '::')) {
			var _p7 = _elm_lang$core$String$toInt(_p6._1._0);
			if (_p7.ctor === 'Ok') {
				var _p9 = _p7._0;
				var _p8 = A2(_elm_lang$core$Array$get, _p9, text_section_components);
				if (_p8.ctor === 'Just') {
					var text_component_error = A2(
						_elm_lang$core$String$join,
						'_',
						A2(_elm_lang$core$List$drop, 2, error_key));
					var new_text_component_with_errors = A2(
						_user$project$Text_Section_Component$update_errors,
						_p8._0,
						{ctor: '_Tuple2', _0: text_component_error, _1: _p5._1});
					return A3(_elm_lang$core$Array$set, _p9, new_text_component_with_errors, text_section_components);
				} else {
					return text_section_components;
				}
			} else {
				return text_section_components;
			}
		} else {
			return text_section_components;
		}
	});
var _user$project$Text_Section_Component_Group$TextSectionComponentGroup = function (a) {
	return {ctor: 'TextSectionComponentGroup', _0: a};
};
var _user$project$Text_Section_Component_Group$new_group = _user$project$Text_Section_Component_Group$TextSectionComponentGroup(
	_elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: _user$project$Text_Section_Component$emptyTextSectionComponent(0),
			_1: {ctor: '[]'}
		}));
var _user$project$Text_Section_Component_Group$update_errors = F2(
	function (_p10, errors) {
		var _p11 = _p10;
		return _user$project$Text_Section_Component_Group$TextSectionComponentGroup(
			A3(
				_elm_lang$core$Array$foldr,
				_user$project$Text_Section_Component_Group$update_error,
				_user$project$Text_Section_Component_Group$toArray(_p11),
				_elm_lang$core$Array$fromList(
					_elm_lang$core$Dict$toList(errors))));
	});
var _user$project$Text_Section_Component_Group$update_components = F2(
	function (_p12, text_component) {
		var _p13 = _p12;
		return _user$project$Text_Section_Component_Group$TextSectionComponentGroup(
			A3(
				_elm_lang$core$Array$set,
				_user$project$Text_Section_Component$index(text_component),
				text_component,
				_p13._0));
	});
var _user$project$Text_Section_Component_Group$update_body_for_section_index = F3(
	function (text_sections, index, ckeditor_text) {
		var _p14 = A2(_user$project$Text_Section_Component_Group$text_section_component, text_sections, index);
		if (_p14.ctor === 'Just') {
			return A2(
				_user$project$Text_Section_Component_Group$update_components,
				text_sections,
				A2(_user$project$Text_Section_Component$update_body, _p14._0, ckeditor_text));
		} else {
			return text_sections;
		}
	});
var _user$project$Text_Section_Component_Group$add_new_text_section = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16._0;
	var arr_len = _elm_lang$core$Array$length(_p17);
	var new_component = _user$project$Text_Section_Component$emptyTextSectionComponent(arr_len);
	var new_sections = A2(_elm_lang$core$Array$push, new_component, _p17);
	return _user$project$Text_Section_Component_Group$TextSectionComponentGroup(new_sections);
};
var _user$project$Text_Section_Component_Group$delete_text_section = F2(
	function (_p18, text_section_component) {
		var _p19 = _p18;
		var index = _user$project$Text_Section_Component$index;
		var component_index = index(text_section_component);
		var new_sections = A2(
			_elm_lang$core$Array$indexedMap,
			F2(
				function (i, text_component) {
					return A2(_user$project$Text_Section_Component$set_index, text_component, i);
				}),
			A2(
				_elm_lang$core$Array$filter,
				function (text_component) {
					return !_elm_lang$core$Native_Utils.eq(
						index(text_component),
						component_index);
				},
				_p19._0));
		return _user$project$Text_Section_Component_Group$TextSectionComponentGroup(new_sections);
	});
var _user$project$Text_Section_Component_Group$fromTextSections = function (text_sections) {
	return _user$project$Text_Section_Component_Group$TextSectionComponentGroup(
		A2(_elm_lang$core$Array$indexedMap, _user$project$Text_Section_Component$fromTextSection, text_sections));
};

var _user$project$Text_Component$post_toggle_source = function (_p0) {
	var _p1 = _p0;
	return _user$project$Text_Field$post_toggle_source(
		_user$project$Text_Field$source(_p1._1));
};
var _user$project$Text_Component$post_toggle_author = function (_p2) {
	var _p3 = _p2;
	return _user$project$Text_Field$post_toggle_author(
		_user$project$Text_Field$author(_p3._1));
};
var _user$project$Text_Component$post_toggle_title = function (_p4) {
	var _p5 = _p4;
	return _user$project$Text_Field$post_toggle_title(
		_user$project$Text_Field$title(_p5._1));
};
var _user$project$Text_Component$tags = function (_p6) {
	var _p7 = _p6;
	return _p7._2;
};
var _user$project$Text_Component$tags_to_dict = function (tags) {
	var _p8 = tags;
	if (_p8.ctor === 'Just') {
		return _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$List$map,
				function (tag) {
					return {ctor: '_Tuple2', _0: tag, _1: tag};
				},
				_p8._0));
	} else {
		return _elm_lang$core$Dict$fromList(
			{ctor: '[]'});
	}
};
var _user$project$Text_Component$text_section_components = function (_p9) {
	var _p10 = _p9;
	return _p10._3;
};
var _user$project$Text_Component$set_text_fields = F2(
	function (text_component, text_fields) {
		return text_component;
	});
var _user$project$Text_Component$text_fields = function (_p11) {
	var _p12 = _p11;
	return _p12._1;
};
var _user$project$Text_Component$initialize_text_field_ck_editors = function (text_component) {
	var text_conclusion_field = _user$project$Text_Field$conclusion(
		_user$project$Text_Component$text_fields(text_component));
	var conclusion_field_id = _user$project$Text_Field$text_conclusion_attrs(text_conclusion_field).input_id;
	var text_intro_field = _user$project$Text_Field$intro(
		_user$project$Text_Component$text_fields(text_component));
	var intro_field_id = _user$project$Text_Field$text_intro_attrs(text_intro_field).input_id;
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _user$project$Ports$ckEditor(intro_field_id),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$ckEditor(conclusion_field_id),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Component$reinitialize_ck_editors = function (text_component) {
	var text_component_group = _user$project$Text_Component$text_section_components(text_component);
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _user$project$Text_Component$initialize_text_field_ck_editors(text_component),
			_1: {
				ctor: '::',
				_0: _user$project$Text_Section_Component_Group$reinitialize_ck_editors(text_component_group),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Component$text = function (_p13) {
	var _p14 = _p13;
	return A2(
		_user$project$Text_Model$set_tags,
		A2(
			_user$project$Text_Model$set_sections,
			_p14._0,
			_user$project$Text_Section_Component_Group$toTextSections(_p14._3)),
		_elm_lang$core$Maybe$Just(
			_elm_lang$core$Dict$keys(_p14._2)));
};
var _user$project$Text_Component$TextComponent = F4(
	function (a, b, c, d) {
		return {ctor: 'TextComponent', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Text_Component$init = function (text) {
	return A4(
		_user$project$Text_Component$TextComponent,
		text,
		_user$project$Text_Field$init_text_fields,
		_user$project$Text_Component$tags_to_dict(text.tags),
		_user$project$Text_Section_Component_Group$fromTextSections(text.sections));
};
var _user$project$Text_Component$set_intro_editable = F2(
	function (_p15, editable) {
		var _p16 = _p15;
		var _p18 = _p16._1;
		var _p17 = _user$project$Text_Field$intro(_p18);
		var intro_field_attrs = _p17._0;
		var new_text_fields = A2(
			_user$project$Text_Field$set_intro,
			_p18,
			_elm_lang$core$Native_Utils.update(
				intro_field_attrs,
				{error: false, editable: editable}));
		return A4(_user$project$Text_Component$TextComponent, _p16._0, new_text_fields, _p16._2, _p16._3);
	});
var _user$project$Text_Component$set_conclusion_editable = F2(
	function (_p19, editable) {
		var _p20 = _p19;
		var _p22 = _p20._1;
		var _p21 = _user$project$Text_Field$conclusion(_p22);
		var conclusion_field_attrs = _p21._0;
		var new_text_fields = A2(
			_user$project$Text_Field$set_conclusion,
			_p22,
			_elm_lang$core$Native_Utils.update(
				conclusion_field_attrs,
				{error: false, editable: editable}));
		return A4(_user$project$Text_Component$TextComponent, _p20._0, new_text_fields, _p20._2, _p20._3);
	});
var _user$project$Text_Component$set_title_editable = F2(
	function (_p23, editable) {
		var _p24 = _p23;
		var _p26 = _p24._1;
		var _p25 = _user$project$Text_Field$title(_p26);
		var title_field_attrs = _p25._0;
		var new_text_fields = A2(
			_user$project$Text_Field$set_title,
			_p26,
			_elm_lang$core$Native_Utils.update(
				title_field_attrs,
				{error: false, editable: editable}));
		return A4(_user$project$Text_Component$TextComponent, _p24._0, new_text_fields, _p24._2, _p24._3);
	});
var _user$project$Text_Component$set_author_editable = F2(
	function (_p27, editable) {
		var _p28 = _p27;
		var _p30 = _p28._1;
		var _p29 = _user$project$Text_Field$author(_p30);
		var text_author_attrs = _p29._0;
		var new_text_fields = A2(
			_user$project$Text_Field$set_author,
			_p30,
			_elm_lang$core$Native_Utils.update(
				text_author_attrs,
				{error: false, editable: editable}));
		return A4(_user$project$Text_Component$TextComponent, _p28._0, new_text_fields, _p28._2, _p28._3);
	});
var _user$project$Text_Component$set_source_editable = F2(
	function (_p31, editable) {
		var _p32 = _p31;
		var _p34 = _p32._1;
		var _p33 = _user$project$Text_Field$source(_p34);
		var text_source_attrs = _p33._0;
		var new_text_fields = A2(
			_user$project$Text_Field$set_source,
			_p34,
			_elm_lang$core$Native_Utils.update(
				text_source_attrs,
				{error: false, editable: editable}));
		return A4(_user$project$Text_Component$TextComponent, _p32._0, new_text_fields, _p32._2, _p32._3);
	});
var _user$project$Text_Component$set_text_section_components = F2(
	function (_p35, new_components) {
		var _p36 = _p35;
		return A4(_user$project$Text_Component$TextComponent, _p36._0, _p36._1, _p36._2, new_components);
	});
var _user$project$Text_Component$set_text_attribute = F3(
	function (_p37, attr_name, value) {
		var _p38 = _p37;
		var _p43 = _p38._2;
		var _p42 = _p38._0;
		var _p41 = _p38._1;
		var _p40 = _p38._3;
		var _p39 = attr_name;
		switch (_p39) {
			case 'title':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{title: value}),
					_p41,
					_p43,
					_p40);
			case 'introduction':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{introduction: value}),
					_p41,
					_p43,
					_p40);
			case 'author':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{author: value}),
					_p41,
					_p43,
					_p40);
			case 'source':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{source: value}),
					_p41,
					_p43,
					_p40);
			case 'difficulty':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{difficulty: value}),
					_p41,
					_p43,
					_p40);
			case 'conclusion':
				return A4(
					_user$project$Text_Component$TextComponent,
					_elm_lang$core$Native_Utils.update(
						_p42,
						{
							conclusion: _elm_lang$core$Maybe$Just(value)
						}),
					_p41,
					_p43,
					_p40);
			default:
				return _p38;
		}
	});
var _user$project$Text_Component$emptyTextComponent = A4(
	_user$project$Text_Component$TextComponent,
	_user$project$Text_Model$new_text,
	_user$project$Text_Field$init_text_fields,
	_elm_lang$core$Dict$fromList(
		{ctor: '[]'}),
	_user$project$Text_Section_Component_Group$new_group);
var _user$project$Text_Component$update_text_errors = F2(
	function (_p44, errors) {
		var _p45 = _p44;
		var new_text_component = A4(
			_user$project$Text_Component$TextComponent,
			_p45._0,
			A3(
				_elm_lang$core$Array$foldr,
				_user$project$Text_Field$update_error,
				_p45._1,
				_elm_lang$core$Array$fromList(
					_elm_lang$core$Dict$toList(errors))),
			_p45._2,
			_p45._3);
		var text_sections = A2(
			_user$project$Text_Section_Component_Group$update_errors,
			_user$project$Text_Component$text_section_components(new_text_component),
			errors);
		var _p46 = A2(_elm_lang$core$Debug$log, 'text errors', errors);
		return A2(_user$project$Text_Component$set_text_section_components, new_text_component, text_sections);
	});
var _user$project$Text_Component$add_tag = F2(
	function (_p47, tag) {
		var _p48 = _p47;
		var _p49 = _p48._1;
		var text_tag_field = _user$project$Text_Field$tags(_p49);
		var text_tag_field_attrs = _user$project$Text_Field$text_tags_attrs(text_tag_field);
		var new_text_tag_field_attrs = _elm_lang$core$Native_Utils.update(
			text_tag_field_attrs,
			{error: false, error_string: ''});
		var new_text_component_fields = A2(_user$project$Text_Field$set_tags, _p49, new_text_tag_field_attrs);
		return A4(
			_user$project$Text_Component$TextComponent,
			_p48._0,
			new_text_component_fields,
			A3(_elm_lang$core$Dict$insert, tag, tag, _p48._2),
			_p48._3);
	});
var _user$project$Text_Component$remove_tag = F2(
	function (_p50, tag) {
		var _p51 = _p50;
		return A4(
			_user$project$Text_Component$TextComponent,
			_p51._0,
			_p51._1,
			A2(_elm_lang$core$Dict$remove, tag, _p51._2),
			_p51._3);
	});

var _user$project$Text_Update$post_toggle_field = function (field) {
	var _p0 = function () {
		var _p1 = field;
		switch (_p1.ctor) {
			case 'Text':
				var _p2 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Text_Section_Component$editable(_p2),
					_1: _user$project$Text_Section_Component$text_field_id(_p2)
				};
			case 'Question':
				var _p3 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Question_Field$editable(_p3),
					_1: _user$project$Question_Field$id(_p3)
				};
			default:
				var _p4 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _user$project$Answer_Field$editable(_p4),
					_1: _user$project$Answer_Field$id(_p4)
				};
		}
	}();
	var field_editable = _p0._0;
	var field_id = _p0._1;
	return (!field_editable) ? _user$project$Ports$selectAllInputText(field_id) : _elm_lang$core$Platform_Cmd$none;
};
var _user$project$Text_Update$update = F2(
	function (msg, model) {
		var text_section_group = _user$project$Text_Component$text_section_components(model.text_component);
		var update = function (_p5) {
			return A2(
				_user$project$Text_Component$set_text_section_components,
				model.text_component,
				A2(_user$project$Text_Section_Component_Group$update_components, text_section_group, _p5));
		};
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'AddTextSection':
				var new_group = _user$project$Text_Section_Component_Group$add_new_text_section(text_section_group);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A2(_user$project$Text_Component$set_text_section_components, model.text_component, new_group)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteTextSection':
				var _p7 = _p6._0;
				var new_group = A2(_user$project$Text_Section_Component_Group$delete_text_section, text_section_group, _p7);
				var text_section_body_id = _user$project$Text_Section_Component$body_id(_p7);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A2(_user$project$Text_Component$set_text_section_components, model.text_component, new_group)
						}),
					_1: _user$project$Text_Section_Component_Group$reinitialize_ck_editors(new_group)
				};
			case 'UpdateTextValue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A3(_user$project$Text_Section_Component$set_field_value, _p6._0, _p6._1, _p6._2))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateTextBody':
				var _p8 = A2(_elm_lang$core$String$split, '_', _p6._0._0);
				if ((((((_p8.ctor === '::') && (_p8._0 === 'textsection')) && (_p8._1.ctor === '::')) && (_p8._1._1.ctor === '::')) && (_p8._1._1._0 === 'body')) && (_p8._1._1._1.ctor === '[]')) {
					var _p9 = _elm_lang$core$String$toInt(_p8._1._0);
					if (_p9.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									text_component: A2(
										_user$project$Text_Component$set_text_section_components,
										model.text_component,
										A3(_user$project$Text_Section_Component_Group$update_body_for_section_index, text_section_group, _p9._0, _p6._0._1))
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'AddQuestion':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								_user$project$Text_Section_Component$add_new_question(_p6._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateQuestionField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$update_question_field, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateQuestionFieldValue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(
									_user$project$Text_Section_Component$update_question_field,
									_p6._0,
									A2(_user$project$Question_Field$set_question_body, _p6._1, _p6._2)))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteQuestion':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$delete_question_field, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectQuestion':
				var new_question_field = A2(_user$project$Question_Field$set_selected, _p6._1, _p6._2);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$update_question_field, _p6._0, new_question_field))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteSelectedQuestions':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								_user$project$Text_Section_Component$delete_selected_question_fields(_p6._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleQuestionMenu':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$toggle_question_menu, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateAnswerField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$set_answer, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateAnswerFieldValue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A3(_user$project$Text_Section_Component$set_answer_text, _p6._0, _p6._1, _p6._2))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateAnswerFeedbackValue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A3(_user$project$Text_Section_Component$set_answer_feedback, _p6._0, _p6._1, _p6._2))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateAnswerFieldCorrect':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$set_answer_correct, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AddAnswer':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$add_answer, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteAnswer':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(
								A2(_user$project$Text_Section_Component$delete_answer, _p6._0, _p6._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p13 = _p6._0;
				var _p12 = _p6._1;
				var new_text_component = function () {
					var _p10 = _p12;
					switch (_p10.ctor) {
						case 'Text':
							return A2(
								_user$project$Text_Section_Component$set_field,
								_p13,
								_user$project$Text_Section_Component$switch_editable(_p10._0));
						case 'Question':
							return A2(
								_user$project$Text_Section_Component$set_question,
								_p13,
								_user$project$Question_Field$switch_editable(_p10._0));
						default:
							return A2(
								_user$project$Text_Section_Component$set_answer,
								_p13,
								_user$project$Answer_Field$switch_editable(_p10._0));
					}
				}();
				var extra_cmds = function () {
					var _p11 = _p12;
					if (_p11.ctor === 'Text') {
						return _user$project$Text_Section_Component$post_toggle_commands(_p11._0);
					} else {
						return {
							ctor: '::',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						};
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: update(new_text_component)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						A2(
							_elm_lang$core$Basics_ops['++'],
							extra_cmds,
							{
								ctor: '::',
								_0: _user$project$Text_Update$post_toggle_field(_p12),
								_1: {ctor: '[]'}
							}))
				};
		}
	});
var _user$project$Text_Update$Answer = function (a) {
	return {ctor: 'Answer', _0: a};
};
var _user$project$Text_Update$Question = function (a) {
	return {ctor: 'Question', _0: a};
};
var _user$project$Text_Update$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _user$project$Text_Update$ToggleEditable = F2(
	function (a, b) {
		return {ctor: 'ToggleEditable', _0: a, _1: b};
	});
var _user$project$Text_Update$DeleteAnswer = F2(
	function (a, b) {
		return {ctor: 'DeleteAnswer', _0: a, _1: b};
	});
var _user$project$Text_Update$AddAnswer = F2(
	function (a, b) {
		return {ctor: 'AddAnswer', _0: a, _1: b};
	});
var _user$project$Text_Update$UpdateAnswerFieldCorrect = F3(
	function (a, b, c) {
		return {ctor: 'UpdateAnswerFieldCorrect', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Update$UpdateAnswerFeedbackValue = F3(
	function (a, b, c) {
		return {ctor: 'UpdateAnswerFeedbackValue', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Update$UpdateAnswerFieldValue = F3(
	function (a, b, c) {
		return {ctor: 'UpdateAnswerFieldValue', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Update$UpdateAnswerField = F2(
	function (a, b) {
		return {ctor: 'UpdateAnswerField', _0: a, _1: b};
	});
var _user$project$Text_Update$AddQuestion = function (a) {
	return {ctor: 'AddQuestion', _0: a};
};
var _user$project$Text_Update$DeleteSelectedQuestions = function (a) {
	return {ctor: 'DeleteSelectedQuestions', _0: a};
};
var _user$project$Text_Update$SelectQuestion = F3(
	function (a, b, c) {
		return {ctor: 'SelectQuestion', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Update$DeleteQuestion = F2(
	function (a, b) {
		return {ctor: 'DeleteQuestion', _0: a, _1: b};
	});
var _user$project$Text_Update$ToggleQuestionMenu = F2(
	function (a, b) {
		return {ctor: 'ToggleQuestionMenu', _0: a, _1: b};
	});
var _user$project$Text_Update$UpdateQuestionFieldValue = F3(
	function (a, b, c) {
		return {ctor: 'UpdateQuestionFieldValue', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Update$UpdateQuestionField = F2(
	function (a, b) {
		return {ctor: 'UpdateQuestionField', _0: a, _1: b};
	});
var _user$project$Text_Update$UpdateTextBody = function (a) {
	return {ctor: 'UpdateTextBody', _0: a};
};
var _user$project$Text_Update$DeleteTextSection = function (a) {
	return {ctor: 'DeleteTextSection', _0: a};
};
var _user$project$Text_Update$AddTextSection = {ctor: 'AddTextSection'};
var _user$project$Text_Update$UpdateTextValue = F3(
	function (a, b, c) {
		return {ctor: 'UpdateTextValue', _0: a, _1: b, _2: c};
	});

var _user$project$Config$answer_feedback_limit = 2048;
var _user$project$Config$text_page = function (text_id) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/text/',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(text_id),
			'/'));
};
var _user$project$Config$forgot_password_page = '/user/password_reset/';
var _user$project$Config$instructor_login_page = '/login/instructor/';
var _user$project$Config$student_login_page = '/login/student/';
var _user$project$Config$instructor_invite_uri = '/api/instructor/invite/';
var _user$project$Config$instructor_signup_page = '/signup/instructor/';
var _user$project$Config$student_signup_page = '/signup/student/';
var _user$project$Config$instructor_profile_page = '/profile/instructor/';
var _user$project$Config$student_profile_page = '/profile/student/';
var _user$project$Config$student_api_endpoint = '/api/student/';
var _user$project$Config$reset_pass_endpoint = '/api/password/reset/confirm/';
var _user$project$Config$forgot_pass_endpoint = '/api/password/reset/';
var _user$project$Config$student_logout_api_endpoint = '/api/student/logout/';
var _user$project$Config$student_login_api_endpoint = '/api/student/login/';
var _user$project$Config$student_signup_api_endpoint = '/api/student/signup/';
var _user$project$Config$instructor_logout_api_endpoint = '/api/instructor/logout/';
var _user$project$Config$instructor_login_api_endpoint = '/api/instructor/login/';
var _user$project$Config$instructor_signup_api_endpoint = '/api/instructor/signup/';
var _user$project$Config$question_api_endpoint = '/api/question/';
var _user$project$Config$text_section_api_endpoint = '/api/section/';
var _user$project$Config$text_translation_api_match_endpoint = '/api/text/translations/match/';
var _user$project$Config$text_api_endpoint = '/api/text/';
var _user$project$Config$username_validation_api_endpoint = '/api/username/';

var _user$project$Answer_View$edit_answer_feedback = F2(
	function (params, answer_field) {
		var answer = _user$project$Answer_Field$answer(answer_field);
		var feedback_field = _user$project$Answer_Field$feedback_field(answer_field);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', feedback_field.id),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'rows', '5'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'cols', '75'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onBlur(
										params.msg(
											A2(
												_user$project$Text_Update$ToggleEditable,
												params.text_section_component,
												_user$project$Text_Update$Answer(answer_field)))),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											function (_p0) {
												return params.msg(
													A3(_user$project$Text_Update$UpdateAnswerFeedbackValue, params.text_section_component, answer_field, _p0));
											}),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'placeholder', 'Give some feedback.'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$classList(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'answer_feedback', _1: true},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'input_error', _1: feedback_field.error},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(answer.feedback),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'chars_remaining', _1: true},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'error',
											_1: _elm_lang$core$Native_Utils.cmp(
												_user$project$Config$answer_feedback_limit - _elm_lang$core$String$length(answer.feedback),
												0) < 0
										},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Characters remaining ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_user$project$Config$answer_feedback_limit - _elm_lang$core$String$length(answer.feedback)),
										'.'))),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(feedback_field.error_string),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Answer_View$edit_answer = F2(
	function (params, answer_field) {
		var answer = _user$project$Answer_Field$answer(answer_field);
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', answer.text),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Attributes$attribute,
									'id',
									_user$project$Answer_Field$id(answer_field)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										function (_p1) {
											return params.msg(
												A3(_user$project$Text_Update$UpdateAnswerFieldValue, params.text_section_component, answer_field, _p1));
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$classList(
											{
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'input_error',
													_1: _user$project$Answer_Field$error(answer_field)
												},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'answer_note'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], 'Note: A correct answer is required.  To select a correct answer, ', 'toggle the radio button to choose this answer as the correct answer.')),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Answer_View$edit_answer_feedback, params, answer_field),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Answer_View$view_answer_feedback = F2(
	function (params, answer_field) {
		var answer = _user$project$Answer_Field$answer(answer_field);
		return (!_elm_lang$core$String$isEmpty(answer.feedback)) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'answer_feedback', _1: true},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'grey_bg', _1: true},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(answer.feedback),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
	});
var _user$project$Answer_View$view_answer = F2(
	function (params, answer_field) {
		var answer = _user$project$Answer_Field$answer(answer_field);
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					params.msg(
						A2(
							_user$project$Text_Update$ToggleEditable,
							params.text_section_component,
							_user$project$Text_Update$Answer(answer_field)))),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						function () {
							var _p2 = answer.text;
							if (_p2 === '') {
								return _user$project$Answer_Model$default_answer_text(answer);
							} else {
								return answer.text;
							}
						}()),
					_1: {ctor: '[]'}
				},
				A2(_user$project$Answer_View$view_answer_feedback, params, answer_field)));
	});
var _user$project$Answer_View$view_editable_answer = F3(
	function (params, num_of_answers, answer_field) {
		var title_text_delete = 'Delete this answer';
		var title_text_add = 'Add new answer after this answer';
		var editing = _user$project$Answer_Field$editable(answer_field);
		var answer = _user$project$Answer_Field$answer(answer_field);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'answer_item', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'editable', _1: !editing},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'radio'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Attributes$attribute,
										'name',
										_user$project$Answer_Field$name(answer_field)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onCheck(
											function (_p3) {
												return params.msg(
													A3(_user$project$Text_Update$UpdateAnswerFieldCorrect, params.text_section_component, answer_field, _p3));
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							answer.correct ? {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'checked', 'checked'),
								_1: {ctor: '[]'}
							} : {ctor: '[]'}),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: function () {
							var _p4 = _user$project$Answer_Field$editable(answer_field);
							if (_p4 === true) {
								return A2(_user$project$Answer_View$edit_answer, params, answer_field);
							} else {
								return A2(_user$project$Answer_View$view_answer, params, answer_field);
							}
						}(),
						_1: {ctor: '[]'}
					}
				},
				function () {
					var _p5 = num_of_answers;
					switch (_p5) {
						case 3:
							return {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'answer_add'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												params.msg(
													A2(_user$project$Text_Update$AddAnswer, params.text_section_component, answer_field))),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$img,
											{
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', title_text_add),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'alt', title_text_add),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/add.svg'),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '18px'),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '18px'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							};
						case 4:
							return {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'answer_delete'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												params.msg(
													A2(_user$project$Text_Update$DeleteAnswer, params.text_section_component, answer_field))),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$img,
											{
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', title_text_delete),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'alt', title_text_delete),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/delete.svg'),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '18px'),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '18px'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							};
						default:
							return {ctor: '[]'};
					}
				}()));
	});
var _user$project$Answer_View$AnswerFieldParams = F3(
	function (a, b, c) {
		return {text_section_component: a, question: b, msg: c};
	});

var _user$project$Date_Utils$am_pm_fmt = function (date) {
	var _p0 = _elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(date),
		12) < 0;
	if (_p0 === true) {
		return 'AM';
	} else {
		return 'PM';
	}
};
var _user$project$Date_Utils$pad_zero = F2(
	function (zeros, num) {
		var _p1 = _elm_lang$core$String$toInt(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'1',
				A2(_elm_lang$core$String$repeat, zeros - 1, '0')));
		if (_p1.ctor === 'Ok') {
			var _p2 = _elm_lang$core$Native_Utils.cmp(num, _p1._0) > 0;
			if (_p2 === true) {
				return _elm_lang$core$Basics$toString(num);
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$String$repeat, zeros, '0'),
					_elm_lang$core$Basics$toString(num));
			}
		} else {
			return _elm_lang$core$Basics$toString(num);
		}
	});
var _user$project$Date_Utils$hour_min_sec_fmt = function (date) {
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$String$join,
				':',
				{
					ctor: '::',
					_0: A2(
						_user$project$Date_Utils$pad_zero,
						1,
						_elm_lang$core$Date$hour(date) - 12),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Date_Utils$pad_zero,
							1,
							_elm_lang$core$Date$minute(date)),
						_1: {
							ctor: '::',
							_0: A2(
								_user$project$Date_Utils$pad_zero,
								1,
								_elm_lang$core$Date$second(date)),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Date_Utils$am_pm_fmt(date),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Date_Utils$month_day_year_fmt = function (date) {
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'',
		A2(
			_elm_lang$core$List$map,
			function (s) {
				return A2(_elm_lang$core$Basics_ops['++'], s, '  ');
			},
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$month(date)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							_elm_lang$core$Date$day(date)),
						','),
					_1: {
						ctor: '::',
						_0: _user$project$Date_Utils$hour_min_sec_fmt(date),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(
								_elm_lang$core$Date$year(date)),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};


var _user$project$Help_PopUp$setAllInvisible = function (msgs) {
	return _rnons$ordered_containers$OrderedDict$fromList(
		A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return {
					ctor: '_Tuple2',
					_0: _p1._0,
					_1: {ctor: '_Tuple2', _0: _p1._1._0, _1: false}
				};
			},
			_rnons$ordered_containers$OrderedDict$toList(msgs)));
};
var _user$project$Help_PopUp$currentMsgIndex = function (_p2) {
	var _p3 = _p2;
	return _p3._3;
};
var _user$project$Help_PopUp$msgs = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Help_PopUp$toArray = function (help_msgs) {
	return _elm_lang$core$Array$fromList(
		_rnons$ordered_containers$OrderedDict$toList(help_msgs));
};
var _user$project$Help_PopUp$getMsg = F2(
	function (help, index) {
		var ordered_msgs = _user$project$Help_PopUp$toArray(
			_user$project$Help_PopUp$msgs(help));
		var _p6 = A2(_elm_lang$core$Array$get, index, ordered_msgs);
		if (_p6.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(_p6._0._1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Help_PopUp$currentMsg = function (help) {
	var current_msg_index = _user$project$Help_PopUp$currentMsgIndex(help);
	return A2(_user$project$Help_PopUp$getMsg, help, current_msg_index);
};
var _user$project$Help_PopUp$nextMsg = function (help) {
	var current_msg_index = _user$project$Help_PopUp$currentMsgIndex(help);
	var next_msg_index = current_msg_index + 1;
	var _p7 = A2(_user$project$Help_PopUp$getMsg, help, current_msg_index);
	if (_p7.ctor === 'Just') {
		var _p8 = A2(_user$project$Help_PopUp$getMsg, help, next_msg_index);
		if (_p8.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p8._0, _1: next_msg_index});
		} else {
			var _p9 = A2(_user$project$Help_PopUp$getMsg, help, 0);
			if (_p9.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p9._0, _1: 0});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Help_PopUp$prevMsg = function (help) {
	var current_msg_index = _user$project$Help_PopUp$currentMsgIndex(help);
	var prev_msg_index = current_msg_index - 1;
	var _p10 = A2(_user$project$Help_PopUp$getMsg, help, current_msg_index);
	if (_p10.ctor === 'Just') {
		var _p11 = A2(_user$project$Help_PopUp$getMsg, help, prev_msg_index);
		if (_p11.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				{ctor: '_Tuple2', _0: _p11._0, _1: prev_msg_index});
		} else {
			var last_msg_index = _elm_lang$core$Array$length(
				_user$project$Help_PopUp$toArray(
					_user$project$Help_PopUp$msgs(help))) - 1;
			var _p12 = A2(_user$project$Help_PopUp$getMsg, help, last_msg_index);
			if (_p12.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p12._0, _1: last_msg_index});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Help_PopUp$popupToID = F2(
	function (_p13, help_msg) {
		var _p14 = _p13;
		return _p14._2(help_msg);
	});
var _user$project$Help_PopUp$scrollToFirstMsg = function (help) {
	var _p15 = A2(_user$project$Help_PopUp$getMsg, help, 0);
	if (_p15.ctor === 'Just') {
		return _user$project$Ports$scrollTo(
			A2(_user$project$Help_PopUp$popupToID, help, _p15._0));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$Help_PopUp$scrollToNextMsg = function (help) {
	var _p16 = _user$project$Help_PopUp$nextMsg(help);
	if (_p16.ctor === 'Just') {
		return _user$project$Ports$scrollTo(
			A2(_user$project$Help_PopUp$popupToID, help, _p16._0._0));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$Help_PopUp$scrollToPrevMsg = function (help) {
	var _p17 = _user$project$Help_PopUp$prevMsg(help);
	if (_p17.ctor === 'Just') {
		return _user$project$Ports$scrollTo(
			A2(_user$project$Help_PopUp$popupToID, help, _p17._0._0));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$Help_PopUp$popupToOverlayID = F2(
	function (_p18, help_msg) {
		var _p19 = _p18;
		return _p19._1(help_msg);
	});
var _user$project$Help_PopUp$isVisible = F2(
	function (help, msg) {
		var _p20 = A2(
			_rnons$ordered_containers$OrderedDict$get,
			A2(_user$project$Help_PopUp$popupToOverlayID, help, msg),
			_user$project$Help_PopUp$msgs(help));
		if (_p20.ctor === 'Just') {
			return _p20._0._1;
		} else {
			return false;
		}
	});
var _user$project$Help_PopUp$helpID = F2(
	function (_p21, help_msg) {
		var _p22 = _p21;
		return _p22._2(help_msg);
	});
var _user$project$Help_PopUp$Help = F4(
	function (a, b, c, d) {
		return {ctor: 'Help', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Help_PopUp$setMsgs = F2(
	function (_p23, new_msgs) {
		var _p24 = _p23;
		return A4(_user$project$Help_PopUp$Help, new_msgs, _p24._1, _p24._2, _p24._3);
	});
var _user$project$Help_PopUp$setVisible = F3(
	function (help, help_msg, visible) {
		var help_msgs = _user$project$Help_PopUp$setAllInvisible(
			_user$project$Help_PopUp$msgs(help));
		var help_msg_id = A2(_user$project$Help_PopUp$popupToOverlayID, help, help_msg);
		var new_msgs = A3(
			_rnons$ordered_containers$OrderedDict$insert,
			help_msg_id,
			{ctor: '_Tuple2', _0: help_msg, _1: visible},
			help_msgs);
		return A2(_user$project$Help_PopUp$setMsgs, help, new_msgs);
	});
var _user$project$Help_PopUp$setCurrentMsgIndex = F2(
	function (_p25, new_index) {
		var _p26 = _p25;
		return A4(_user$project$Help_PopUp$Help, _p26._0, _p26._1, _p26._2, new_index);
	});
var _user$project$Help_PopUp$next = function (help) {
	var current_msg_index = _user$project$Help_PopUp$currentMsgIndex(help);
	var _p27 = _user$project$Help_PopUp$nextMsg(help);
	if (_p27.ctor === 'Just') {
		return A2(
			_user$project$Help_PopUp$setCurrentMsgIndex,
			A3(_user$project$Help_PopUp$setVisible, help, _p27._0._0, true),
			_p27._0._1);
	} else {
		return help;
	}
};
var _user$project$Help_PopUp$prev = function (help) {
	var current_msg_index = _user$project$Help_PopUp$currentMsgIndex(help);
	var _p28 = _user$project$Help_PopUp$prevMsg(help);
	if (_p28.ctor === 'Just') {
		return A2(
			_user$project$Help_PopUp$setCurrentMsgIndex,
			A3(_user$project$Help_PopUp$setVisible, help, _p28._0._0, true),
			_p28._0._1);
	} else {
		return help;
	}
};
var _user$project$Help_PopUp$init = F3(
	function (help_msgs, popup_to_overlay_id, popup_to_id) {
		var initial_msgs = _rnons$ordered_containers$OrderedDict$fromList(
			A2(
				_elm_lang$core$List$map,
				function (help_msg) {
					return {
						ctor: '_Tuple2',
						_0: popup_to_overlay_id(help_msg),
						_1: {ctor: '_Tuple2', _0: help_msg, _1: false}
					};
				},
				help_msgs));
		var _p29 = _elm_lang$core$List$head(help_msgs);
		if (_p29.ctor === 'Just') {
			return A3(
				_user$project$Help_PopUp$setVisible,
				A4(_user$project$Help_PopUp$Help, initial_msgs, popup_to_overlay_id, popup_to_id, 0),
				_p29._0,
				true);
		} else {
			return A4(_user$project$Help_PopUp$Help, initial_msgs, popup_to_overlay_id, popup_to_id, 0);
		}
	});

var _user$project$HttpHelpers$delete_with_headers = F4(
	function (url, headers, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: headers,
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$HttpHelpers$post_with_headers = F4(
	function (url, headers, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: headers,
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$HttpHelpers$put_with_headers = F4(
	function (url, headers, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'PUT',
				headers: headers,
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});

var _user$project$Menu_Logout$LogOutResp = function (a) {
	return {redirect: a};
};
var _user$project$Menu_Logout$logoutRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'redirect',
	_elm_lang$core$Json_Decode$string,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Menu_Logout$LogOutResp));

var _user$project$Instructor_Profile$logout = F3(
	function (instructor_profile, csrftoken, logout_msg) {
		var request = A4(
			_user$project$HttpHelpers$post_with_headers,
			_user$project$Config$instructor_logout_api_endpoint,
			{
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
				_1: {ctor: '[]'}
			},
			_elm_lang$http$Http$emptyBody,
			_user$project$Menu_Logout$logoutRespDecoder);
		return A2(_elm_lang$http$Http$send, logout_msg, request);
	});
var _user$project$Instructor_Profile$attrs = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$Instructor_Profile$texts = function (instructor_profile) {
	return _user$project$Instructor_Profile$attrs(instructor_profile).texts;
};
var _user$project$Instructor_Profile$username = function (instructor_profile) {
	return _user$project$Instructor_Profile$attrs(instructor_profile).username;
};
var _user$project$Instructor_Profile$invites = function (instructor_profile) {
	return _user$project$Instructor_Profile$attrs(instructor_profile).invites;
};
var _user$project$Instructor_Profile$inviteURI = _user$project$Config$instructor_invite_uri;
var _user$project$Instructor_Profile$Text = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return {id: a, title: b, introduction: c, author: d, source: e, difficulty: f, conclusion: g, created_by: h, last_modified_by: i, tags: j, created_dt: k, modified_dt: l, write_locker: m, tags: n, text_section_count: o, edit_uri: p};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Instructor_Profile$Invite = F3(
	function (a, b, c) {
		return {email: a, invite_code: b, expiration: c};
	});
var _user$project$Instructor_Profile$InstructorProfileParams = F4(
	function (a, b, c, d) {
		return {id: a, texts: b, invites: c, username: d};
	});
var _user$project$Instructor_Profile$InstructorProfile = function (a) {
	return {ctor: 'InstructorProfile', _0: a};
};
var _user$project$Instructor_Profile$initProfile = function (params) {
	return _user$project$Instructor_Profile$InstructorProfile(params);
};
var _user$project$Instructor_Profile$addInvite = F2(
	function (instructor_profile, invite) {
		var new_invites = function () {
			var _p2 = _user$project$Instructor_Profile$invites(instructor_profile);
			if (_p2.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p2._0,
						{
							ctor: '::',
							_0: invite,
							_1: {ctor: '[]'}
						}));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}();
		var new_attrs = _user$project$Instructor_Profile$attrs(instructor_profile);
		return _user$project$Instructor_Profile$InstructorProfile(
			_elm_lang$core$Native_Utils.update(
				new_attrs,
				{invites: new_invites}));
	});

var _user$project$Student_Profile$logout = F3(
	function (student_profile, csrftoken, logout_msg) {
		var request = A4(
			_user$project$HttpHelpers$post_with_headers,
			_user$project$Config$student_logout_api_endpoint,
			{
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
				_1: {ctor: '[]'}
			},
			_elm_lang$http$Http$emptyBody,
			_user$project$Menu_Logout$logoutRespDecoder);
		return A2(_elm_lang$http$Http$send, logout_msg, request);
	});
var _user$project$Student_Profile$studentEmail = function (_p0) {
	var _p1 = _p0;
	return _p1._2;
};
var _user$project$Student_Profile$studentUserName = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$Student_Profile$studentDifficulties = function (_p4) {
	var _p5 = _p4;
	return _p5._4;
};
var _user$project$Student_Profile$studentUpdateURI = function (id) {
	return A2(
		_elm_lang$core$String$join,
		'',
		{
			ctor: '::',
			_0: _user$project$Config$student_api_endpoint,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(id),
				_1: {
					ctor: '::',
					_0: '/',
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Student_Profile$studentID = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};
var _user$project$Student_Profile$studentDifficultyPreference = function (_p8) {
	var _p9 = _p8;
	return _p9._3;
};
var _user$project$Student_Profile$StudentProfileParams = F5(
	function (a, b, c, d, e) {
		return {id: a, username: b, email: c, difficulty_preference: d, difficulties: e};
	});
var _user$project$Student_Profile$StudentProfile = F5(
	function (a, b, c, d, e) {
		return {ctor: 'StudentProfile', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _user$project$Student_Profile$setStudentDifficultyPreference = F2(
	function (_p10, preference) {
		var _p11 = _p10;
		return A5(
			_user$project$Student_Profile$StudentProfile,
			_p11._0,
			_p11._1,
			_p11._2,
			_elm_lang$core$Maybe$Just(preference),
			_p11._4);
	});
var _user$project$Student_Profile$setUserName = F2(
	function (_p12, new_username) {
		var _p13 = _p12;
		return A5(_user$project$Student_Profile$StudentProfile, _p13._0, new_username, _p13._2, _p13._3, _p13._4);
	});
var _user$project$Student_Profile$initProfile = function (params) {
	return A5(_user$project$Student_Profile$StudentProfile, params.id, params.username, params.email, params.difficulty_preference, params.difficulties);
};

var _user$project$Menu_Msg$StudentLogout = function (a) {
	return {ctor: 'StudentLogout', _0: a};
};
var _user$project$Menu_Msg$InstructorLogout = function (a) {
	return {ctor: 'InstructorLogout', _0: a};
};

var _user$project$Instructor_View$view_instructor_profile_link = F2(
	function (instructor_profile, top_level_msg) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('profile_dropdown_menu'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', _user$project$Config$instructor_profile_page),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_user$project$Instructor_Profile$attrs(instructor_profile).username),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'profile_dropdown_menu_overlay', _1: true},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('profile_dropdown_menu_item'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											top_level_msg(
												_user$project$Menu_Msg$InstructorLogout(instructor_profile))),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Logout'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Instructor_View$view_instructor_profile_header = F2(
	function (instructor_profile, top_level_msg) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('profile-link'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'menu_item', _1: true},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(_user$project$Instructor_View$view_instructor_profile_link, instructor_profile, top_level_msg),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	});

var _user$project$Question_Encode$questionEncoder = function (question) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'body',
				_1: _elm_lang$core$Json_Encode$string(question.body)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'order',
					_1: _elm_lang$core$Json_Encode$int(question.order)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'answers',
						_1: _user$project$Answer_Encode$answersEncoder(question.answers)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'question_type',
							_1: _elm_lang$core$Json_Encode$string(question.question_type)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Question_Encode$questionsEncoder = function (questions) {
	return _elm_lang$core$Json_Encode$list(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (question) {
					return _user$project$Question_Encode$questionEncoder(question);
				},
				questions)));
};

var _user$project$Text_Section_Encode$textSectionEncoder = function (text) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'body',
				_1: _elm_lang$core$Json_Encode$string(text.body)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'questions',
					_1: _user$project$Question_Encode$questionsEncoder(text.questions)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Section_Encode$textSectionsEncoder = function (texts) {
	return _elm_lang$core$Json_Encode$list(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (text) {
					return _user$project$Text_Section_Encode$textSectionEncoder(text);
				},
				texts)));
};

var _user$project$Text_Encode$textEncoder = function (text) {
	var conclusion = function () {
		var _p0 = text.conclusion;
		if (_p0.ctor === 'Just') {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'conclusion',
					_1: _elm_lang$core$Json_Encode$string(_p0._0)
				},
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	return _elm_lang$core$Json_Encode$object(
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'introduction',
					_1: _elm_lang$core$Json_Encode$string(text.introduction)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'title',
						_1: _elm_lang$core$Json_Encode$string(text.title)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'source',
							_1: _elm_lang$core$Json_Encode$string(text.source)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'author',
								_1: _elm_lang$core$Json_Encode$string(text.author)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'difficulty',
									_1: _elm_lang$core$Json_Encode$string(text.difficulty)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'text_sections',
										_1: _user$project$Text_Section_Encode$textSectionsEncoder(text.sections)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'tags',
											_1: _elm_lang$core$Json_Encode$list(
												function () {
													var _p1 = text.tags;
													if (_p1.ctor === 'Just') {
														return A2(
															_elm_lang$core$List$map,
															function (tag) {
																return _elm_lang$core$Json_Encode$string(tag);
															},
															_p1._0);
													} else {
														return {ctor: '[]'};
													}
												}())
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			conclusion));
};


var _user$project$Student_Performance_Report$emptyPerformanceReport = {html: '<div>No results found.</div>', pdf_link: ''};
var _user$project$Student_Performance_Report$PerformanceReport = F2(
	function (a, b) {
		return {html: a, pdf_link: b};
	});


var _user$project$Student_Profile_Help$popupToID = function (help) {
	var _p0 = help;
	switch (_p0.ctor) {
		case 'UsernameHelp':
			return 'username_hint';
		case 'MyPerformanceHelp':
			return 'my_performance_hint';
		case 'PreferredDifficultyHelp':
			return 'preferred_difficulty_hint';
		case 'UsernameMenuItemHelp':
			return 'username_menu_item_hint';
		default:
			return 'search_text_menu_item_hint';
	}
};
var _user$project$Student_Profile_Help$popupToOverlayID = function (help_popup) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Student_Profile_Help$popupToID(help_popup),
		'_overlay');
};
var _user$project$Student_Profile_Help$helpMsg = function (help_msg) {
	var _p1 = help_msg;
	switch (_p1.ctor) {
		case 'UsernameHelp':
			return _p1._0;
		case 'MyPerformanceHelp':
			return _p1._0;
		case 'PreferredDifficultyHelp':
			return _p1._0;
		case 'UsernameMenuItemHelp':
			return _p1._0;
		default:
			return _p1._0;
	}
};
var _user$project$Student_Profile_Help$help = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _user$project$Student_Profile_Help$helpID = F2(
	function (student_help, help_msg) {
		return A2(
			_user$project$Help_PopUp$helpID,
			_user$project$Student_Profile_Help$help(student_help),
			help_msg);
	});
var _user$project$Student_Profile_Help$isVisible = F2(
	function (student_profile_help, msg) {
		return A2(
			_user$project$Help_PopUp$isVisible,
			_user$project$Student_Profile_Help$help(student_profile_help),
			msg);
	});
var _user$project$Student_Profile_Help$scrollToNextMsg = function (student_profile_help) {
	return _user$project$Help_PopUp$scrollToNextMsg(
		_user$project$Student_Profile_Help$help(student_profile_help));
};
var _user$project$Student_Profile_Help$scrollToPrevMsg = function (student_profile_help) {
	return _user$project$Help_PopUp$scrollToPrevMsg(
		_user$project$Student_Profile_Help$help(student_profile_help));
};
var _user$project$Student_Profile_Help$scrollToFirstMsg = function (student_profile_help) {
	return _user$project$Help_PopUp$scrollToFirstMsg(
		_user$project$Student_Profile_Help$help(student_profile_help));
};
var _user$project$Student_Profile_Help$SearchTextsMenuItemHelp = function (a) {
	return {ctor: 'SearchTextsMenuItemHelp', _0: a};
};
var _user$project$Student_Profile_Help$search_menu_item_help = _user$project$Student_Profile_Help$SearchTextsMenuItemHelp('To select a text to read, go to the Search Texts option that is in the menu bar on each page of the website.');
var _user$project$Student_Profile_Help$UsernameMenuItemHelp = function (a) {
	return {ctor: 'UsernameMenuItemHelp', _0: a};
};
var _user$project$Student_Profile_Help$username_menu_item_help = _user$project$Student_Profile_Help$UsernameMenuItemHelp('You can return to this profile page at any time, by clicking on your username in the top right corner of the\n    screen. Hovering over your username, you can see the option to log out.');
var _user$project$Student_Profile_Help$PreferredDifficultyHelp = function (a) {
	return {ctor: 'PreferredDifficultyHelp', _0: a};
};
var _user$project$Student_Profile_Help$preferred_difficulty_help = _user$project$Student_Profile_Help$PreferredDifficultyHelp('Please choose a difficulty level. If you have taken proficiency tests, it would be advisable to start out\n     reading texts at your current proficiency level.  If you’ve not taken a Flagship Proficiency test yet,\n     then you can use these brief descriptions to pick the level that is closest to your current abilities.');
var _user$project$Student_Profile_Help$MyPerformanceHelp = function (a) {
	return {ctor: 'MyPerformanceHelp', _0: a};
};
var _user$project$Student_Profile_Help$my_performance_help = _user$project$Student_Profile_Help$MyPerformanceHelp('As you use the website, make sure to check back here from time to time.\n     You will be able to see the percentage of questions that you have answered correctly over varying time periods\n     and difficulties.');
var _user$project$Student_Profile_Help$UsernameHelp = function (a) {
	return {ctor: 'UsernameHelp', _0: a};
};
var _user$project$Student_Profile_Help$username_help = _user$project$Student_Profile_Help$UsernameHelp('You can create a new username that is distinct from your email address if you choose.\n     Your username will be visible to instructors and other students if you comment on any texts.');
var _user$project$Student_Profile_Help$help_msgs = {
	ctor: '::',
	_0: _user$project$Student_Profile_Help$username_help,
	_1: {
		ctor: '::',
		_0: _user$project$Student_Profile_Help$my_performance_help,
		_1: {
			ctor: '::',
			_0: _user$project$Student_Profile_Help$preferred_difficulty_help,
			_1: {
				ctor: '::',
				_0: _user$project$Student_Profile_Help$username_menu_item_help,
				_1: {
					ctor: '::',
					_0: _user$project$Student_Profile_Help$search_menu_item_help,
					_1: {ctor: '[]'}
				}
			}
		}
	}
};
var _user$project$Student_Profile_Help$StudentProfileHelp = function (a) {
	return {ctor: 'StudentProfileHelp', _0: a};
};
var _user$project$Student_Profile_Help$init = _user$project$Student_Profile_Help$StudentProfileHelp(
	A3(_user$project$Help_PopUp$init, _user$project$Student_Profile_Help$help_msgs, _user$project$Student_Profile_Help$popupToOverlayID, _user$project$Student_Profile_Help$popupToID));
var _user$project$Student_Profile_Help$setVisible = F3(
	function (student_profile_help, help_msg, visible) {
		return _user$project$Student_Profile_Help$StudentProfileHelp(
			A3(
				_user$project$Help_PopUp$setVisible,
				_user$project$Student_Profile_Help$help(student_profile_help),
				help_msg,
				visible));
	});
var _user$project$Student_Profile_Help$next = function (student_profile_help) {
	return _user$project$Student_Profile_Help$StudentProfileHelp(
		_user$project$Help_PopUp$next(
			_user$project$Student_Profile_Help$help(student_profile_help)));
};
var _user$project$Student_Profile_Help$prev = function (student_profile_help) {
	return _user$project$Student_Profile_Help$StudentProfileHelp(
		_user$project$Help_PopUp$prev(
			_user$project$Student_Profile_Help$help(student_profile_help)));
};

var _user$project$Student_Profile_Model$UsernameUpdate = F3(
	function (a, b, c) {
		return {username: a, valid: b, msg: c};
	});
var _user$project$Student_Profile_Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {flags: a, profile: b, menu_items: c, performance_report: d, flashcards: e, editing: f, err_str: g, help: h, username_update: i, errors: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _user$project$Util$onEnterUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keyup',
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (key) {
				return _elm_lang$core$Native_Utils.eq(key, 13) ? _elm_lang$core$Json_Decode$succeed(msg) : _elm_lang$core$Json_Decode$fail('not enter key');
			},
			_elm_lang$html$Html_Events$keyCode));
};
var _user$project$Util$intTupleDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$int));
var _user$project$Util$stringTupleDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$string));
var _user$project$Util$valid_email_regex = _elm_lang$core$Regex$caseInsensitive(
	_elm_lang$core$Regex$regex('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'));
var _user$project$Util$is_valid_email = function (addr) {
	return A2(_elm_lang$core$Regex$contains, _user$project$Util$valid_email_regex, addr);
};

var _user$project$Text_Translations_TextWord$translations = function (_p0) {
	var _p1 = _p0;
	return _p1._4;
};
var _user$project$Text_Translations_TextWord$phrase = function (_p2) {
	var _p3 = _p2;
	return _p3._2;
};
var _user$project$Text_Translations_TextWord$id = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$Text_Translations_TextWord$endpoints = function (_p6) {
	var _p7 = _p6;
	return _p7._6;
};
var _user$project$Text_Translations_TextWord$translations_endpoint = function (text_word) {
	return _user$project$Text_Translations_TextWord$endpoints(text_word).translations;
};
var _user$project$Text_Translations_TextWord$text_word_endpoint = function (text_word) {
	return _user$project$Text_Translations_TextWord$endpoints(text_word).text_word;
};
var _user$project$Text_Translations_TextWord$wordTypeToGroup = function (word) {
	var _p8 = word;
	if (_p8.ctor === 'SingleWord') {
		return _p8._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Text_Translations_TextWord$group = function (_p9) {
	var _p10 = _p9;
	return _user$project$Text_Translations_TextWord$wordTypeToGroup(_p10._5);
};
var _user$project$Text_Translations_TextWord$instance = function (_p11) {
	var _p12 = _p11;
	return _p12._1;
};
var _user$project$Text_Translations_TextWord$word = function (_p13) {
	var _p14 = _p13;
	return _p14._5;
};
var _user$project$Text_Translations_TextWord$wordTypeToString = function (word) {
	var _p15 = word;
	if (_p15.ctor === 'SingleWord') {
		return 'single';
	} else {
		return 'compound';
	}
};
var _user$project$Text_Translations_TextWord$wordType = function (text_word) {
	return _user$project$Text_Translations_TextWord$wordTypeToString(
		_user$project$Text_Translations_TextWord$word(text_word));
};
var _user$project$Text_Translations_TextWord$grammemes = function (_p16) {
	var _p17 = _p16;
	return _p17._3;
};
var _user$project$Text_Translations_TextWord$grammemeValue = F2(
	function (text_word, grammeme_name) {
		var _p18 = _user$project$Text_Translations_TextWord$grammemes(text_word);
		if (_p18.ctor === 'Just') {
			return A2(_elm_lang$core$Dict$get, grammeme_name, _p18._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Translations_TextWord$Endpoints = F2(
	function (a, b) {
		return {text_word: a, translations: b};
	});
var _user$project$Text_Translations_TextWord$CompoundWord = {ctor: 'CompoundWord'};
var _user$project$Text_Translations_TextWord$SingleWord = function (a) {
	return {ctor: 'SingleWord', _0: a};
};
var _user$project$Text_Translations_TextWord$strToWordType = function (_p19) {
	var _p20 = _p19;
	var _p22 = _p20._1;
	var _p21 = _p20._0;
	switch (_p21) {
		case 'single':
			return _user$project$Text_Translations_TextWord$SingleWord(_p22);
		case 'compound':
			return _user$project$Text_Translations_TextWord$CompoundWord;
		default:
			return _user$project$Text_Translations_TextWord$SingleWord(_p22);
	}
};
var _user$project$Text_Translations_TextWord$TextWord = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'TextWord', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Text_Translations_TextWord$new = F7(
	function (id, instance, phrase, grammemes, translations, word, endpoint) {
		return A7(_user$project$Text_Translations_TextWord$TextWord, id, instance, phrase, grammemes, translations, word, endpoint);
	});
var _user$project$Text_Translations_TextWord$addTranslation = F2(
	function (_p23, translation) {
		var _p24 = _p23;
		var new_translations = function () {
			var _p25 = _p24._4;
			if (_p25.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							function (tr) {
								return _elm_lang$core$Native_Utils.update(
									tr,
									{correct_for_context: false});
							},
							_p25._0),
						{
							ctor: '::',
							_0: translation,
							_1: {ctor: '[]'}
						}));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}();
		return A7(_user$project$Text_Translations_TextWord$TextWord, _p24._0, _p24._1, _p24._2, _p24._3, new_translations, _p24._5, _p24._6);
	});
var _user$project$Text_Translations_TextWord$removeTranslation = F2(
	function (_p26, text_word_translation) {
		var _p27 = _p26;
		var _p28 = _p27._4;
		if (_p28.ctor === 'Just') {
			var new_translations = A2(
				_elm_lang$core$List$filter,
				function (tr) {
					return !_elm_lang$core$Native_Utils.eq(tr.id, text_word_translation.id);
				},
				_p28._0);
			return A7(
				_user$project$Text_Translations_TextWord$TextWord,
				_p27._0,
				_p27._1,
				_p27._2,
				_p27._3,
				_elm_lang$core$Maybe$Just(new_translations),
				_p27._5,
				_p27._6);
		} else {
			return _p27;
		}
	});
var _user$project$Text_Translations_TextWord$updateTranslation = F2(
	function (_p29, text_word_translation) {
		var _p30 = _p29;
		var _p31 = _p30._4;
		if (_p31.ctor === 'Just') {
			var new_translations = A2(
				_elm_lang$core$List$map,
				function (tr) {
					return _elm_lang$core$Native_Utils.eq(tr.id, text_word_translation.id) ? text_word_translation : tr;
				},
				_p31._0);
			return A7(
				_user$project$Text_Translations_TextWord$TextWord,
				_p30._0,
				_p30._1,
				_p30._2,
				_p30._3,
				_elm_lang$core$Maybe$Just(new_translations),
				_p30._5,
				_p30._6);
		} else {
			return _p30;
		}
	});
var _user$project$Text_Translations_TextWord$setNoTRCorrectForContext = function (_p32) {
	var _p33 = _p32;
	var _p34 = _p33._4;
	if (_p34.ctor === 'Just') {
		var new_translations = A2(
			_elm_lang$core$List$map,
			function (tr) {
				return _elm_lang$core$Native_Utils.update(
					tr,
					{correct_for_context: false});
			},
			_p34._0);
		return A7(
			_user$project$Text_Translations_TextWord$TextWord,
			_p33._0,
			_p33._1,
			_p33._2,
			_p33._3,
			_elm_lang$core$Maybe$Just(new_translations),
			_p33._5,
			_p33._6);
	} else {
		return _p33;
	}
};

var _user$project$TextReader_TextWord$newGrammemeFromList = function (grammemes) {
	var _p0 = grammemes;
	if (_p0.ctor === 'Just') {
		return _elm_lang$core$Dict$fromList(_p0._0);
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _user$project$TextReader_TextWord$translations = function (_p1) {
	var _p2 = _p1;
	return _p2._4;
};
var _user$project$TextReader_TextWord$grammemes = function (_p3) {
	var _p4 = _p3;
	return _p4._3;
};
var _user$project$TextReader_TextWord$grammemesToString = function (text_word) {
	var _p5 = _user$project$TextReader_TextWord$grammemes(text_word);
	if (_p5.ctor === 'Just') {
		return A2(
			_elm_lang$core$String$join,
			', ',
			A2(
				_elm_lang$core$List$map,
				function (_p6) {
					var _p7 = _p6;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p7._0,
						A2(_elm_lang$core$Basics_ops['++'], ': ', _p7._1));
				},
				_elm_lang$core$Dict$toList(_p5._0)));
	} else {
		return '';
	}
};
var _user$project$TextReader_TextWord$group = function (_p8) {
	var _p9 = _p8;
	return _user$project$Text_Translations_TextWord$wordTypeToGroup(_p9._5);
};
var _user$project$TextReader_TextWord$word = function (_p10) {
	var _p11 = _p10;
	return _p11._5;
};
var _user$project$TextReader_TextWord$wordType = function (text_word) {
	return _user$project$Text_Translations_TextWord$wordTypeToString(
		_user$project$TextReader_TextWord$word(text_word));
};
var _user$project$TextReader_TextWord$phrase = function (_p12) {
	var _p13 = _p12;
	return _p13._2;
};
var _user$project$TextReader_TextWord$instance = function (_p14) {
	var _p15 = _p14;
	return _p15._1;
};
var _user$project$TextReader_TextWord$Translation = F2(
	function (a, b) {
		return {correct_for_context: a, text: b};
	});
var _user$project$TextReader_TextWord$TextWordParams = F6(
	function (a, b, c, d, e, f) {
		return {id: a, instance: b, phrase: c, grammemes: d, translations: e, word: f};
	});
var _user$project$TextReader_TextWord$TextWord = F6(
	function (a, b, c, d, e, f) {
		return {ctor: 'TextWord', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f};
	});
var _user$project$TextReader_TextWord$new = F6(
	function (id, instance, phrase, grammemes, translations, word) {
		return A6(_user$project$TextReader_TextWord$TextWord, id, instance, phrase, grammemes, translations, word);
	});
var _user$project$TextReader_TextWord$newFromParams = function (params) {
	return A6(
		_user$project$TextReader_TextWord$TextWord,
		params.id,
		params.instance,
		params.phrase,
		_elm_lang$core$Maybe$Just(
			_user$project$TextReader_TextWord$newGrammemeFromList(params.grammemes)),
		params.translations,
		_user$project$Text_Translations_TextWord$strToWordType(params.word));
};

var _user$project$Text_Translations_Decode$grammemesDecoder = _elm_lang$core$Json_Decode$list(_user$project$Util$stringTupleDecoder);
var _user$project$Text_Translations_Decode$textWordEndpointsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'translations',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'text_word',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations_TextWord$Endpoints)));
var _user$project$Text_Translations_Decode$textGroupDetailsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'length',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'pos',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'instance',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'id',
				_elm_lang$core$Json_Decode$int,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations$TextGroupDetails)))));
var _user$project$Text_Translations_Decode$wordHelpDecoder = function (word_type) {
	var _p0 = word_type;
	switch (_p0) {
		case 'single':
			return A2(
				_elm_lang$core$Json_Decode$field,
				'group',
				A2(
					_elm_lang$core$Json_Decode$map,
					_user$project$Text_Translations_TextWord$SingleWord,
					_elm_lang$core$Json_Decode$nullable(_user$project$Text_Translations_Decode$textGroupDetailsDecoder)));
		case 'compound':
			return _elm_lang$core$Json_Decode$succeed(_user$project$Text_Translations_TextWord$CompoundWord);
		default:
			return _elm_lang$core$Json_Decode$fail('Unsupported word type');
	}
};
var _user$project$Text_Translations_Decode$wordDecoder = A2(
	_elm_lang$core$Json_Decode$andThen,
	_user$project$Text_Translations_Decode$wordHelpDecoder,
	A2(_elm_lang$core$Json_Decode$field, 'word_type', _elm_lang$core$Json_Decode$string));
var _user$project$Text_Translations_Decode$textWordTranslationsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'text',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'correct_for_context',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'endpoint',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'id',
				_elm_lang$core$Json_Decode$int,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations$Translation)))));
var _user$project$Text_Translations_Decode$textWordInstanceDecoder = A8(
	_elm_lang$core$Json_Decode$map7,
	_user$project$Text_Translations_TextWord$new,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'instance', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'phrase', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'grammemes',
		_elm_lang$core$Json_Decode$nullable(
			A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Dict$fromList, _user$project$Text_Translations_Decode$grammemesDecoder))),
	A2(
		_elm_lang$core$Json_Decode$field,
		'translations',
		_elm_lang$core$Json_Decode$nullable(
			_elm_lang$core$Json_Decode$list(_user$project$Text_Translations_Decode$textWordTranslationsDecoder))),
	_user$project$Text_Translations_Decode$wordDecoder,
	A2(_elm_lang$core$Json_Decode$field, 'endpoints', _user$project$Text_Translations_Decode$textWordEndpointsDecoder));
var _user$project$Text_Translations_Decode$textWordInstancesDecoder = _elm_lang$core$Json_Decode$list(_user$project$Text_Translations_Decode$textWordInstanceDecoder);
var _user$project$Text_Translations_Decode$textWordDictInstancesDecoder = _elm_lang$core$Json_Decode$dict(
	_elm_lang$core$Json_Decode$array(_user$project$Text_Translations_Decode$textWordInstanceDecoder));
var _user$project$Text_Translations_Decode$textTranslationAddRespDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'word', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'instance', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'translation', _user$project$Text_Translations_Decode$textWordTranslationsDecoder));
var _user$project$Text_Translations_Decode$textTranslationUpdateRespDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'word', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'instance', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'translation', _user$project$Text_Translations_Decode$textWordTranslationsDecoder));
var _user$project$Text_Translations_Decode$wordValuesDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'translations',
	_elm_lang$core$Json_Decode$nullable(
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'grammemes',
		A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Dict$fromList, _user$project$Text_Translations_Decode$grammemesDecoder),
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations$WordValues)));
var _user$project$Text_Translations_Decode$wordsDecoder = _elm_lang$core$Json_Decode$dict(_user$project$Text_Translations_Decode$wordValuesDecoder);
var _user$project$Text_Translations_Decode$TextWord = F3(
	function (a, b, c) {
		return {phrase: a, grammemes: b, translation: c};
	});
var _user$project$Text_Translations_Decode$textWordDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'translation',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'grammemes',
		_user$project$Text_Translations_Decode$grammemesDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'phrase',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations_Decode$TextWord))));
var _user$project$Text_Translations_Decode$textWordsDecoder = _elm_lang$core$Json_Decode$list(_user$project$Text_Translations_Decode$textWordDecoder);
var _user$project$Text_Translations_Decode$TextWordTranslationDeleteResp = F4(
	function (a, b, c, d) {
		return {word: a, instance: b, translation: c, deleted: d};
	});
var _user$project$Text_Translations_Decode$textTranslationRemoveRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'deleted',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'translation',
		_user$project$Text_Translations_Decode$textWordTranslationsDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'instance',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'word',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations_Decode$TextWordTranslationDeleteResp)))));
var _user$project$Text_Translations_Decode$TextWordMergeResp = F5(
	function (a, b, c, d, e) {
		return {phrase: a, instance: b, text_words: c, grouped: d, error: e};
	});
var _user$project$Text_Translations_Decode$textWordMergeDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'error',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'grouped',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'text_words',
			_user$project$Text_Translations_Decode$textWordInstancesDecoder,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'instance',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'phrase',
					_elm_lang$core$Json_Decode$string,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Translations_Decode$TextWordMergeResp))))));

var _user$project$TextReader_Answer_Model$answer = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$TextReader_Answer_Model$answered = function (text_answer) {
	var _p2 = _user$project$TextReader_Answer_Model$answer(text_answer).answered_correctly;
	if (_p2.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _user$project$TextReader_Answer_Model$feedback_viewable = function (text_answer) {
	return _user$project$TextReader_Answer_Model$answered(text_answer);
};
var _user$project$TextReader_Answer_Model$selected = function (text_answer) {
	return _user$project$TextReader_Answer_Model$answered(text_answer);
};
var _user$project$TextReader_Answer_Model$correct = function (text_answer) {
	var _p3 = _user$project$TextReader_Answer_Model$answer(text_answer).answered_correctly;
	if (_p3.ctor === 'Just') {
		return _p3._0;
	} else {
		return false;
	}
};
var _user$project$TextReader_Answer_Model$Answer = F6(
	function (a, b, c, d, e, f) {
		return {id: a, question_id: b, text: c, order: d, answered_correctly: e, feedback: f};
	});
var _user$project$TextReader_Answer_Model$TextAnswer = function (a) {
	return {ctor: 'TextAnswer', _0: a};
};
var _user$project$TextReader_Answer_Model$gen_text_answer = function (answer) {
	return _user$project$TextReader_Answer_Model$TextAnswer(answer);
};

var _user$project$TextReader_Question_Model$answered_correctly = function (_p0) {
	var _p1 = _p0;
	return _p1._1;
};
var _user$project$TextReader_Question_Model$answers = function (_p2) {
	var _p3 = _p2;
	return _p3._2;
};
var _user$project$TextReader_Question_Model$question = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$TextReader_Question_Model$answered = function (text_question) {
	var _p6 = _user$project$TextReader_Question_Model$answered_correctly(text_question);
	if (_p6.ctor === 'Just') {
		return _p6._0;
	} else {
		return false;
	}
};
var _user$project$TextReader_Question_Model$Question = F8(
	function (a, b, c, d, e, f, g, h) {
		return {id: a, text_section_id: b, created_dt: c, modified_dt: d, body: e, order: f, answers: g, question_type: h};
	});
var _user$project$TextReader_Question_Model$TextQuestion = F3(
	function (a, b, c) {
		return {ctor: 'TextQuestion', _0: a, _1: b, _2: c};
	});
var _user$project$TextReader_Question_Model$gen_text_question = function (question) {
	return A3(
		_user$project$TextReader_Question_Model$TextQuestion,
		question,
		_elm_lang$core$Maybe$Nothing,
		A2(_elm_lang$core$Array$map, _user$project$TextReader_Answer_Model$gen_text_answer, question.answers));
};

var _user$project$TextReader_Section_Model$textSection = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$TextReader_Section_Model$translations = function (section) {
	return _user$project$TextReader_Section_Model$textSection(section).translations;
};
var _user$project$TextReader_Section_Model$questions = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _user$project$TextReader_Section_Model$complete = function (section) {
	return A2(
		_elm_lang$core$List$all,
		function (answered) {
			return answered;
		},
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (question) {
					return _user$project$TextReader_Question_Model$answered(question);
				},
				_user$project$TextReader_Section_Model$questions(section))));
};
var _user$project$TextReader_Section_Model$completedSections = function (sections) {
	return _elm_lang$core$List$sum(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (section) {
					return _user$project$TextReader_Section_Model$complete(section) ? 1 : 0;
				},
				sections)));
};
var _user$project$TextReader_Section_Model$maxScore = function (section) {
	return _elm_lang$core$List$sum(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (question) {
					return 1;
				},
				_user$project$TextReader_Section_Model$questions(section))));
};
var _user$project$TextReader_Section_Model$score = function (section) {
	return _elm_lang$core$List$sum(
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (question) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						false,
						_user$project$TextReader_Question_Model$answered_correctly(question)) ? 1 : 0;
				},
				_user$project$TextReader_Section_Model$questions(section))));
};
var _user$project$TextReader_Section_Model$getTextWords = F2(
	function (section, phrase) {
		return A2(
			_elm_lang$core$Dict$get,
			phrase,
			_user$project$TextReader_Section_Model$translations(section));
	});
var _user$project$TextReader_Section_Model$getTextWord = F3(
	function (section, instance, phrase) {
		var _p4 = A2(_user$project$TextReader_Section_Model$getTextWords, section, phrase);
		if (_p4.ctor === 'Just') {
			return A2(_elm_lang$core$Array$get, instance, _p4._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$TextReader_Section_Model$emptyTextSection = {
	order: 0,
	body: '',
	question_count: 0,
	questions: _elm_lang$core$Array$fromList(
		{ctor: '[]'}),
	num_of_sections: 0,
	translations: _elm_lang$core$Dict$empty
};
var _user$project$TextReader_Section_Model$TextSection = F6(
	function (a, b, c, d, e, f) {
		return {order: a, body: b, question_count: c, questions: d, num_of_sections: e, translations: f};
	});
var _user$project$TextReader_Section_Model$Section = F2(
	function (a, b) {
		return {ctor: 'Section', _0: a, _1: b};
	});
var _user$project$TextReader_Section_Model$newSection = function (text_section) {
	return A2(
		_user$project$TextReader_Section_Model$Section,
		text_section,
		A2(_elm_lang$core$Array$map, _user$project$TextReader_Question_Model$gen_text_question, text_section.questions));
};

var _user$project$TextReader_Question_Decode$answerDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'feedback',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'answered_correctly',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$bool),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'order',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'text',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'question_id',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$int,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$TextReader_Answer_Model$Answer)))))));
var _user$project$TextReader_Question_Decode$answersDecoder = _elm_lang$core$Json_Decode$array(_user$project$TextReader_Question_Decode$answerDecoder);
var _user$project$TextReader_Question_Decode$questionDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'question_type',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'answers',
		_user$project$TextReader_Question_Decode$answersDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'order',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'body',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'modified_dt',
					_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'created_dt',
						_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'text_section_id',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'id',
								_elm_lang$core$Json_Decode$int,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$TextReader_Question_Model$Question)))))))));
var _user$project$TextReader_Question_Decode$questionsDecoder = _elm_lang$core$Json_Decode$array(_user$project$TextReader_Question_Decode$questionDecoder);

var _user$project$TextReader_Section_Decode$textWordTranslationDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'text',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'correct_for_context',
		_elm_lang$core$Json_Decode$bool,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$TextReader_TextWord$Translation)));
var _user$project$TextReader_Section_Decode$textWordTranslationsDecoder = _elm_lang$core$Json_Decode$nullable(
	_elm_lang$core$Json_Decode$list(_user$project$TextReader_Section_Decode$textWordTranslationDecoder));
var _user$project$TextReader_Section_Decode$textWordInstanceDecoder = A7(
	_elm_lang$core$Json_Decode$map6,
	_user$project$TextReader_TextWord$new,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'instance', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'phrase', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'grammemes',
		_elm_lang$core$Json_Decode$nullable(
			A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Dict$fromList, _user$project$Text_Translations_Decode$grammemesDecoder))),
	A2(_elm_lang$core$Json_Decode$field, 'translations', _user$project$TextReader_Section_Decode$textWordTranslationsDecoder),
	_user$project$Text_Translations_Decode$wordDecoder);
var _user$project$TextReader_Section_Decode$textWordDictInstancesDecoder = _elm_lang$core$Json_Decode$dict(
	_elm_lang$core$Json_Decode$array(_user$project$TextReader_Section_Decode$textWordInstanceDecoder));
var _user$project$TextReader_Section_Decode$textSectionDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'translations',
	_user$project$TextReader_Section_Decode$textWordDictInstancesDecoder,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'num_of_sections',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'questions',
			_user$project$TextReader_Question_Decode$questionsDecoder,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'question_count',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'body',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'order',
						_elm_lang$core$Json_Decode$int,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$TextReader_Section_Model$TextSection)))))));
var _user$project$TextReader_Section_Decode$textSectionsDecoder = _elm_lang$core$Json_Decode$list(_user$project$TextReader_Section_Decode$textSectionDecoder);
var _user$project$TextReader_Section_Decode$sectionDecoder = A2(_elm_lang$core$Json_Decode$map, _user$project$TextReader_Section_Model$newSection, _user$project$TextReader_Section_Decode$textSectionDecoder);

var _user$project$Student_Profile_Decode$studentProfileParamsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'difficulties',
	_elm_lang$core$Json_Decode$list(_user$project$Util$stringTupleDecoder),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'difficulty_preference',
		_elm_lang$core$Json_Decode$nullable(_user$project$Util$stringTupleDecoder),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'email',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'username',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'id',
					_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Student_Profile$StudentProfileParams))))));
var _user$project$Student_Profile_Decode$studentProfileDecoder = A2(
	_elm_lang$core$Json_Decode$map,
	_user$project$Student_Profile$initProfile,
	A2(_elm_lang$core$Json_Decode$field, 'profile', _user$project$Student_Profile_Decode$studentProfileParamsDecoder));
var _user$project$Student_Profile_Decode$performanceReportDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'pdf_link',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'html',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Student_Performance_Report$PerformanceReport)));
var _user$project$Student_Profile_Decode$textWordParamsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'word',
	A3(
		_elm_lang$core$Json_Decode$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode$index,
			1,
			_elm_lang$core$Json_Decode$nullable(_user$project$Text_Translations_Decode$textGroupDetailsDecoder))),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'translations',
		_user$project$TextReader_Section_Decode$textWordTranslationsDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'grammemes',
			_elm_lang$core$Json_Decode$nullable(
				_elm_lang$core$Json_Decode$list(_user$project$Util$stringTupleDecoder)),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'phrase',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'instance',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$int,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$TextReader_TextWord$TextWordParams)))))));
var _user$project$Student_Profile_Decode$wordTextWordDecoder = _elm_lang$core$Json_Decode$nullable(
	_elm_lang$core$Json_Decode$list(
		A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$index, 1, _user$project$Student_Profile_Decode$textWordParamsDecoder))));
var _user$project$Student_Profile_Decode$username_valid_decoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'msg',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'valid',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$bool),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'username',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Student_Profile_Model$UsernameUpdate))));

var _user$project$Student_View$view_profile_dropdown_menu = F3(
	function (student_profile, top_level_msg, items) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('profile-link'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'menu_item', _1: true},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('profile_dropdown_menu'),
						_1: {ctor: '[]'}
					},
					items),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Student_View$view_student_profile_logout_link = F2(
	function (student_profile, top_level_menu_msg) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'profile_dropdown_menu_overlay', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('profile_dropdown_menu_item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								top_level_menu_msg(
									_user$project$Menu_Msg$StudentLogout(student_profile))),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Logout'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Student_View$view_student_profile_page_link = F2(
	function (student_profile, top_level_menu_msg) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', _user$project$Config$student_profile_page),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$Student_Profile$studentUserName(student_profile)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Student_View$view_profile_link = F2(
	function (student_profile, top_level_msg) {
		var items = {
			ctor: '::',
			_0: A2(_user$project$Student_View$view_student_profile_page_link, student_profile, top_level_msg),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Student_View$view_student_profile_logout_link, student_profile, top_level_msg),
				_1: {ctor: '[]'}
			}
		};
		return A3(_user$project$Student_View$view_profile_dropdown_menu, student_profile, top_level_msg, items);
	});
var _user$project$Student_View$view_student_profile_header = F2(
	function (student_profile, top_level_menu_msg) {
		return {
			ctor: '::',
			_0: A2(_user$project$Student_View$view_profile_link, student_profile, top_level_menu_msg),
			_1: {ctor: '[]'}
		};
	});

var _user$project$User_Profile$logout = F3(
	function (profile, csrftoken, logout_msg) {
		var _p0 = profile;
		switch (_p0.ctor) {
			case 'Student':
				return A3(_user$project$Student_Profile$logout, _p0._0, csrftoken, logout_msg);
			case 'Instructor':
				return A3(_user$project$Instructor_Profile$logout, _p0._0, csrftoken, logout_msg);
			default:
				return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$User_Profile$retrieve_student_profile = F2(
	function (msg, profile_id) {
		var request = A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _user$project$Config$student_api_endpoint,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(profile_id),
							'/'),
						_1: {ctor: '[]'}
					}
				}),
			_user$project$Student_Profile_Decode$studentProfileDecoder);
		return A2(_elm_lang$http$Http$send, msg, request);
	});
var _user$project$User_Profile$view_profile_header = F2(
	function (profile, top_level_msg) {
		var _p1 = profile;
		switch (_p1.ctor) {
			case 'Instructor':
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Instructor_View$view_instructor_profile_header, _p1._0, top_level_msg));
			case 'Student':
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Student_View$view_student_profile_header, _p1._0, top_level_msg));
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$User_Profile$EmptyProfile = {ctor: 'EmptyProfile'};
var _user$project$User_Profile$emptyProfile = _user$project$User_Profile$EmptyProfile;
var _user$project$User_Profile$Instructor = function (a) {
	return {ctor: 'Instructor', _0: a};
};
var _user$project$User_Profile$fromInstructorProfile = function (instructor_profile) {
	return _user$project$User_Profile$Instructor(instructor_profile);
};
var _user$project$User_Profile$Student = function (a) {
	return {ctor: 'Student', _0: a};
};
var _user$project$User_Profile$fromStudentProfile = function (student_profile) {
	return _user$project$User_Profile$Student(student_profile);
};
var _user$project$User_Profile$initProfile = function (flags) {
	var _p2 = flags.instructor_profile;
	if (_p2.ctor === 'Just') {
		return _user$project$User_Profile$Instructor(
			_user$project$Instructor_Profile$initProfile(_p2._0));
	} else {
		var _p3 = flags.student_profile;
		if (_p3.ctor === 'Just') {
			return _user$project$User_Profile$Student(
				_user$project$Student_Profile$initProfile(_p3._0));
		} else {
			return _user$project$User_Profile$EmptyProfile;
		}
	}
};

var _user$project$Menu_View$view_top_menu = F3(
	function (_p0, profile, top_level_menu_msg) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_user$project$User_Profile$view_profile_header, profile, top_level_menu_msg));
	});
var _user$project$Menu_View$view_lower_menu_item = F2(
	function (menu_item, addl_view) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'lower-menu-item', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'lower-menu-item-selected',
								_1: _user$project$Menu_Item$selected(menu_item)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p2 = addl_view;
					if (_p2.ctor === 'Just') {
						return _p2._0;
					} else {
						return {ctor: '[]'};
					}
				}(),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Attributes$attribute,
								'href',
								_user$project$Menu_Item$uriToString(menu_item)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Menu_Item$linkTextToString(menu_item)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}));
	});
var _user$project$Menu_View$view_lower_menu = F3(
	function (_p3, profile, top_level_menu_msg) {
		var _p4 = _p3;
		return _elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$map,
				function (item) {
					return A2(_user$project$Menu_View$view_lower_menu_item, item, _elm_lang$core$Maybe$Nothing);
				},
				_p4._0));
	});
var _user$project$Menu_View$view_menu_item = F2(
	function (menu_item, addl_view) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'menu_item', _1: true},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'menu_item_selected',
								_1: _user$project$Menu_Item$selected(menu_item)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p5 = addl_view;
					if (_p5.ctor === 'Just') {
						return _p5._0;
					} else {
						return {ctor: '[]'};
					}
				}(),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Attributes$attribute,
								'href',
								_user$project$Menu_Item$uriToString(menu_item)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Menu_Item$linkTextToString(menu_item)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}));
	});

var _user$project$Views$view_preview = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'preview', _1: true},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'preview_menu', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'menu_item', _1: true},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'placeholder', 'Search texts..'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Views$view_footer = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'footer_items', _1: true},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'footer', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'message', _1: true},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _user$project$Views$view_report_problem = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', 'https://goo.gl/forms/Wn5wWVHdmBKOxsFt2'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Report a problem'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Views$view_give_feedback = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', 'https://goo.gl/forms/z5BKx36xBJR7XqQY2'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Please give us feedback!'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Views$view_logo = function (event_attr) {
	return A2(
		_elm_lang$html$Html$img,
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/star_logo.png'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('logo'),
					_1: {ctor: '[]'}
				}
			},
			event_attr),
		{ctor: '[]'});
};
var _user$project$Views$view_header = F2(
	function (top_menu_items, bottom_menu_items) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('header'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Views$view_logo(
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('menu'),
									_1: {ctor: '[]'}
								},
								top_menu_items),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('lower-menu'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id('lower-menu-items'),
									_1: {ctor: '[]'}
								},
								bottom_menu_items),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Views$view_unauthed_header = A2(
	_user$project$Views$view_header,
	{ctor: '[]'},
	{ctor: '[]'});
var _user$project$Views$view_authed_header = F3(
	function (profile, menu_items, top_level_menu_msg) {
		return A2(
			_user$project$Views$view_header,
			A3(_user$project$Menu_View$view_top_menu, menu_items, profile, top_level_menu_msg),
			A3(_user$project$Menu_View$view_lower_menu, menu_items, profile, top_level_menu_msg));
	});

var _user$project$Text_Translations_Word_Instance$normalizeToken = _elm_lang$core$String$toLower;
var _user$project$Text_Translations_Word_Instance$word = function (_p0) {
	var _p1 = _p0;
	return _p1._1;
};
var _user$project$Text_Translations_Word_Instance$textWord = function (_p2) {
	var _p3 = _p2;
	return _p3._2;
};
var _user$project$Text_Translations_Word_Instance$id = function (_p4) {
	var _p5 = _p4;
	return A2(
		_elm_lang$core$String$join,
		'_',
		{
			ctor: '::',
			_0: _elm_lang$core$Basics$toString(_p5._0),
			_1: {
				ctor: '::',
				_0: _p5._1,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Translations_Word_Instance$grammemes = function (word_instance) {
	var _p6 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
	if (_p6.ctor === 'Just') {
		return _user$project$Text_Translations_TextWord$grammemes(_p6._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Text_Translations_Word_Instance$grammemeKeys = _user$project$Text_Translations$expectedGrammemeKeys;
var _user$project$Text_Translations_Word_Instance$grammemeValue = F2(
	function (word_instance, grammeme_name) {
		var _p7 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
		if (_p7.ctor === 'Just') {
			return A2(_user$project$Text_Translations_TextWord$grammemeValue, _p7._0, grammeme_name);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Translations_Word_Instance$WordInstance = F3(
	function (a, b, c) {
		return {ctor: 'WordInstance', _0: a, _1: b, _2: c};
	});
var _user$project$Text_Translations_Word_Instance$new = F3(
	function (instance, token, text_word) {
		return A3(_user$project$Text_Translations_Word_Instance$WordInstance, instance, token, text_word);
	});

var _user$project$Text_Translations_Model$updateTranslationsForWord = F3(
	function (model, text_word, translation_text) {
		var phrase = _user$project$Text_Translations_TextWord$phrase(text_word);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				new_translations: A3(_elm_lang$core$Dict$insert, phrase, translation_text, model.new_translations)
			});
	});
var _user$project$Text_Translations_Model$getNewTranslationForWord = F2(
	function (model, text_word) {
		return A2(
			_elm_lang$core$Dict$get,
			_user$project$Text_Translations_TextWord$phrase(text_word),
			model.new_translations);
	});
var _user$project$Text_Translations_Model$setTextWordsForPhrase = F3(
	function (model, phrase, text_words) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				words: A3(
					_elm_lang$core$Dict$insert,
					_elm_lang$core$String$toLower(phrase),
					_elm_lang$core$Array$fromList(text_words),
					model.words)
			});
	});
var _user$project$Text_Translations_Model$editingWordInstance = F2(
	function (model, word_instance) {
		return A2(
			_elm_lang$core$Dict$member,
			_user$project$Text_Translations_Word_Instance$id(word_instance),
			model.editing_word_instances);
	});
var _user$project$Text_Translations_Model$uneditAllWords = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{editing_words: _elm_lang$core$Dict$empty, editing_word_instances: _elm_lang$core$Dict$empty});
};
var _user$project$Text_Translations_Model$editWord = F2(
	function (model, word_instance) {
		var word_instance_id = _user$project$Text_Translations_Word_Instance$id(word_instance);
		var new_editing_word_instances = A3(_elm_lang$core$Dict$insert, word_instance_id, true, model.editing_word_instances);
		var normalized_word = _elm_lang$core$String$toLower(
			_user$project$Text_Translations_Word_Instance$word(word_instance));
		var new_edited_words = function () {
			var _p0 = A2(_elm_lang$core$Dict$get, normalized_word, model.editing_words);
			if (_p0.ctor === 'Just') {
				return A3(_elm_lang$core$Dict$insert, normalized_word, _p0._0 + 1, model.editing_words);
			} else {
				return A3(_elm_lang$core$Dict$insert, normalized_word, 0, model.editing_words);
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{editing_words: new_edited_words, editing_word_instances: new_editing_word_instances});
	});
var _user$project$Text_Translations_Model$editingWord = F2(
	function (model, word) {
		return A2(
			_elm_lang$core$Dict$member,
			_elm_lang$core$String$toLower(word),
			model.editing_words);
	});
var _user$project$Text_Translations_Model$getTextWords = F2(
	function (model, phrase) {
		return A2(_elm_lang$core$Dict$get, phrase, model.words);
	});
var _user$project$Text_Translations_Model$getTextWord = F3(
	function (model, instance, phrase) {
		var _p1 = A2(_user$project$Text_Translations_Model$getTextWords, model, phrase);
		if (_p1.ctor === 'Just') {
			return A2(_elm_lang$core$Array$get, instance, _p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Translations_Model$setTextWord = F4(
	function (model, instance, phrase, text_word) {
		var new_text_words = function () {
			var _p2 = A2(_user$project$Text_Translations_Model$getTextWords, model, phrase);
			if (_p2.ctor === 'Just') {
				return A3(_elm_lang$core$Array$set, instance, text_word, _p2._0);
			} else {
				return _elm_lang$core$Array$fromList(
					{
						ctor: '::',
						_0: text_word,
						_1: {ctor: '[]'}
					});
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				words: A3(_elm_lang$core$Dict$insert, phrase, new_text_words, model.words)
			});
	});
var _user$project$Text_Translations_Model$updateTextTranslation = F4(
	function (model, instance, word, translation) {
		var _p3 = A3(_user$project$Text_Translations_Model$getTextWord, model, instance, word);
		if (_p3.ctor === 'Just') {
			var new_text_word = A2(
				_user$project$Text_Translations_TextWord$updateTranslation,
				_user$project$Text_Translations_TextWord$setNoTRCorrectForContext(_p3._0),
				translation);
			return A4(_user$project$Text_Translations_Model$setTextWord, model, instance, word, new_text_word);
		} else {
			return model;
		}
	});
var _user$project$Text_Translations_Model$addTextTranslation = F4(
	function (model, instance, word, translation) {
		var _p4 = A3(_user$project$Text_Translations_Model$getTextWord, model, instance, word);
		if (_p4.ctor === 'Just') {
			var new_text_word = A2(_user$project$Text_Translations_TextWord$addTranslation, _p4._0, translation);
			return A4(_user$project$Text_Translations_Model$setTextWord, model, instance, word, new_text_word);
		} else {
			return model;
		}
	});
var _user$project$Text_Translations_Model$removeTextTranslation = F4(
	function (model, instance, word, translation) {
		var _p5 = A3(_user$project$Text_Translations_Model$getTextWord, model, instance, word);
		if (_p5.ctor === 'Just') {
			var new_text_word = A2(_user$project$Text_Translations_TextWord$removeTranslation, _p5._0, translation);
			return A4(_user$project$Text_Translations_Model$setTextWord, model, instance, word, new_text_word);
		} else {
			return model;
		}
	});
var _user$project$Text_Translations_Model$instanceCount = F2(
	function (model, word) {
		var _p6 = A2(_user$project$Text_Translations_Model$getTextWords, model, word);
		if (_p6.ctor === 'Just') {
			return _elm_lang$core$Array$length(_p6._0);
		} else {
			return 0;
		}
	});
var _user$project$Text_Translations_Model$removeFromMergeWords = F2(
	function (model, word_instance) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				merging_words: A2(
					_elm_lang$core$Dict$remove,
					_user$project$Text_Translations_Word_Instance$id(word_instance),
					model.merging_words)
			});
	});
var _user$project$Text_Translations_Model$addToMergeWords = F2(
	function (model, word_instance) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				merging_words: A3(
					_elm_lang$core$Dict$insert,
					_user$project$Text_Translations_Word_Instance$id(word_instance),
					word_instance,
					model.merging_words)
			});
	});
var _user$project$Text_Translations_Model$mergingWord = F2(
	function (model, word_instance) {
		return A2(
			_elm_lang$core$Dict$member,
			_user$project$Text_Translations_Word_Instance$id(word_instance),
			model.merging_words);
	});
var _user$project$Text_Translations_Model$mergingWords = function (model) {
	return model.merging_words;
};
var _user$project$Text_Translations_Model$isMergingWords = function (model) {
	return !_elm_lang$core$Dict$isEmpty(model.merging_words);
};
var _user$project$Text_Translations_Model$cancelMerge = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{merging_words: _elm_lang$core$Dict$empty});
};
var _user$project$Text_Translations_Model$uneditWord = F2(
	function (model, word_instance) {
		var cancelled_merge_model = _user$project$Text_Translations_Model$cancelMerge(model);
		var word_instance_id = _user$project$Text_Translations_Word_Instance$id(word_instance);
		var new_editing_word_instances = A2(_elm_lang$core$Dict$remove, word_instance_id, model.editing_word_instances);
		var word = _user$project$Text_Translations_Word_Instance$word(word_instance);
		var normalized_word = _elm_lang$core$String$toLower(word);
		var new_edited_words = function () {
			var _p7 = A2(_elm_lang$core$Dict$get, normalized_word, model.editing_words);
			if (_p7.ctor === 'Just') {
				var _p8 = _p7._0;
				return _elm_lang$core$Native_Utils.eq(_p8 - 1, -1) ? A2(_elm_lang$core$Dict$remove, normalized_word, model.editing_words) : A3(_elm_lang$core$Dict$insert, normalized_word, _p8 - 1, model.editing_words);
			} else {
				return model.editing_words;
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			cancelled_merge_model,
			{editing_words: new_edited_words, editing_word_instances: new_editing_word_instances, editing_grammemes: _elm_lang$core$Dict$empty});
	});
var _user$project$Text_Translations_Model$mergeSiblings = F2(
	function (model, word_instance) {
		return _elm_lang$core$Dict$values(
			A2(
				_elm_lang$core$Dict$remove,
				_user$project$Text_Translations_Word_Instance$id(word_instance),
				_user$project$Text_Translations_Model$mergingWords(model)));
	});
var _user$project$Text_Translations_Model$mergeState = F2(
	function (model, word_instance) {
		var other_merging_words = A2(_user$project$Text_Translations_Model$mergeSiblings, model, word_instance);
		var _p9 = A2(_user$project$Text_Translations_Model$mergingWord, model, word_instance);
		if (_p9 === true) {
			var _p10 = _elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(other_merging_words),
				1) > -1;
			if (_p10 === true) {
				return _elm_lang$core$Maybe$Just(_user$project$Text_Translations$Mergeable);
			} else {
				return _elm_lang$core$Maybe$Just(_user$project$Text_Translations$Cancelable);
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Translations_Model$mergingWordInstances = function (model) {
	return _elm_lang$core$Dict$values(
		_user$project$Text_Translations_Model$mergingWords(model));
};
var _user$project$Text_Translations_Model$newWordInstance = F3(
	function (model, instance, token) {
		return A3(
			_user$project$Text_Translations_Word_Instance$new,
			instance,
			token,
			A3(_user$project$Text_Translations_Model$getTextWord, model, instance, token));
	});
var _user$project$Text_Translations_Model$editingGrammeme = function (model) {
	var first_grammeme_name = 'aspect';
	return A2(_elm_lang$core$Maybe$withDefault, first_grammeme_name, model.editing_grammeme);
};
var _user$project$Text_Translations_Model$editingGrammemeValue = F2(
	function (model, word_instance) {
		var grammeme_name = _user$project$Text_Translations_Model$editingGrammeme(model);
		var word_instance_grammemes = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(_user$project$Text_Translations_Word_Instance$grammemeValue, word_instance, grammeme_name));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			word_instance_grammemes,
			A2(_elm_lang$core$Dict$get, grammeme_name, model.editing_grammemes));
	});
var _user$project$Text_Translations_Model$inputGrammeme = F2(
	function (model, new_grammeme_value) {
		var old_grammeme_value = _user$project$Text_Translations_Model$editingGrammemeValue(model);
		var editing_grammeme_name = _user$project$Text_Translations_Model$editingGrammeme(model);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				editing_grammemes: A3(_elm_lang$core$Dict$insert, editing_grammeme_name, new_grammeme_value, model.editing_grammemes)
			});
	});
var _user$project$Text_Translations_Model$selectGrammemeForEditing = F2(
	function (model, grammeme_name) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				editing_grammeme: _elm_lang$core$Maybe$Just(grammeme_name)
			});
	});
var _user$project$Text_Translations_Model$clearEditingFields = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{editing_grammemes: _elm_lang$core$Dict$empty});
};
var _user$project$Text_Translations_Model$setTextWords = F2(
	function (model, text_words) {
		var new_model = _user$project$Text_Translations_Model$clearEditingFields(model);
		var sorted_text_words = A2(
			_elm_lang$core$List$sortBy,
			function (text_word) {
				return _user$project$Text_Translations_TextWord$instance(text_word);
			},
			text_words);
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (text_word, model) {
					var instance = _user$project$Text_Translations_TextWord$instance(text_word);
					var phrase = _user$project$Text_Translations_TextWord$phrase(text_word);
					return A4(_user$project$Text_Translations_Model$setTextWord, model, instance, phrase, text_word);
				}),
			new_model,
			sorted_text_words);
	});
var _user$project$Text_Translations_Model$completeMerge = F4(
	function (model, phrase, instance, text_words) {
		var new_model = _user$project$Text_Translations_Model$uneditAllWords(
			_user$project$Text_Translations_Model$cancelMerge(
				A2(_user$project$Text_Translations_Model$setTextWords, model, text_words)));
		var merged_word_instance = A3(_user$project$Text_Translations_Model$newWordInstance, new_model, instance, phrase);
		return A2(_user$project$Text_Translations_Model$editWord, new_model, merged_word_instance);
	});
var _user$project$Text_Translations_Model$init = F2(
	function (flags, text) {
		return {words: _elm_lang$core$Dict$empty, merging_words: _elm_lang$core$Dict$empty, editing_words: _elm_lang$core$Dict$empty, editing_grammeme: _elm_lang$core$Maybe$Nothing, editing_grammemes: _elm_lang$core$Dict$empty, editing_word_instances: _elm_lang$core$Dict$empty, text: text, new_translations: _elm_lang$core$Dict$empty, flags: flags};
	});
var _user$project$Text_Translations_Model$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {words: a, merging_words: b, editing_grammeme: c, editing_grammemes: d, editing_words: e, editing_word_instances: f, text: g, new_translations: h, flags: i};
	});

var _user$project$Text_Translations_Msg$DeletedTranslation = function (a) {
	return {ctor: 'DeletedTranslation', _0: a};
};
var _user$project$Text_Translations_Msg$SubmittedTextTranslation = function (a) {
	return {ctor: 'SubmittedTextTranslation', _0: a};
};
var _user$project$Text_Translations_Msg$UpdateTextTranslation = function (a) {
	return {ctor: 'UpdateTextTranslation', _0: a};
};
var _user$project$Text_Translations_Msg$UpdateTextTranslations = function (a) {
	return {ctor: 'UpdateTextTranslations', _0: a};
};
var _user$project$Text_Translations_Msg$UpdatedTextWords = function (a) {
	return {ctor: 'UpdatedTextWords', _0: a};
};
var _user$project$Text_Translations_Msg$UpdatedTextWord = function (a) {
	return {ctor: 'UpdatedTextWord', _0: a};
};
var _user$project$Text_Translations_Msg$DeletedTextWord = function (a) {
	return {ctor: 'DeletedTextWord', _0: a};
};
var _user$project$Text_Translations_Msg$MergedWords = function (a) {
	return {ctor: 'MergedWords', _0: a};
};
var _user$project$Text_Translations_Msg$RemoveGrammeme = F2(
	function (a, b) {
		return {ctor: 'RemoveGrammeme', _0: a, _1: b};
	});
var _user$project$Text_Translations_Msg$SaveEditedGrammemes = function (a) {
	return {ctor: 'SaveEditedGrammemes', _0: a};
};
var _user$project$Text_Translations_Msg$InputGrammeme = F2(
	function (a, b) {
		return {ctor: 'InputGrammeme', _0: a, _1: b};
	});
var _user$project$Text_Translations_Msg$SelectGrammemeForEditing = F2(
	function (a, b) {
		return {ctor: 'SelectGrammemeForEditing', _0: a, _1: b};
	});
var _user$project$Text_Translations_Msg$MatchTranslations = function (a) {
	return {ctor: 'MatchTranslations', _0: a};
};
var _user$project$Text_Translations_Msg$DeleteTranslation = F2(
	function (a, b) {
		return {ctor: 'DeleteTranslation', _0: a, _1: b};
	});
var _user$project$Text_Translations_Msg$SubmitNewTranslationForTextWord = function (a) {
	return {ctor: 'SubmitNewTranslationForTextWord', _0: a};
};
var _user$project$Text_Translations_Msg$UpdateNewTranslationForTextWord = F2(
	function (a, b) {
		return {ctor: 'UpdateNewTranslationForTextWord', _0: a, _1: b};
	});
var _user$project$Text_Translations_Msg$MakeCorrectForContext = function (a) {
	return {ctor: 'MakeCorrectForContext', _0: a};
};
var _user$project$Text_Translations_Msg$DeleteTextWord = function (a) {
	return {ctor: 'DeleteTextWord', _0: a};
};
var _user$project$Text_Translations_Msg$CloseEditWord = function (a) {
	return {ctor: 'CloseEditWord', _0: a};
};
var _user$project$Text_Translations_Msg$EditWord = function (a) {
	return {ctor: 'EditWord', _0: a};
};
var _user$project$Text_Translations_Msg$AddTextWord = function (a) {
	return {ctor: 'AddTextWord', _0: a};
};
var _user$project$Text_Translations_Msg$MergeWords = function (a) {
	return {ctor: 'MergeWords', _0: a};
};
var _user$project$Text_Translations_Msg$RemoveFromMergeWords = function (a) {
	return {ctor: 'RemoveFromMergeWords', _0: a};
};
var _user$project$Text_Translations_Msg$AddToMergeWords = function (a) {
	return {ctor: 'AddToMergeWords', _0: a};
};

var _user$project$Question_Decode$questionDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'question_type',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'answers',
		_user$project$Answer_Decode$answersDecoder,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'order',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'body',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'modified_dt',
					_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'created_dt',
						_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'text_section_id',
							_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'id',
								_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Question_Model$Question)))))))));
var _user$project$Question_Decode$questionsDecoder = _elm_lang$core$Json_Decode$array(_user$project$Question_Decode$questionDecoder);

var _user$project$Text_Section_Decode$textSectionDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'questions',
	_user$project$Question_Decode$questionsDecoder,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'question_count',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'body',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'order',
				_elm_lang$core$Json_Decode$int,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Section_Model$TextSection)))));
var _user$project$Text_Section_Decode$textSectionsDecoder = _elm_lang$core$Json_Decode$list(_user$project$Text_Section_Decode$textSectionDecoder);
var _user$project$Text_Section_Decode$TextCreateResp = function (a) {
	return {id: a};
};

var _user$project$Text_Decode$decodeRespErrors = function (str) {
	return A2(
		_elm_lang$core$Json_Decode$decodeString,
		A2(
			_elm_lang$core$Json_Decode$field,
			'errors',
			_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string)),
		str);
};
var _user$project$Text_Decode$textDifficultyDecoder = _user$project$Util$stringTupleDecoder;
var _user$project$Text_Decode$textDifficultiesDecoder = _elm_lang$core$Json_Decode$list(_user$project$Text_Decode$textDifficultyDecoder);
var _user$project$Text_Decode$textListItemDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'write_locker',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'uri',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'questions_correct',
			_elm_lang$core$Json_Decode$nullable(_user$project$Util$intTupleDecoder),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'text_sections_complete',
				_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'text_section_count',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'last_read_dt',
						_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'modified_dt',
							_elm_community$json_extra$Json_Decode_Extra$date,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'created_dt',
								_elm_community$json_extra$Json_Decode_Extra$date,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'tags',
									_elm_lang$core$Json_Decode$nullable(
										_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'last_modified_by',
										_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'created_by',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'difficulty',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'author',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'title',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'id',
															_elm_lang$core$Json_Decode$int,
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Model$TextListItem))))))))))))))));
var _user$project$Text_Decode$textListDecoder = _elm_lang$core$Json_Decode$list(_user$project$Text_Decode$textListItemDecoder);
var _user$project$Text_Decode$textDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'words',
	_user$project$Text_Translations_Decode$wordsDecoder,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'write_locker',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'text_sections',
			A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Array$fromList, _user$project$Text_Section_Decode$textSectionsDecoder),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'modified_dt',
				_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'created_dt',
					_elm_lang$core$Json_Decode$nullable(_elm_community$json_extra$Json_Decode_Extra$date),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'tags',
						_elm_lang$core$Json_Decode$nullable(
							_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'last_modified_by',
							_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'created_by',
								_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'conclusion',
									_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'difficulty',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'source',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'author',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'introduction',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'title',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'id',
															_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Model$Text))))))))))))))));
var _user$project$Text_Decode$TextCreateResp = F2(
	function (a, b) {
		return {id: a, redirect: b};
	});
var _user$project$Text_Decode$textCreateRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'redirect',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'id',
		_elm_lang$core$Json_Decode$int,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Decode$TextCreateResp)));
var _user$project$Text_Decode$TextUpdateResp = F2(
	function (a, b) {
		return {id: a, updated: b};
	});
var _user$project$Text_Decode$textUpdateRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'updated',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'id',
		_elm_lang$core$Json_Decode$int,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Decode$TextUpdateResp)));
var _user$project$Text_Decode$TextDeleteResp = F3(
	function (a, b, c) {
		return {id: a, redirect: b, deleted: c};
	});
var _user$project$Text_Decode$textDeleteRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'deleted',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'redirect',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'id',
			_elm_lang$core$Json_Decode$int,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Decode$TextDeleteResp))));
var _user$project$Text_Decode$TextLockResp = function (a) {
	return {locked: a};
};
var _user$project$Text_Decode$textLockRespDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'locked',
	_elm_lang$core$Json_Decode$bool,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Decode$TextLockResp));
var _user$project$Text_Decode$TextProgressUpdateResp = function (a) {
	return {updated: a};
};
var _user$project$Text_Decode$textProgressDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'updated',
	_elm_lang$core$Json_Decode$bool,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Text_Decode$TextProgressUpdateResp));

var _user$project$Text_Create$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {flags: a, mode: b, profile: c, menu_items: d, success_msg: e, error_msg: f, text_component: g, text_difficulties: h, text_translations_model: i, tags: j, write_locked: k, selected_tab: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Text_Create$TextViewParams = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {text: a, text_component: b, text_fields: c, profile: d, tags: e, selected_tab: f, write_locked: g, mode: h, text_difficulties: i, text_translations_model: j, text_translation_msg: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Text_Create$ReadOnlyMode = function (a) {
	return {ctor: 'ReadOnlyMode', _0: a};
};
var _user$project$Text_Create$CreateMode = {ctor: 'CreateMode'};
var _user$project$Text_Create$EditMode = {ctor: 'EditMode'};
var _user$project$Text_Create$TranslationsTab = {ctor: 'TranslationsTab'};
var _user$project$Text_Create$TextTab = {ctor: 'TextTab'};
var _user$project$Text_Create$Conclusion = function (a) {
	return {ctor: 'Conclusion', _0: a};
};
var _user$project$Text_Create$Difficulty = function (a) {
	return {ctor: 'Difficulty', _0: a};
};
var _user$project$Text_Create$Source = function (a) {
	return {ctor: 'Source', _0: a};
};
var _user$project$Text_Create$Author = function (a) {
	return {ctor: 'Author', _0: a};
};
var _user$project$Text_Create$Tags = function (a) {
	return {ctor: 'Tags', _0: a};
};
var _user$project$Text_Create$Intro = function (a) {
	return {ctor: 'Intro', _0: a};
};
var _user$project$Text_Create$Title = function (a) {
	return {ctor: 'Title', _0: a};
};
var _user$project$Text_Create$LoggedOut = function (a) {
	return {ctor: 'LoggedOut', _0: a};
};
var _user$project$Text_Create$LogOut = function (a) {
	return {ctor: 'LogOut', _0: a};
};
var _user$project$Text_Create$ToggleTab = function (a) {
	return {ctor: 'ToggleTab', _0: a};
};
var _user$project$Text_Create$InitTextFieldEditors = {ctor: 'InitTextFieldEditors'};
var _user$project$Text_Create$TextDelete = function (a) {
	return {ctor: 'TextDelete', _0: a};
};
var _user$project$Text_Create$ConfirmTextDelete = function (a) {
	return {ctor: 'ConfirmTextDelete', _0: a};
};
var _user$project$Text_Create$DeleteText = {ctor: 'DeleteText'};
var _user$project$Text_Create$TextUnlocked = function (a) {
	return {ctor: 'TextUnlocked', _0: a};
};
var _user$project$Text_Create$TextLocked = function (a) {
	return {ctor: 'TextLocked', _0: a};
};
var _user$project$Text_Create$ToggleLock = {ctor: 'ToggleLock'};
var _user$project$Text_Create$DeleteTag = function (a) {
	return {ctor: 'DeleteTag', _0: a};
};
var _user$project$Text_Create$AddTagInput = F2(
	function (a, b) {
		return {ctor: 'AddTagInput', _0: a, _1: b};
	});
var _user$project$Text_Create$ClearMessages = function (a) {
	return {ctor: 'ClearMessages', _0: a};
};
var _user$project$Text_Create$TextTagsDecode = function (a) {
	return {ctor: 'TextTagsDecode', _0: a};
};
var _user$project$Text_Create$TextJSONDecode = function (a) {
	return {ctor: 'TextJSONDecode', _0: a};
};
var _user$project$Text_Create$UpdateTextCkEditors = function (a) {
	return {ctor: 'UpdateTextCkEditors', _0: a};
};
var _user$project$Text_Create$UpdateTextAttributes = F2(
	function (a, b) {
		return {ctor: 'UpdateTextAttributes', _0: a, _1: b};
	});
var _user$project$Text_Create$ToggleEditable = F2(
	function (a, b) {
		return {ctor: 'ToggleEditable', _0: a, _1: b};
	});
var _user$project$Text_Create$TextComponentMsg = function (a) {
	return {ctor: 'TextComponentMsg', _0: a};
};
var _user$project$Text_Create$Updated = function (a) {
	return {ctor: 'Updated', _0: a};
};
var _user$project$Text_Create$Submitted = function (a) {
	return {ctor: 'Submitted', _0: a};
};
var _user$project$Text_Create$SubmitText = {ctor: 'SubmitText'};
var _user$project$Text_Create$TextTranslationMsg = function (a) {
	return {ctor: 'TextTranslationMsg', _0: a};
};
var _user$project$Text_Create$UpdateTextDifficultyOptions = function (a) {
	return {ctor: 'UpdateTextDifficultyOptions', _0: a};
};

var _user$project$Question_View$view_delete_selected = F2(
	function (msg, text_component) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'delete_question', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						msg(
							_user$project$Text_Update$DeleteSelectedQuestions(text_component))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/delete_question.svg'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '20px'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '20px'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Delete Selected Question'),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Question_View$view_add_question = F2(
	function (msg, text_component) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'add_question', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						msg(
							_user$project$Text_Update$AddQuestion(text_component))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/add.svg'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '20px'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '20px'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Add Question'),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Question_View$view_question_buttons = F2(
	function (msg, text_component) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'question_buttons', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(_user$project$Question_View$view_add_question, msg, text_component),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Question_View$view_delete_selected, msg, text_component),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Question_View$view_question_type_menu_item = F2(
	function (params, field) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(params.question.question_type, 'main_idea') ? A2(
					_elm_lang$html$Html$strong,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Main Idea'),
						_1: {ctor: '[]'}
					}) : A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							params.msg(
								A2(
									_user$project$Text_Update$UpdateQuestionField,
									params.text_section_component,
									A2(_user$project$Question_Field$set_question_type, field, _user$project$Question_Field$MainIdea)))),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Main Idea'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' | '),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(params.question.question_type, 'detail') ? A2(
							_elm_lang$html$Html$strong,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Detail'),
								_1: {ctor: '[]'}
							}) : A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									params.msg(
										A2(
											_user$project$Text_Update$UpdateQuestionField,
											params.text_section_component,
											A2(_user$project$Question_Field$set_question_type, field, _user$project$Question_Field$Detail)))),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Detail'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Question_View$view_delete_menu_item = F2(
	function (params, field) {
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					params.msg(
						A2(_user$project$Text_Update$DeleteQuestion, params.text_section_component, field))),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Delete'),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Question_View$view_menu_items = F2(
	function (params, field) {
		return A2(
			_elm_lang$core$List$map,
			function (html) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'question_menu_item'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: html,
						_1: {ctor: '[]'}
					});
			},
			{
				ctor: '::',
				_0: A2(_user$project$Question_View$view_delete_menu_item, params, field),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Question_View$view_question_type_menu_item, params, field),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Question_View$view_question_menu = F2(
	function (params, field) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'question_menu', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/action_arrow.svg'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										params.msg(
											A2(_user$project$Text_Update$ToggleQuestionMenu, params.text_section_component, field))),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'question_menu_overlay', _1: true},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'hidden',
											_1: !_user$project$Question_Field$menu_visible(field)
										},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						A2(_user$project$Question_View$view_menu_items, params, field)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Question_View$toggle_editable = F3(
	function (event, params, field) {
		return event(
			params.msg(
				A2(
					_user$project$Text_Update$ToggleEditable,
					params.text_section_component,
					_user$project$Text_Update$Question(field))));
	});
var _user$project$Question_View$edit_question = F2(
	function (params, field) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'question_item', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'rows', '2'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'cols', '100'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Attributes$attribute,
									'id',
									_user$project$Question_Field$id(field)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										function (_p0) {
											return params.msg(
												A3(_user$project$Text_Update$UpdateQuestionFieldValue, params.text_section_component, field, _p0));
										}),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Question_View$toggle_editable, _elm_lang$html$Html_Events$onBlur, params, field),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(params.question.body),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Question_View$view_question = F2(
	function (params, question_field) {
		var question_field_attrs = _user$project$Question_Field$attributes(question_field);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', question_field_attrs.id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'question_item', _1: true},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'editable', _1: true},
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A3(_user$project$Question_View$toggle_editable, _elm_lang$html$Html_Events$onClick, params, question_field),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$String$isEmpty(params.question.body) ? 'Click to write the question text.' : params.question.body),
					_1: {ctor: '[]'}
				},
				question_field_attrs.error ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(question_field_attrs.error_string),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Question_View$view_editable_question = F3(
	function (msg, text_section_component, field) {
		var num_of_answers = _elm_lang$core$Array$length(
			_user$project$Question_Field$answers(field));
		var params = {
			text_section_component: text_section_component,
			question: _user$project$Question_Field$question(field),
			msg: msg
		};
		var question_field_attrs = _user$project$Question_Field$attributes(field);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'question_parts', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'input_error', _1: question_field_attrs.error},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'checkbox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onCheck(
										function (_p1) {
											return msg(
												A3(_user$project$Text_Update$SelectQuestion, text_section_component, field, _p1));
										}),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'question', _1: true},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: function () {
									var _p2 = _user$project$Question_Field$editable(field);
									if (_p2 === true) {
										return A2(_user$project$Question_View$edit_question, params, field);
									} else {
										return A2(_user$project$Question_View$view_question, params, field);
									}
								}(),
								_1: {ctor: '[]'}
							},
							_elm_lang$core$Array$toList(
								A2(
									_elm_lang$core$Array$map,
									A2(_user$project$Answer_View$view_editable_answer, params, num_of_answers),
									_user$project$Question_Field$answers(field))))),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Question_View$view_question_menu, params, field),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Question_View$view_questions = F3(
	function (msg, text_component, fields) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'question_section', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$map,
					A2(_user$project$Question_View$view_editable_question, msg, text_component),
					fields)));
	});
var _user$project$Question_View$QuestionFieldParams = F3(
	function (a, b, c) {
		return {text_section_component: a, question: b, msg: c};
	});

var _user$project$Text_Section_View$toggle_editable = F2(
	function (event, params) {
		return event(
			params.msg(
				A2(
					_user$project$Text_Update$ToggleEditable,
					params.text_section_component,
					_user$project$Text_Update$Text(params.field))));
	});
var _user$project$Text_Section_View$edit_body = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', params.field.id),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(
							function (_p0) {
								return params.msg(
									A3(_user$project$Text_Update$UpdateTextValue, params.text_section_component, 'body', _p0));
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(params.text_section.body),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Text_Section_View$view_body = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', params.field.id),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Text_Section_View$toggle_editable, _elm_lang$html$Html_Events$onClick, params),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'input_error', _1: params.field.error},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text_property'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'editable'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(params.text_section.body),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			params.field.error ? {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(params.field.error_string),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			} : {ctor: '[]'}));
};
var _user$project$Text_Section_View$view_editable = F3(
	function (params, view, edit) {
		var _p1 = _user$project$Text_Section_Component$editable(params.field);
		if (_p1 === true) {
			return edit(params);
		} else {
			return view(params);
		}
	});
var _user$project$Text_Section_View$view_text_section_component = F3(
	function (msg, text_difficulties, text_section_component) {
		var body_field = _user$project$Text_Section_Component$body(text_section_component);
		var text_section = _user$project$Text_Section_Component$text_section(text_section_component);
		var params = function (field) {
			return {text_section_component: text_section_component, text_section: text_section, msg: msg, difficulties: text_difficulties, field: field};
		};
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text_properties', _1: true},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$classList(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'body', _1: true},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'Text Section ',
														_elm_lang$core$Basics$toString(text_section.order + 1))),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A3(
												_user$project$Text_Section_View$view_editable,
												params(body_field),
												_user$project$Text_Section_View$view_body,
												_user$project$Text_Section_View$edit_body),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A3(
							_user$project$Question_View$view_questions,
							msg,
							text_section_component,
							_user$project$Text_Section_Component$question_fields(text_section_component)),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Question_View$view_question_buttons, msg, text_section_component),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('cursor'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												msg(
													_user$project$Text_Update$DeleteTextSection(text_section_component))),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$img,
											{
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/delete.svg'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '18px'),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '18px'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' Delete Text Section'),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					})),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Text_Section_View$view_text_section_components = F3(
	function (msg, text_components, text_difficulties) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text_sections'),
				_1: {ctor: '[]'}
			},
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{ctor: '[]'},
				_elm_lang$core$Array$toList(
					A2(
						_elm_lang$core$Array$map,
						A2(_user$project$Text_Section_View$view_text_section_component, msg, text_difficulties),
						_user$project$Text_Section_Component_Group$toArray(text_components)))));
	});
var _user$project$Text_Section_View$TextField = F5(
	function (a, b, c, d, e) {
		return {text_section_component: a, msg: b, text_section: c, difficulties: d, field: e};
	});

var _user$project$Text_Tags_View$view_tag = F2(
	function (delete_msg, tag) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text_tag'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/cancel.svg'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '13px'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '13px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('cursor'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											delete_msg(tag)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(tag),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Tags_View$view_tags = F5(
	function (id, tag_list, tags, _p0, text_tag_attrs) {
		var _p1 = _p0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'text_tags'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_tag_attrs.error},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$datalist,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'tag_list'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
							_1: {ctor: '[]'}
						}
					},
					A2(
						_elm_lang$core$List$map,
						function (tag) {
							return A2(
								_elm_lang$html$Html$option,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', tag),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(tag),
									_1: {ctor: '[]'}
								});
						},
						tag_list)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('text_tags'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							_user$project$Text_Tags_View$view_tag(_p1._1),
							_elm_lang$core$Dict$keys(tags))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', id),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'placeholder', 'add tags..'),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'list', 'tag_list'),
												_1: {
													ctor: '::',
													_0: _p1._0,
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$classList(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'error', _1: text_tag_attrs.error},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(text_tag_attrs.error_string),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});

var _user$project$Text_Section_Words_Tag$parseCompoundWord = F3(
	function (is_part_of_compound_word, _p1, _p0) {
		var _p2 = _p1;
		var _p10 = _p2._0;
		var _p9 = _p2._1;
		var _p3 = _p0;
		var _p8 = _p3._0;
		var _p7 = _p3._1._1;
		var _p4 = A2(is_part_of_compound_word, _p9, _p10);
		if (_p4.ctor === 'Just') {
			var _p6 = _p4._0._1;
			var _p5 = _elm_lang$core$Native_Utils.eq(_p6, _p3._1._0);
			if (_p5 === true) {
				if (_elm_lang$core$Native_Utils.eq(_p6 + 1, _p4._0._2)) {
					var compound_word = A2(
						_elm_lang$core$String$join,
						' ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p7,
							{
								ctor: '::',
								_0: _p10,
								_1: {ctor: '[]'}
							}));
					var compound_word_instance = {ctor: '_Tuple2', _0: compound_word, _1: _p4._0._0};
					return {
						ctor: '_Tuple2',
						_0: A2(
							_elm_lang$core$Basics_ops['++'],
							_p8,
							{
								ctor: '::',
								_0: compound_word_instance,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '_Tuple2',
							_0: 0,
							_1: {ctor: '[]'}
						}
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _p8,
						_1: {
							ctor: '_Tuple2',
							_0: _p6 + 1,
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								_p7,
								{
									ctor: '::',
									_0: _p10,
									_1: {ctor: '[]'}
								})
						}
					};
				}
			} else {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_p8,
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p10, _1: _p9},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '_Tuple2',
						_0: 0,
						_1: {ctor: '[]'}
					}
				};
			}
		} else {
			return {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					_p8,
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p10, _1: _p9},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '_Tuple2',
					_0: 0,
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _user$project$Text_Section_Words_Tag$parseCompoundWords = F2(
	function (is_part_of_compound_word, token_occurrences) {
		var _p11 = A3(
			_elm_lang$core$List$foldl,
			_user$project$Text_Section_Words_Tag$parseCompoundWord(is_part_of_compound_word),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {
					ctor: '_Tuple2',
					_0: 0,
					_1: {ctor: '[]'}
				}
			},
			token_occurrences);
		var token_occurrences_with_compound_words = _p11._0;
		return token_occurrences_with_compound_words;
	});
var _user$project$Text_Section_Words_Tag$countOccurrence = F2(
	function (token, _p12) {
		var _p13 = _p12;
		var _p14 = _p13._1;
		var normalized_token = _elm_lang$core$String$toLower(token);
		var num_of_prev_occurrences = A2(
			_elm_lang$core$Maybe$withDefault,
			-1,
			A2(_elm_lang$core$Dict$get, normalized_token, _p14));
		var instance = num_of_prev_occurrences + 1;
		var new_tokens = A2(
			_elm_lang$core$Basics_ops['++'],
			_p13._0,
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: token, _1: instance},
				_1: {ctor: '[]'}
			});
		var new_occurrences = A3(_elm_lang$core$Dict$insert, normalized_token, instance, _p14);
		return {ctor: '_Tuple2', _0: new_tokens, _1: new_occurrences};
	});
var _user$project$Text_Section_Words_Tag$countOccurrences = F2(
	function (words, occurrences) {
		return A3(
			_elm_lang$core$List$foldl,
			_user$project$Text_Section_Words_Tag$countOccurrence,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: occurrences
			},
			words);
	});
var _user$project$Text_Section_Words_Tag$punctuation_re = _elm_lang$core$Regex$regex('[?!.,»«—\\-();]');
var _user$project$Text_Section_Words_Tag$has_punctuation = _elm_lang$core$Regex$contains(_user$project$Text_Section_Words_Tag$punctuation_re);
var _user$project$Text_Section_Words_Tag$intersperseWordsWith = F3(
	function (str, _p15, tokens) {
		var _p16 = _p15;
		var _p18 = _p16;
		var _p17 = _user$project$Text_Section_Words_Tag$has_punctuation(_p16._0);
		if (_p17 === true) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				tokens,
				{
					ctor: '::',
					_0: _p18,
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				tokens,
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: str, _1: 0},
					_1: {
						ctor: '::',
						_0: _p18,
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _user$project$Text_Section_Words_Tag$intersperseWithWhitespace = function (word_tokens) {
	return A3(
		_elm_lang$core$List$foldl,
		_user$project$Text_Section_Words_Tag$intersperseWordsWith(' '),
		{ctor: '[]'},
		word_tokens);
};
var _user$project$Text_Section_Words_Tag$maybeParseWordWithPunctuation = function (str) {
	var end_of_str_index = _elm_lang$core$String$length(str);
	var matches = A3(
		_elm_lang$core$Regex$find,
		_elm_lang$core$Regex$AtMost(1),
		_user$project$Text_Section_Words_Tag$punctuation_re,
		str);
	var _p19 = matches;
	if ((_p19.ctor === '::') && (_p19._1.ctor === '[]')) {
		var _p20 = _p19._0;
		var word = A3(_elm_lang$core$String$slice, 0, _p20.index, str);
		var end_of_match_index = _p20.index + 1;
		var punctuation_char = A3(_elm_lang$core$String$slice, _p20.index, end_of_match_index, str);
		var rest_of_str = A3(_elm_lang$core$String$slice, end_of_match_index, end_of_str_index, str);
		return {
			ctor: '::',
			_0: word,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$String$join,
					'',
					{
						ctor: '::',
						_0: punctuation_char,
						_1: {
							ctor: '::',
							_0: rest_of_str,
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		};
	} else {
		return {
			ctor: '::',
			_0: str,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Text_Section_Words_Tag$tagWordAndToVDOM = F4(
	function (tag_word, is_part_of_compound_word, node, _p21) {
		var _p22 = _p21;
		var _p31 = _p22._1;
		var _p30 = _p22._0;
		var _p23 = node;
		switch (_p23.ctor) {
			case 'Text':
				var word_tokens = _elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$map,
						_user$project$Text_Section_Words_Tag$maybeParseWordWithPunctuation,
						_elm_lang$core$String$words(_p23._0)));
				var _p24 = A2(_user$project$Text_Section_Words_Tag$countOccurrences, word_tokens, _p31);
				var counted_occurrences = _p24._0;
				var token_occurrences = _p24._1;
				var counted_words = _user$project$Text_Section_Words_Tag$intersperseWithWhitespace(
					A2(_user$project$Text_Section_Words_Tag$parseCompoundWords, is_part_of_compound_word, counted_occurrences));
				var new_nodes = A2(
					_elm_lang$core$List$map,
					function (_p25) {
						var _p26 = _p25;
						return A2(tag_word, _p26._1, _p26._0);
					},
					counted_words);
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics_ops['++'], _p30, new_nodes),
					_1: token_occurrences
				};
			case 'Element':
				var _p27 = A4(_user$project$Text_Section_Words_Tag$tagWordsToVDOMWithFreqs, tag_word, is_part_of_compound_word, _p31, _p23._2);
				var new_msgs = _p27._0;
				var new_occurrences = _p27._1;
				var new_node = A3(
					_elm_lang$html$Html$node,
					_p23._0,
					A2(
						_elm_lang$core$List$map,
						function (_p28) {
							var _p29 = _p28;
							return A2(_elm_lang$html$Html_Attributes$attribute, _p29._0, _p29._1);
						},
						_p23._1),
					new_msgs);
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_p30,
						{
							ctor: '::',
							_0: new_node,
							_1: {ctor: '[]'}
						}),
					_1: new_occurrences
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_p30,
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom$text(''),
							_1: {ctor: '[]'}
						}),
					_1: _p31
				};
		}
	});
var _user$project$Text_Section_Words_Tag$tagWordsToVDOMWithFreqs = F4(
	function (tag_word, is_part_of_compound_word, occurrences, nodes) {
		return A3(
			_elm_lang$core$List$foldl,
			A2(_user$project$Text_Section_Words_Tag$tagWordAndToVDOM, tag_word, is_part_of_compound_word),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: occurrences
			},
			nodes);
	});
var _user$project$Text_Section_Words_Tag$tagWordsAndToVDOM = F3(
	function (tag_word, is_part_of_compound_word, nodes) {
		return _elm_lang$core$Tuple$first(
			A4(_user$project$Text_Section_Words_Tag$tagWordsToVDOMWithFreqs, tag_word, is_part_of_compound_word, _elm_lang$core$Dict$empty, nodes));
	});

var _user$project$Text_Translations_View$view_add_grammemes = F3(
	function (model, msg, word_instance) {
		var grammeme_value = A2(_user$project$Text_Translations_Model$editingGrammemeValue, model, word_instance);
		var grammeme_keys = _elm_lang$core$Set$toList(_user$project$Text_Translations_Word_Instance$grammemeKeys);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('add'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$select,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(
							function (_p0) {
								return msg(
									A2(_user$project$Text_Translations_Msg$SelectGrammemeForEditing, word_instance, _p0));
							}),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$map,
						function (grammeme) {
							return A2(
								_elm_lang$html$Html$option,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(grammeme),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(grammeme),
									_1: {ctor: '[]'}
								});
						},
						grammeme_keys)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								function (_p1) {
									return msg(
										A2(_user$project$Text_Translations_Msg$InputGrammeme, word_instance, _p1));
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('add/edit a grammeme..'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(grammeme_value),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$img,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/save.svg'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '17px'),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '17px'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Save edited grammemes.'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															msg(
																_user$project$Text_Translations_Msg$SaveEditedGrammemes(word_instance))),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Text_Translations_View$view_grammeme = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('grammeme'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(_p3._0),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' : '),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p3._1),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Text_Translations_View$view_grammemes = F3(
	function (model, msg, word_instance) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('grammemes'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p4 = _user$project$Text_Translations_Word_Instance$grammemes(word_instance);
					if (_p4.ctor === 'Just') {
						return A2(
							_elm_lang$core$List$map,
							_user$project$Text_Translations_View$view_grammeme,
							_elm_lang$core$Dict$toList(_p4._0));
					} else {
						return {ctor: '[]'};
					}
				}(),
				{
					ctor: '::',
					_0: A3(_user$project$Text_Translations_View$view_add_grammemes, model, msg, word_instance),
					_1: {ctor: '[]'}
				}));
	});
var _user$project$Text_Translations_View$view_match_translations = F2(
	function (parent_msg, word_instance) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text-word-option'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Use these translations across all instances of this word'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								parent_msg(
									_user$project$Text_Translations_Msg$MatchTranslations(word_instance))),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Save for all'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_Translations_View$view_instance_word = F3(
	function (model, msg, word_instance) {
		var word = _user$project$Text_Translations_Word_Instance$word;
		var word_txt = function () {
			var _p5 = A2(_user$project$Text_Translations_Model$mergingWord, model, word_instance);
			if (_p5 === true) {
				var word_instance_id = _user$project$Text_Translations_Word_Instance$id(word_instance);
				var merging_words = A2(
					_elm_lang$core$List$map,
					function (_p6) {
						var _p7 = _p6;
						return word(_p7._1);
					},
					_elm_lang$core$Dict$toList(
						A2(
							_elm_lang$core$Dict$remove,
							word_instance_id,
							_user$project$Text_Translations_Model$mergingWords(model))));
				return A2(
					_elm_lang$core$String$join,
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: word(word_instance),
							_1: {ctor: '[]'}
						},
						merging_words));
			} else {
				return word(word_instance);
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('word'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(word_txt),
				_1: {
					ctor: '::',
					_0: A3(_user$project$Text_Translations_View$view_grammemes, model, msg, word_instance),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_View$view_exit_btn = A2(
	_elm_lang$html$Html$img,
	{
		ctor: '::',
		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/cancel.svg'),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '13px'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '13px'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('cursor'),
					_1: {ctor: '[]'}
				}
			}
		}
	},
	{ctor: '[]'});
var _user$project$Text_Translations_View$view_overlay_close_btn = F2(
	function (parent_msg, word_instance) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('edit_overlay_close_btn'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						parent_msg(
							_user$project$Text_Translations_Msg$CloseEditWord(word_instance))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Text_Translations_View$view_exit_btn,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_Translations_View$view_translation_delete = F3(
	function (msg, text_word, translation) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('translation_delete'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/delete.svg'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '17px'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '17px'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Delete this translation.'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											msg(
												A2(_user$project$Text_Translations_Msg$DeleteTranslation, text_word, translation))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_Translations_View$view_add_translation = F2(
	function (msg, text_word) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('add_translation'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Add a translation'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											function (_p8) {
												return msg(
													A2(_user$project$Text_Translations_Msg$UpdateNewTranslationForTextWord, text_word, _p8));
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/add.svg'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '17px'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '17px'),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Add a new translation.'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														msg(
															_user$project$Text_Translations_Msg$SubmitNewTranslationForTextWord(text_word))),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_View$view_add_as_text_word = F2(
	function (msg, word_instance) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('add_as_text_word'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Add as text word.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/add.svg'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '17px'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '17px'),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Add a new translation.'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														msg(
															_user$project$Text_Translations_Msg$AddTextWord(word_instance))),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_View$view_correct_for_context = function (correct) {
	var _p9 = correct;
	if (_p9 === true) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('correct_checkmark'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Correct for the context.'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/circle_check.svg'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '12px'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '12px'),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Text_Translations_View$view_text_word_translation = F3(
	function (msg, text_word, translation) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'translation', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'editable', _1: true},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'phrase', _1: true},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								msg(
									_user$project$Text_Translations_Msg$MakeCorrectForContext(translation))),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(translation.text),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('icons'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							_user$project$Text_Translations_View$view_correct_for_context(translation.correct_for_context),
							{
								ctor: '::',
								_0: A3(_user$project$Text_Translations_View$view_translation_delete, msg, text_word, translation),
								_1: {ctor: '[]'}
							})),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_View$view_word_instance = F3(
	function (model, msg, word_instance) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('word_instance'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A3(_user$project$Text_Translations_View$view_instance_word, model, msg, word_instance),
					_1: {ctor: '[]'}
				},
				function () {
					var _p10 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
					if (_p10.ctor === 'Just') {
						var _p12 = _p10._0;
						var _p11 = _user$project$Text_Translations_TextWord$translations(_p12);
						if (_p11.ctor === 'Just') {
							return {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('translations'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(
											_elm_lang$core$List$map,
											A2(_user$project$Text_Translations_View$view_text_word_translation, msg, _p12),
											_p11._0),
										{
											ctor: '::',
											_0: A2(_user$project$Text_Translations_View$view_add_translation, msg, _p12),
											_1: {ctor: '[]'}
										})),
								_1: {ctor: '[]'}
							};
						} else {
							return {
								ctor: '::',
								_0: A2(_user$project$Text_Translations_View$view_add_translation, msg, _p12),
								_1: {ctor: '[]'}
							};
						}
					} else {
						return {
							ctor: '::',
							_0: A2(_user$project$Text_Translations_View$view_add_as_text_word, msg, word_instance),
							_1: {ctor: '[]'}
						};
					}
				}()));
	});
var _user$project$Text_Translations_View$view_delete_text_word = F2(
	function (parent_msg, word_instance) {
		var textWord = _user$project$Text_Translations_Word_Instance$textWord;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text-word-option'),
				_1: {ctor: '[]'}
			},
			function () {
				var _p13 = textWord(word_instance);
				if (_p13.ctor === 'Just') {
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Delete this word instance from glossing.'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										parent_msg(
											_user$project$Text_Translations_Msg$DeleteTextWord(_p13._0))),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Delete'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}());
	});
var _user$project$Text_Translations_View$view_make_compound_text_word_on_click = F3(
	function (model, parent_msg, word_instance) {
		var _p14 = A2(_user$project$Text_Translations_Model$mergeState, model, word_instance);
		if (_p14.ctor === 'Just') {
			var _p15 = _p14._0;
			if (_p15.ctor === 'Cancelable') {
				return _elm_lang$html$Html_Events$onClick(
					parent_msg(
						_user$project$Text_Translations_Msg$RemoveFromMergeWords(word_instance)));
			} else {
				return _elm_lang$html$Html_Events$onClick(
					parent_msg(
						_user$project$Text_Translations_Msg$MergeWords(
							_user$project$Text_Translations_Model$mergingWordInstances(model))));
			}
		} else {
			return _elm_lang$html$Html_Events$onClick(
				parent_msg(
					_user$project$Text_Translations_Msg$AddToMergeWords(word_instance)));
		}
	});
var _user$project$Text_Translations_View$view_make_compound_text_word = F3(
	function (model, parent_msg, word_instance) {
		var merge_state = A2(_user$project$Text_Translations_Model$mergeState, model, word_instance);
		var merge_txt = function () {
			var _p16 = merge_state;
			if (_p16.ctor === 'Just') {
				var _p17 = _p16._0;
				if (_p17.ctor === 'Mergeable') {
					return 'Merge together';
				} else {
					return 'Cancel merge';
				}
			} else {
				return 'Merge';
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text-word-option'),
				_1: {ctor: '[]'}
			},
			function () {
				var _p18 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
				if (_p18.ctor === 'Just') {
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'title', 'Merge into compound word.'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$classList(
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'merge-highlight',
												_1: A2(_user$project$Text_Translations_Model$mergingWord, model, word_instance)
											},
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A3(_user$project$Text_Translations_View$view_make_compound_text_word_on_click, model, parent_msg, word_instance),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(merge_txt),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}());
	});
var _user$project$Text_Translations_View$view_btns = F3(
	function (model, parent_msg, word_instance) {
		var word = _user$project$Text_Translations_Word_Instance$word(word_instance);
		var normalized_word = _elm_lang$core$String$toLower(word);
		var instance_count = A2(_user$project$Text_Translations_Model$instanceCount, model, normalized_word);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text_word_options'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A3(_user$project$Text_Translations_View$view_make_compound_text_word, model, parent_msg, word_instance),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Text_Translations_View$view_delete_text_word, parent_msg, word_instance),
						_1: {ctor: '[]'}
					}
				},
				(_elm_lang$core$Native_Utils.cmp(instance_count, 1) > 0) ? {
					ctor: '::',
					_0: A2(_user$project$Text_Translations_View$view_match_translations, parent_msg, word_instance),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Text_Translations_View$view_edit = F3(
	function (model, parent_msg, word_instance) {
		var editing_word = A2(_user$project$Text_Translations_Model$editingWordInstance, model, word_instance);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('edit_overlay'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'hidden', _1: !editing_word},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('edit_menu'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_user$project$Text_Translations_View$view_overlay_close_btn, parent_msg, word_instance),
						_1: {
							ctor: '::',
							_0: A3(_user$project$Text_Translations_View$view_word_instance, model, parent_msg, word_instance),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Text_Translations_View$view_btns, model, parent_msg, word_instance),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_Translations_View$is_part_of_compound_word = F3(
	function (model, instance, word) {
		var _p19 = A3(_user$project$Text_Translations_Model$getTextWord, model, instance, word);
		if (_p19.ctor === 'Just') {
			var _p20 = _user$project$Text_Translations_TextWord$group(_p19._0);
			if (_p20.ctor === 'Just') {
				var _p21 = _p20._0;
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple3', _0: _p21.instance, _1: _p21.pos, _2: _p21.length});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Text_Translations_View$wordInstanceOnClick = F3(
	function (model, parent_msg, word_instance) {
		var _p22 = _user$project$Text_Translations_Model$isMergingWords(model);
		if (_p22 === true) {
			var _p23 = A2(_user$project$Text_Translations_Model$mergingWord, model, word_instance);
			if (_p23 === true) {
				return _elm_lang$html$Html_Events$onClick(
					parent_msg(
						_user$project$Text_Translations_Msg$RemoveFromMergeWords(word_instance)));
			} else {
				return _elm_lang$html$Html_Events$onClick(
					parent_msg(
						_user$project$Text_Translations_Msg$AddToMergeWords(word_instance)));
			}
		} else {
			return _elm_lang$html$Html_Events$onClick(
				parent_msg(
					_user$project$Text_Translations_Msg$EditWord(word_instance)));
		}
	});
var _user$project$Text_Translations_View$tagWord = F4(
	function (model, parent_msg, instance, token) {
		var id = A2(
			_elm_lang$core$String$join,
			'_',
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(instance),
				_1: {
					ctor: '::',
					_0: token,
					_1: {ctor: '[]'}
				}
			});
		var _p24 = _elm_lang$core$Native_Utils.eq(token, ' ');
		if (_p24 === true) {
			return A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('space'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'});
		} else {
			var editing_word = A2(_user$project$Text_Translations_Model$editingWord, model, token);
			var word_instance = A3(_user$project$Text_Translations_Model$newWordInstance, model, instance, token);
			var merging_word = A2(_user$project$Text_Translations_Model$mergingWord, model, word_instance);
			return A3(
				_elm_lang$html$Html$node,
				'span',
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(id),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'defined_word', _1: true},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'cursor', _1: true},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'edit-highlight', _1: editing_word},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'merge-highlight', _1: merging_word && (!editing_word)},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A3(_user$project$Text_Translations_View$wordInstanceOnClick, model, parent_msg, word_instance),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$virtual_dom$VirtualDom$text(token),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(_user$project$Text_Translations_View$view_edit, model, parent_msg, word_instance),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _user$project$Text_Translations_View$view_translations = F2(
	function (msg, translation_model) {
		var _p25 = translation_model;
		if (_p25.ctor === 'Just') {
			var _p26 = _p25._0;
			var sections = _elm_lang$core$Array$toList(_p26.text.sections);
			var text_body = A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					function (section) {
						return section.body;
					},
					sections));
			var text_body_vdom = A3(
				_user$project$Text_Section_Words_Tag$tagWordsAndToVDOM,
				A2(_user$project$Text_Translations_View$tagWord, _p26, msg),
				_user$project$Text_Translations_View$is_part_of_compound_word(_p26),
				_jinjor$elm_html_parser$HtmlParser$parse(text_body));
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('translations_tab'),
					_1: {ctor: '[]'}
				},
				text_body_vdom);
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('translations_tab'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('No translations available'),
					_1: {ctor: '[]'}
				});
		}
	});

var _user$project$Text_View$view_translations_tab = function (params) {
	return A2(_user$project$Text_Translations_View$view_translations, params.text_translation_msg, params.text_translations_model);
};
var _user$project$Text_View$view_tab_menu = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'tabs_menu'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'selected',
								_1: _elm_lang$core$Native_Utils.eq(params.selected_tab, _user$project$Text_Create$TextTab)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Text_Create$ToggleTab(_user$project$Text_Create$TextTab)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Text'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'selected',
									_1: _elm_lang$core$Native_Utils.eq(params.selected_tab, _user$project$Text_Create$TranslationsTab)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Text_Create$ToggleTab(_user$project$Text_Create$TranslationsTab)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Translations'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_View$view_submit = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'submit_section', _1: true},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'submit'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Text_Create$TextComponentMsg(_user$project$Text_Update$AddTextSection)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/add_text_section.svg'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '20px'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '20px'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Add Text Section'),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'submit'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Text_Create$DeleteText),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Delete Text'),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/delete.svg'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '18px'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '18px'),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'submit'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Text_Create$SubmitText),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'src', '/static/img/save_disk.svg'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'height', '20px'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'width', '20px'),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Save Text'),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Text_View$edit_source = F2(
	function (params, text_source) {
		var text_source_attrs = _user$project$Text_Field$text_source_attrs(text_source);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text_property', _1: true},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Text Source'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_source_attrs.input_id),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', params.text.source),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											_user$project$Text_Create$UpdateTextAttributes('source')),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onBlur(
												A2(
													_user$project$Text_Create$ToggleEditable,
													_user$project$Text_Create$Source(text_source),
													false)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_View$view_source = F3(
	function (params, edit_view, text_source) {
		var text_source_attrs = _user$project$Text_Field$text_source_attrs(text_source);
		var _p0 = text_source_attrs.editable;
		if (_p0 === false) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A2(
							_user$project$Text_Create$ToggleEditable,
							_user$project$Text_Create$Source(text_source),
							true)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text_property', _1: true},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_source_attrs.error},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_source_attrs.id),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Text Source'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'editable'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(params.text.source),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					text_source_attrs.error ? {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('error'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(text_source_attrs.error_string),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					} : {ctor: '[]'}));
		} else {
			return A2(edit_view, params, text_source);
		}
	});
var _user$project$Text_View$edit_difficulty = F2(
	function (params, text_difficulty) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text_property'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Text Difficulty'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$select,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								_user$project$Text_Create$UpdateTextAttributes('difficulty')),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$optgroup,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$map,
									function (_p1) {
										var _p2 = _p1;
										var _p3 = _p2._0;
										return A2(
											_elm_lang$html$Html$option,
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', _p3),
													_1: {ctor: '[]'}
												},
												_elm_lang$core$Native_Utils.eq(_p3, params.text.difficulty) ? {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'selected', ''),
													_1: {ctor: '[]'}
												} : {ctor: '[]'}),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(_p2._1),
												_1: {ctor: '[]'}
											});
									},
									params.text_difficulties)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_View$edit_author = F2(
	function (params, text_author) {
		var text_author_attrs = _user$project$Text_Field$text_author_attrs(text_author);
		return A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', params.text.author),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_author_attrs.input_id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_author_attrs.error},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(
									_user$project$Text_Create$UpdateTextAttributes('author')),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onBlur(
										A2(
											_user$project$Text_Create$ToggleEditable,
											_user$project$Text_Create$Author(text_author),
											false)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(params.text.author),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_View$view_author = F3(
	function (params, edit_author, text_author) {
		var text_author_attrs = _user$project$Text_Field$text_author_attrs(text_author);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'text_author_view'),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text_property'),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Text Author'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: function () {
							var _p4 = text_author_attrs.editable;
							if (_p4 === false) {
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_author_attrs.id),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'editable'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													A2(
														_user$project$Text_Create$ToggleEditable,
														_user$project$Text_Create$Author(text_author),
														true)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(params.text.author),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									});
							} else {
								return A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(edit_author, params, text_author),
										_1: {ctor: '[]'}
									});
							}
						}(),
						_1: {ctor: '[]'}
					}
				},
				text_author_attrs.error ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('error'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(text_author_attrs.error_string),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Text_View$view_edit_text_lock = function (params) {
	var write_locked = params.write_locked;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'text_lock'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						write_locked ? 'Text Locked' : 'Text Unlocked'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'lock_box'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'dimgray_bg', _1: write_locked},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Text_Create$ToggleLock),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Attributes$attribute,
									'id',
									write_locked ? 'lock_right' : 'lock_left'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_View$view_text_lock = function (params) {
	var _p5 = params.mode;
	switch (_p5.ctor) {
		case 'EditMode':
			return _user$project$Text_View$view_edit_text_lock(params);
		case 'ReadOnlyMode':
			var _p6 = _elm_lang$core$Native_Utils.eq(
				_p5._0,
				_user$project$Instructor_Profile$username(params.profile));
			if (_p6 === true) {
				return _user$project$Text_View$view_edit_text_lock(params);
			} else {
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{ctor: '[]'});
			}
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
	}
};
var _user$project$Text_View$view_edit_text_tags = F2(
	function (params, text_tags) {
		var tag_attrs = _user$project$Text_Field$text_tags_attrs(text_tags);
		var tag_list = _elm_lang$core$Dict$keys(params.tags);
		var tags = _user$project$Text_Component$tags(params.text_component);
		return A5(
			_user$project$Text_Tags_View$view_tags,
			'add_tag',
			tag_list,
			tags,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$html$Html_Events$onInput(
					_user$project$Text_Create$AddTagInput('add_tag')),
				_1: _user$project$Text_Create$DeleteTag
			},
			tag_attrs);
	});
var _user$project$Text_View$edit_text_introduction = F2(
	function (params, text_intro) {
		var text_intro_attrs = _user$project$Text_Field$text_intro_attrs(text_intro);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$textarea,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_intro_attrs.input_id),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text_introduction', _1: true},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_intro_attrs.error},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(
									_user$project$Text_Create$UpdateTextAttributes('introduction')),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(params.text.introduction),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Text_View$view_text_introduction = F3(
	function (params, edit_view, text_intro) {
		var text_intro_attrs = _user$project$Text_Field$text_intro_attrs(text_intro);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_intro_attrs.id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_intro_attrs.error},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Text Introduction'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(edit_view, params, text_intro),
						_1: {ctor: '[]'}
					}
				},
				text_intro_attrs.error ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('error'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(text_intro_attrs.error_string),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Text_View$view_text_conclusion = F2(
	function (params, text_conclusion) {
		var text_conclusion_attrs = _user$project$Text_Field$text_conclusion_attrs(text_conclusion);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_conclusion_attrs.id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_conclusion_attrs.error},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Text Conclusion'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$textarea,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_conclusion_attrs.input_id),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$classList(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text_conclusion', _1: true},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_conclusion_attrs.error},
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(
													_user$project$Text_Create$UpdateTextAttributes('conclusion')),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(_elm_lang$core$Maybe$withDefault, '', params.text.conclusion)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				text_conclusion_attrs.error ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('error'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(text_conclusion_attrs.error_string),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Text_View$edit_text_title = F2(
	function (params, text_title) {
		var text_title_attrs = _user$project$Text_Field$text_title_attrs(text_title);
		return A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_title_attrs.input_id),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'type', 'text'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', params.text.title),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								_user$project$Text_Create$UpdateTextAttributes('title')),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onBlur(
									A2(
										_user$project$Text_Create$ToggleEditable,
										_user$project$Text_Create$Title(text_title),
										false)),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$Text_View$view_text_title = F3(
	function (params, edit_view, text_title) {
		var text_title_attrs = _user$project$Text_Field$text_title_attrs(text_title);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					A2(
						_user$project$Text_Create$ToggleEditable,
						_user$project$Text_Create$Title(text_title),
						true)),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', text_title_attrs.id),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'input_error', _1: text_title_attrs.error},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Text Title'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: function () {
							var _p7 = text_title_attrs.editable;
							if (_p7 === false) {
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'editable'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(params.text.title),
										_1: {ctor: '[]'}
									});
							} else {
								return A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(edit_view, params, text_title),
										_1: {ctor: '[]'}
									});
							}
						}(),
						_1: {ctor: '[]'}
					}
				},
				text_title_attrs.error ? {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('error'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(text_title_attrs.error_string),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}));
	});
var _user$project$Text_View$view_text_date = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'text_dates'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p8 = params.text.modified_dt;
				if (_p8.ctor === 'Just') {
					var _p9 = params.text.last_modified_by;
					if (_p9.ctor === 'Just') {
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Last Modified by ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p9._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													' on ',
													_user$project$Date_Utils$month_day_year_fmt(_p8._0))))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				} else {
					return {ctor: '[]'};
				}
			}(),
			function () {
				var _p10 = params.text.created_dt;
				if (_p10.ctor === 'Just') {
					var _p11 = params.text.created_by;
					if (_p11.ctor === 'Just') {
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Created by ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p11._0,
												A2(
													_elm_lang$core$Basics_ops['++'],
													' on ',
													_user$project$Date_Utils$month_day_year_fmt(_p10._0))))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				} else {
					return {ctor: '[]'};
				}
			}()));
};
var _user$project$Text_View$view_text_attributes = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'text_attributes'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(
				_user$project$Text_View$view_text_title,
				params,
				_user$project$Text_View$edit_text_title,
				_user$project$Text_Field$title(params.text_fields)),
			_1: {
				ctor: '::',
				_0: A3(
					_user$project$Text_View$view_text_introduction,
					params,
					_user$project$Text_View$edit_text_introduction,
					_user$project$Text_Field$intro(params.text_fields)),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Text_View$view_author,
						params,
						_user$project$Text_View$edit_author,
						_user$project$Text_Field$author(params.text_fields)),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Text_View$edit_difficulty,
							params,
							_user$project$Text_Field$difficulty(params.text_fields)),
						_1: {
							ctor: '::',
							_0: A3(
								_user$project$Text_View$view_source,
								params,
								_user$project$Text_View$edit_source,
								_user$project$Text_Field$source(params.text_fields)),
							_1: {
								ctor: '::',
								_0: _user$project$Text_View$view_text_lock(params),
								_1: {
									ctor: '::',
									_0: _user$project$Text_View$view_text_date(params),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$Text_View$view_text_conclusion,
											params,
											_user$project$Text_Field$conclusion(params.text_fields)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$classList(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'text_property', _1: true},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Text Tags'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_user$project$Text_View$view_edit_text_tags,
															params,
															_user$project$Text_Field$tags(params.text_fields)),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Text_View$view_text_tab = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'text'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _user$project$Text_View$view_text_attributes(params),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Text_Section_View$view_text_section_components,
						_user$project$Text_Create$TextComponentMsg,
						_user$project$Text_Component$text_section_components(params.text_component),
						params.text_difficulties),
					_1: {ctor: '[]'}
				}
			},
			function () {
				var _p12 = params.mode;
				if (_p12.ctor === 'ReadOnlyMode') {
					return {ctor: '[]'};
				} else {
					return {
						ctor: '::',
						_0: _user$project$Text_View$view_submit,
						_1: {ctor: '[]'}
					};
				}
			}()));
};
var _user$project$Text_View$view_tab_contents = function (params) {
	var _p13 = params.selected_tab;
	if (_p13.ctor === 'TextTab') {
		return _user$project$Text_View$view_text_tab(params);
	} else {
		return _user$project$Text_View$view_translations_tab(params);
	}
};
var _user$project$Text_View$view_text = function (params) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'tabs'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Text_View$view_tab_menu(params),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'id', 'tabs_contents'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Text_View$view_tab_contents(params),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _user$project$Text_Subscriptions$subscriptions = F2(
	function (msg, model) {
		return _user$project$Ports$ckEditorUpdate(
			function (_p0) {
				return msg(
					_user$project$Text_Update$UpdateTextBody(_p0));
			});
	});

var _user$project$Text_Translations_Encode$encodeDict = F3(
	function (k_name, v_value, dict) {
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return {
						ctor: '_Tuple2',
						_0: k_name(_p1._0),
						_1: v_value(_p1._1)
					};
				},
				_elm_lang$core$Dict$toList(dict)));
	});
var _user$project$Text_Translations_Encode$grammemesEncoder = F2(
	function (text_word, grammemes) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'word_type',
					_1: _elm_lang$core$Json_Encode$string(
						_user$project$Text_Translations_TextWord$wordType(text_word))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'grammemes',
						_1: A3(_user$project$Text_Translations_Encode$encodeDict, _elm_lang$core$Basics$identity, _elm_lang$core$Json_Encode$string, grammemes)
					},
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_Encode$deleteTextTranslationEncode = function (translation_id) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(translation_id)
			},
			_1: {ctor: '[]'}
		});
};
var _user$project$Text_Translations_Encode$newTextTranslationEncoder = F2(
	function (translation, correct_for_context) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'phrase',
					_1: _elm_lang$core$Json_Encode$string(translation)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'correct_for_context',
						_1: _elm_lang$core$Json_Encode$bool(correct_for_context)
					},
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_Encode$textWordMergeEncoder = function (text_words) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			function (text_word) {
				return _elm_lang$core$Json_Encode$int(
					_user$project$Text_Translations_TextWord$id(text_word));
			},
			text_words));
};
var _user$project$Text_Translations_Encode$textTranslationAsCorrectEncoder = function (text_translation) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(text_translation.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'correct_for_context',
					_1: _elm_lang$core$Json_Encode$bool(text_translation.correct_for_context)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Text_Translations_Encode$textTranslationsMergeEncoder = F2(
	function (text_word_translations, text_words) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'words',
					_1: _elm_lang$core$Json_Encode$list(
						A2(
							_elm_lang$core$List$map,
							function (tw) {
								return _elm_lang$core$Json_Encode$object(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'id',
											_1: _elm_lang$core$Json_Encode$int(
												_user$project$Text_Translations_TextWord$id(tw))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'word_type',
												_1: _elm_lang$core$Json_Encode$string(
													_user$project$Text_Translations_TextWord$wordType(tw))
											},
											_1: {ctor: '[]'}
										}
									});
							},
							text_words))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'translations',
						_1: _elm_lang$core$Json_Encode$list(
							A2(
								_elm_lang$core$List$map,
								function (twt) {
									return _elm_lang$core$Json_Encode$object(
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'correct_for_context',
												_1: _elm_lang$core$Json_Encode$bool(twt.correct_for_context)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'phrase',
													_1: _elm_lang$core$Json_Encode$string(twt.text)
												},
												_1: {ctor: '[]'}
											}
										});
								},
								text_word_translations))
					},
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Text_Translations_Encode$textTranslationEncoder = function (text_translation) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(text_translation.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'text',
					_1: _elm_lang$core$Json_Encode$string(text_translation.text)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'correct_for_context',
						_1: _elm_lang$core$Json_Encode$bool(text_translation.correct_for_context)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Text_Translations_Encode$textTranslationsEncoder = function (text_translations) {
	return _elm_lang$core$Json_Encode$list(
		A2(_elm_lang$core$List$map, _user$project$Text_Translations_Encode$textTranslationEncoder, text_translations));
};

var _user$project$Text_Translations_Update$retrieveTextWords = F2(
	function (msg, text_id) {
		var request = A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$String$join,
				'?',
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$join,
						'',
						{
							ctor: '::',
							_0: _user$project$Config$text_api_endpoint,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(text_id),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: 'text_words=list',
						_1: {ctor: '[]'}
					}
				}),
			_user$project$Text_Translations_Decode$textWordDictInstancesDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p0) {
				return msg(
					_user$project$Text_Translations_Msg$UpdateTextTranslations(_p0));
			},
			request);
	});
var _user$project$Text_Translations_Update$updateTranslationAsCorrect = F3(
	function (msg, csrftoken, translation) {
		var encoded_translation = _user$project$Text_Translations_Encode$textTranslationAsCorrectEncoder(
			_elm_lang$core$Native_Utils.update(
				translation,
				{correct_for_context: true}));
		var body = _elm_lang$http$Http$jsonBody(encoded_translation);
		var headers = {
			ctor: '::',
			_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
			_1: {ctor: '[]'}
		};
		var request = A4(_user$project$HttpHelpers$put_with_headers, translation.endpoint, headers, body, _user$project$Text_Translations_Decode$textTranslationUpdateRespDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p1) {
				return msg(
					_user$project$Text_Translations_Msg$UpdateTextTranslation(_p1));
			},
			request);
	});
var _user$project$Text_Translations_Update$postTranslation = F5(
	function (msg, csrftoken, text_word, translation_text, correct_for_context) {
		var encoded_translation = A2(_user$project$Text_Translations_Encode$newTextTranslationEncoder, translation_text, correct_for_context);
		var body = _elm_lang$http$Http$jsonBody(encoded_translation);
		var headers = {
			ctor: '::',
			_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
			_1: {ctor: '[]'}
		};
		var endpoint_uri = _user$project$Text_Translations_TextWord$translations_endpoint(text_word);
		var request = A4(_user$project$HttpHelpers$post_with_headers, endpoint_uri, headers, body, _user$project$Text_Translations_Decode$textTranslationAddRespDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p2) {
				return msg(
					_user$project$Text_Translations_Msg$SubmittedTextTranslation(_p2));
			},
			request);
	});
var _user$project$Text_Translations_Update$updateGrammemes = F4(
	function (msg, csrftoken, word_instance, grammemes) {
		var _p3 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
		if (_p3.ctor === 'Just') {
			var _p5 = _p3._0;
			var encoded_grammemes = A2(_user$project$Text_Translations_Encode$grammemesEncoder, _p5, grammemes);
			var body = _elm_lang$http$Http$jsonBody(encoded_grammemes);
			var text_word_endpoint = _user$project$Text_Translations_TextWord$text_word_endpoint(_p5);
			var headers = {
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
				_1: {ctor: '[]'}
			};
			var request = A4(_user$project$HttpHelpers$put_with_headers, text_word_endpoint, headers, body, _user$project$Text_Translations_Decode$textWordInstanceDecoder);
			return A2(
				_elm_lang$http$Http$send,
				function (_p4) {
					return msg(
						_user$project$Text_Translations_Msg$UpdatedTextWord(_p4));
				},
				request);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Text_Translations_Update$putMatchTranslations = F4(
	function (msg, csrftoken, translations, text_words) {
		var encoded_merge_request = A2(_user$project$Text_Translations_Encode$textTranslationsMergeEncoder, translations, text_words);
		var body = _elm_lang$http$Http$jsonBody(encoded_merge_request);
		var headers = {
			ctor: '::',
			_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
			_1: {ctor: '[]'}
		};
		var endpoint_uri = _user$project$Config$text_translation_api_match_endpoint;
		var request = A4(_user$project$HttpHelpers$put_with_headers, endpoint_uri, headers, body, _user$project$Text_Translations_Decode$textWordInstancesDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p6) {
				return msg(
					_user$project$Text_Translations_Msg$UpdatedTextWords(_p6));
			},
			request);
	});
var _user$project$Text_Translations_Update$deleteTranslation = F4(
	function (msg, csrftoken, text_word, translation) {
		var encoded_translation = _user$project$Text_Translations_Encode$deleteTextTranslationEncode(translation.id);
		var body = _elm_lang$http$Http$jsonBody(encoded_translation);
		var headers = {
			ctor: '::',
			_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
			_1: {ctor: '[]'}
		};
		var request = A4(_user$project$HttpHelpers$delete_with_headers, translation.endpoint, headers, body, _user$project$Text_Translations_Decode$textTranslationRemoveRespDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p7) {
				return msg(
					_user$project$Text_Translations_Msg$DeletedTranslation(_p7));
			},
			request);
	});
var _user$project$Text_Translations_Update$matchTranslations = F3(
	function (parent_msg, model, word_instance) {
		var word = _elm_lang$core$String$toLower(
			_user$project$Text_Translations_Word_Instance$word(word_instance));
		var _p8 = _user$project$Text_Translations_Word_Instance$textWord(word_instance);
		if (_p8.ctor === 'Just') {
			var _p9 = _user$project$Text_Translations_TextWord$translations(_p8._0);
			if (_p9.ctor === 'Just') {
				var match_translations = A2(_user$project$Text_Translations_Update$putMatchTranslations, parent_msg, model.flags.csrftoken);
				var _p10 = A2(_user$project$Text_Translations_Model$getTextWords, model, word);
				if (_p10.ctor === 'Just') {
					return A2(
						match_translations,
						_p9._0,
						_elm_lang$core$Array$toList(_p10._0));
				} else {
					return _elm_lang$core$Platform_Cmd$none;
				}
			} else {
				return _elm_lang$core$Platform_Cmd$none;
			}
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Text_Translations_Update$postMergeWords = F4(
	function (parent_msg, model, csrftoken, word_instances) {
		var text_words = A2(
			_elm_lang$core$List$filterMap,
			function (instance) {
				return _user$project$Text_Translations_Word_Instance$textWord(instance);
			},
			word_instances);
		var encoded_text_word_ids = _user$project$Text_Translations_Encode$textWordMergeEncoder(text_words);
		var body = _elm_lang$http$Http$jsonBody(encoded_text_word_ids);
		var headers = {
			ctor: '::',
			_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
			_1: {ctor: '[]'}
		};
		var endpoint_uri = model.flags.group_word_endpoint_url;
		var request = A4(_user$project$HttpHelpers$post_with_headers, endpoint_uri, headers, body, _user$project$Text_Translations_Decode$textWordMergeDecoder);
		return A2(
			_elm_lang$http$Http$send,
			function (_p11) {
				return parent_msg(
					_user$project$Text_Translations_Msg$MergedWords(_p11));
			},
			request);
	});
var _user$project$Text_Translations_Update$update = F3(
	function (parent_msg, msg, model) {
		var _p12 = msg;
		switch (_p12.ctor) {
			case 'MatchTranslations':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Text_Translations_Update$matchTranslations, parent_msg, model, _p12._0)
				};
			case 'EditWord':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$editWord, model, _p12._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CloseEditWord':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$uneditWord, model, _p12._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MakeCorrectForContext':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Text_Translations_Update$updateTranslationAsCorrect, parent_msg, model.flags.csrftoken, _p12._0)
				};
			case 'UpdatedTextWords':
				if (_p12._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Text_Translations_Model$setTextWords, model, _p12._0._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p13 = A2(_elm_lang$core$Debug$log, 'error updating text words', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdatedTextWord':
				if (_p12._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A2(
							_user$project$Text_Translations_Model$setTextWords,
							model,
							{
								ctor: '::',
								_0: _p12._0._0,
								_1: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p14 = A2(_elm_lang$core$Debug$log, 'error updating text word', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'MergeWords':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A4(_user$project$Text_Translations_Update$postMergeWords, parent_msg, model, model.flags.csrftoken, _p12._0)
				};
			case 'MergedWords':
				if (_p12._0.ctor === 'Ok') {
					var _p17 = _p12._0._0;
					var _p15 = _p17.grouped;
					if (_p15 === true) {
						return {
							ctor: '_Tuple2',
							_0: A4(_user$project$Text_Translations_Model$completeMerge, model, _p17.phrase, _p17.instance, _p17.text_words),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var _p16 = A2(_elm_lang$core$Debug$log, 'error merging text words', _p17.error);
						return {
							ctor: '_Tuple2',
							_0: _user$project$Text_Translations_Model$cancelMerge(model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				} else {
					var _p18 = A2(_elm_lang$core$Debug$log, 'error merging text words', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'AddToMergeWords':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$addToMergeWords, model, _p12._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveFromMergeWords':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$removeFromMergeWords, model, _p12._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteTextWord':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'DeletedTextWord':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateTextTranslation':
				if (_p12._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A4(_user$project$Text_Translations_Model$updateTextTranslation, model, _p12._0._0._1, _p12._0._0._0, _p12._0._0._2),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p19 = A2(_elm_lang$core$Debug$log, 'error decoding text translation', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateTextTranslations':
				if (_p12._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{words: _p12._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p20 = A2(_elm_lang$core$Debug$log, 'error decoding text translations', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateNewTranslationForTextWord':
				return {
					ctor: '_Tuple2',
					_0: A3(_user$project$Text_Translations_Model$updateTranslationsForWord, model, _p12._0, _p12._1),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AddTextWord':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SubmitNewTranslationForTextWord':
				var _p22 = _p12._0;
				var _p21 = A2(_user$project$Text_Translations_Model$getNewTranslationForWord, model, _p22);
				if (_p21.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A5(_user$project$Text_Translations_Update$postTranslation, parent_msg, model.flags.csrftoken, _p22, _p21._0, true)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SubmittedTextTranslation':
				if (_p12._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A4(_user$project$Text_Translations_Model$addTextTranslation, model, _p12._0._0._1, _p12._0._0._0, _p12._0._0._2),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p23 = A2(_elm_lang$core$Debug$log, 'error decoding adding text translations', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'DeleteTranslation':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A4(_user$project$Text_Translations_Update$deleteTranslation, parent_msg, model.flags.csrftoken, _p12._0, _p12._1)
				};
			case 'DeletedTranslation':
				if (_p12._0.ctor === 'Ok') {
					var _p24 = _p12._0._0;
					var translation = _p24.translation;
					var word = _p24.word;
					var instance = _p24.instance;
					return {
						ctor: '_Tuple2',
						_0: A4(_user$project$Text_Translations_Model$removeTextTranslation, model, instance, word, translation),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p25 = A2(_elm_lang$core$Debug$log, 'error deleting text translations', _p12._0._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SelectGrammemeForEditing':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$selectGrammemeForEditing, model, _p12._1),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'InputGrammeme':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Text_Translations_Model$inputGrammeme, model, _p12._1),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SaveEditedGrammemes':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A4(_user$project$Text_Translations_Update$updateGrammemes, parent_msg, model.flags.csrftoken, _p12._0, model.editing_grammemes)
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});

var _user$project$Text_Translations_Subscriptions$subscriptions = F2(
	function (msg, model) {
		return _elm_lang$core$Platform_Sub$none;
	});

var _user$project$Main$view_msg = function (msg) {
	var msg_str = function () {
		var _p0 = msg;
		if (_p0.ctor === 'Just') {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: ' ',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				});
		} else {
			return '';
		}
	}();
	return _elm_lang$html$Html$text(msg_str);
};
var _user$project$Main$view_msgs = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'msgs'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'error_msg'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Main$view_msg(model.error_msg),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'class', 'success_msg'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Main$view_msg(model.success_msg),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$view = function (model) {
	var text_view_params = {
		text: _user$project$Text_Component$text(model.text_component),
		text_component: model.text_component,
		text_translations_model: model.text_translations_model,
		text_translation_msg: _user$project$Text_Create$TextTranslationMsg,
		text_fields: _user$project$Text_Component$text_fields(model.text_component),
		tags: model.tags,
		selected_tab: model.selected_tab,
		profile: model.profile,
		write_locked: model.write_locked,
		mode: model.mode,
		text_difficulties: model.text_difficulties
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_user$project$Views$view_authed_header,
				_user$project$User_Profile$fromInstructorProfile(model.profile),
				model.menu_items,
				_user$project$Text_Create$LogOut),
			_1: {
				ctor: '::',
				_0: _user$project$Main$view_msgs(model),
				_1: {
					ctor: '::',
					_0: _user$project$Text_View$view_text(text_view_params),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(_user$project$Text_Subscriptions$subscriptions, _user$project$Text_Create$TextComponentMsg, model),
				_1: {
					ctor: '::',
					_0: function () {
						var _p1 = model.success_msg;
						if (_p1.ctor === 'Just') {
							return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second * 3, _user$project$Text_Create$ClearMessages);
						} else {
							return _elm_lang$core$Platform_Sub$none;
						}
					}(),
					_1: {
						ctor: '::',
						_0: _user$project$Ports$ckEditorUpdate(_user$project$Text_Create$UpdateTextCkEditors),
						_1: {
							ctor: '::',
							_0: _user$project$Ports$confirmation(_user$project$Text_Create$ConfirmTextDelete),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: function () {
					var _p2 = model.text_translations_model;
					if (_p2.ctor === 'Just') {
						return A2(_user$project$Text_Translations_Subscriptions$subscriptions, _user$project$Text_Create$TextTranslationMsg, _p2._0);
					} else {
						return _elm_lang$core$Platform_Sub$none;
					}
				}(),
				_1: {ctor: '[]'}
			}));
};
var _user$project$Main$delete_text = F2(
	function (csrftoken, text) {
		var _p3 = text.id;
		if (_p3.ctor === 'Just') {
			var req = A4(
				_user$project$HttpHelpers$delete_with_headers,
				A2(
					_elm_lang$core$String$join,
					'',
					{
						ctor: '::',
						_0: _user$project$Config$text_api_endpoint,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p3._0),
							_1: {
								ctor: '::',
								_0: '/',
								_1: {ctor: '[]'}
							}
						}
					}),
				{
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
					_1: {ctor: '[]'}
				},
				_elm_lang$http$Http$emptyBody,
				_user$project$Text_Decode$textDeleteRespDecoder);
			return A2(_elm_lang$http$Http$send, _user$project$Text_Create$TextDelete, req);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Main$update_text = F2(
	function (csrftoken, text) {
		var _p4 = text.id;
		if (_p4.ctor === 'Just') {
			var encoded_text = _user$project$Text_Encode$textEncoder(text);
			var req = A4(
				_user$project$HttpHelpers$put_with_headers,
				A2(
					_elm_lang$core$String$join,
					'',
					{
						ctor: '::',
						_0: _user$project$Config$text_api_endpoint,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p4._0),
							_1: {
								ctor: '::',
								_0: '/',
								_1: {ctor: '[]'}
							}
						}
					}),
				{
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
					_1: {ctor: '[]'}
				},
				_elm_lang$http$Http$jsonBody(encoded_text),
				_user$project$Text_Decode$textUpdateRespDecoder);
			return A2(_elm_lang$http$Http$send, _user$project$Text_Create$Updated, req);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Main$post_text = F2(
	function (csrftoken, text) {
		var encoded_text = _user$project$Text_Encode$textEncoder(text);
		var req = A4(
			_user$project$HttpHelpers$post_with_headers,
			_user$project$Config$text_api_endpoint,
			{
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
				_1: {ctor: '[]'}
			},
			_elm_lang$http$Http$jsonBody(encoded_text),
			_user$project$Text_Decode$textCreateRespDecoder);
		return A2(_elm_lang$http$Http$send, _user$project$Text_Create$Submitted, req);
	});
var _user$project$Main$delete_lock = F2(
	function (csrftoken, text) {
		var _p5 = text.id;
		if (_p5.ctor === 'Just') {
			var req = A4(
				_user$project$HttpHelpers$delete_with_headers,
				A2(
					_elm_lang$core$String$join,
					'',
					{
						ctor: '::',
						_0: _user$project$Config$text_api_endpoint,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p5._0),
							_1: {
								ctor: '::',
								_0: '/',
								_1: {
									ctor: '::',
									_0: 'lock/',
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				{
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
					_1: {ctor: '[]'}
				},
				_elm_lang$http$Http$emptyBody,
				_user$project$Text_Decode$textLockRespDecoder);
			return A2(_elm_lang$http$Http$send, _user$project$Text_Create$TextUnlocked, req);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Main$post_lock = F2(
	function (csrftoken, text) {
		var _p6 = text.id;
		if (_p6.ctor === 'Just') {
			var req = A4(
				_user$project$HttpHelpers$post_with_headers,
				A2(
					_elm_lang$core$String$join,
					'',
					{
						ctor: '::',
						_0: _user$project$Config$text_api_endpoint,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(_p6._0),
							_1: {
								ctor: '::',
								_0: '/',
								_1: {
									ctor: '::',
									_0: 'lock/',
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				{
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-CSRFToken', csrftoken),
					_1: {ctor: '[]'}
				},
				_elm_lang$http$Http$emptyBody,
				_user$project$Text_Decode$textLockRespDecoder);
			return A2(_elm_lang$http$Http$send, _user$project$Text_Create$TextLocked, req);
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'TextComponentMsg':
				return A2(_user$project$Text_Update$update, _p7._0, model);
			case 'TextTranslationMsg':
				var _p8 = model.text_translations_model;
				if (_p8.ctor === 'Just') {
					var _p9 = A3(_user$project$Text_Translations_Update$update, _user$project$Text_Create$TextTranslationMsg, _p7._0, _p8._0);
					var text_translations_model = _p9._0;
					var text_translation_cmd = _p9._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								text_translations_model: _elm_lang$core$Maybe$Just(text_translations_model)
							}),
						_1: text_translation_cmd
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SubmitText':
				var text = _user$project$Text_Component$text(model.text_component);
				var _p10 = A2(_elm_lang$core$Debug$log, 'text', text);
				var _p11 = model.mode;
				switch (_p11.ctor) {
					case 'ReadOnlyMode':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									success_msg: _elm_lang$core$Maybe$Just(
										A2(_elm_lang$core$Basics_ops['++'], 'Text is locked by ', _p11._0))
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'EditMode':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{error_msg: _elm_lang$core$Maybe$Nothing, success_msg: _elm_lang$core$Maybe$Nothing}),
							_1: A2(_user$project$Main$update_text, model.flags.csrftoken, text)
						};
					default:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{error_msg: _elm_lang$core$Maybe$Nothing, success_msg: _elm_lang$core$Maybe$Nothing}),
							_1: A2(_user$project$Main$post_text, model.flags.csrftoken, text)
						};
				}
			case 'TextJSONDecode':
				var _p12 = _p7._0;
				if (_p12.ctor === 'Ok') {
					var _p16 = _p12._0;
					var text = _user$project$Text_Component$text(_p16);
					var _p13 = text.write_locker;
					if (_p13.ctor === 'Just') {
						var _p15 = _p13._0;
						var _p14 = !_elm_lang$core$Native_Utils.eq(
							_p15,
							_user$project$Instructor_Profile$username(model.profile));
						if (_p14 === true) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										text_component: _p16,
										mode: _user$project$Text_Create$ReadOnlyMode(_p15),
										error_msg: _elm_lang$core$Maybe$Just(
											A2(_elm_lang$core$Basics_ops['++'], 'READONLY: text is currently being edited by ', _p15)),
										write_locked: true
									}),
								_1: _user$project$Text_Component$reinitialize_ck_editors(_p16)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										text_component: _p16,
										mode: _user$project$Text_Create$EditMode,
										success_msg: _elm_lang$core$Maybe$Just(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'editing \'',
												A2(_elm_lang$core$Basics_ops['++'], text.title, '\' text'))),
										write_locked: true
									}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: _user$project$Text_Component$reinitialize_ck_editors(_p16),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Text_Translations_Update$retrieveTextWords,
												_user$project$Text_Create$TextTranslationMsg,
												A2(_elm_lang$core$Maybe$withDefault, 0, text.id)),
											_1: {ctor: '[]'}
										}
									})
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									text_component: _p16,
									mode: _user$project$Text_Create$EditMode,
									text_translations_model: _elm_lang$core$Maybe$Just(
										A2(_user$project$Text_Translations_Model$init, model.flags.translation_flags, text)),
									success_msg: _elm_lang$core$Maybe$Just(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'editing \'',
											A2(_elm_lang$core$Basics_ops['++'], text.title, '\' text')))
								}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: _user$project$Text_Component$reinitialize_ck_editors(_p16),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$Text_Translations_Update$retrieveTextWords,
											_user$project$Text_Create$TextTranslationMsg,
											A2(_elm_lang$core$Maybe$withDefault, 0, text.id)),
										_1: {ctor: '[]'}
									}
								})
						};
					}
				} else {
					var _p17 = A2(_elm_lang$core$Debug$log, 'text decode error', _p12._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error_msg: _elm_lang$core$Maybe$Just('Something went wrong loading the text from the server.'),
								success_msg: _elm_lang$core$Maybe$Just('Editing a new text')
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'InitTextFieldEditors':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Text_Component$initialize_text_field_ck_editors(model.text_component)
				};
			case 'TextTagsDecode':
				var _p18 = _p7._0;
				if (_p18.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{tags: _p18._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ClearMessages':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{success_msg: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Submitted':
				if (_p7._0.ctor === 'Ok') {
					var text = _user$project$Text_Component$text(model.text_component);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								success_msg: _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$core$String$join,
										' ',
										{
											ctor: '::',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												' created \'',
												A2(_elm_lang$core$Basics_ops['++'], text.title, '\'')),
											_1: {ctor: '[]'}
										})),
								mode: _user$project$Text_Create$EditMode
							}),
						_1: _elm_lang$navigation$Navigation$load(_p7._0._0.redirect)
					};
				} else {
					var _p19 = _p7._0._0;
					switch (_p19.ctor) {
						case 'BadStatus':
							var _p20 = _user$project$Text_Decode$decodeRespErrors(_p19._0.body);
							if (_p20.ctor === 'Ok') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											text_component: A2(_user$project$Text_Component$update_text_errors, model.text_component, _p20._0)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'BadPayload':
							var _p21 = A2(_elm_lang$core$Debug$log, 'submit text bad payload error', _p19._1.body);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'Updated':
				if (_p7._0.ctor === 'Ok') {
					var text = _user$project$Text_Component$text(model.text_component);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								success_msg: _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$core$String$join,
										' ',
										{
											ctor: '::',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												' saved \'',
												A2(_elm_lang$core$Basics_ops['++'], text.title, '\'')),
											_1: {ctor: '[]'}
										}))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p22 = _p7._0._0;
					switch (_p22.ctor) {
						case 'BadStatus':
							var _p25 = _p22._0;
							var _p23 = A2(_elm_lang$core$Debug$log, 'update error bad status', _p25);
							var _p24 = _user$project$Text_Decode$decodeRespErrors(_p25.body);
							if (_p24.ctor === 'Ok') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											text_component: A2(_user$project$Text_Component$update_text_errors, model.text_component, _p24._0)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'BadPayload':
							var _p26 = A2(_elm_lang$core$Debug$log, 'update error bad payload', _p22._1);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'UpdateTextDifficultyOptions':
				if (_p7._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{text_difficulties: _p7._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ToggleEditable':
				var _p30 = _p7._1;
				var _p27 = function () {
					var _p28 = _p7._0;
					switch (_p28.ctor) {
						case 'Title':
							return {
								ctor: '_Tuple2',
								_0: A2(_user$project$Text_Component$set_title_editable, model.text_component, _p30),
								_1: _user$project$Text_Component$post_toggle_title
							};
						case 'Author':
							return {
								ctor: '_Tuple2',
								_0: A2(_user$project$Text_Component$set_author_editable, model.text_component, _p30),
								_1: _user$project$Text_Component$post_toggle_author
							};
						case 'Source':
							return {
								ctor: '_Tuple2',
								_0: A2(_user$project$Text_Component$set_source_editable, model.text_component, _p30),
								_1: _user$project$Text_Component$post_toggle_source
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: model.text_component,
								_1: function (_p29) {
									return _elm_lang$core$Platform_Cmd$none;
								}
							};
					}
				}();
				var text_component = _p27._0;
				var post_toggle_cmds = _p27._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{text_component: text_component}),
					_1: post_toggle_cmds(text_component)
				};
			case 'ToggleLock':
				var text = _user$project$Text_Component$text(model.text_component);
				var lock = A2(_user$project$Main$post_lock, model.flags.csrftoken, text);
				var unlock = A2(_user$project$Main$delete_lock, model.flags.csrftoken, text);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: (!model.write_locked) ? lock : unlock
				};
			case 'TextUnlocked':
				if (_p7._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								write_locked: _p7._0._0.locked ? true : false,
								success_msg: _elm_lang$core$Maybe$Just('text is unlocked for editing, other instructors can now edit the text.')
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p31 = _p7._0._0;
					switch (_p31.ctor) {
						case 'BadStatus':
							var _p34 = _p31._0;
							var _p32 = A2(_elm_lang$core$Debug$log, 'update error bad status', _p34);
							var _p33 = _user$project$Text_Decode$decodeRespErrors(_p34.body);
							if (_p33.ctor === 'Ok') {
								var errors_str = A2(
									_elm_lang$core$String$join,
									' and ',
									_elm_lang$core$Dict$values(_p33._0));
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											success_msg: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], 'Error trying to unlock the text: ', errors_str))
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'BadPayload':
							var _p35 = A2(_elm_lang$core$Debug$log, 'update error bad payload', _p31._1);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'TextLocked':
				if (_p7._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								write_locked: _p7._0._0.locked ? true : false,
								success_msg: _elm_lang$core$Maybe$Just('text is locked for editing, other instructors can only view the text while it is locked.')
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p36 = _p7._0._0;
					switch (_p36.ctor) {
						case 'BadStatus':
							var _p39 = _p36._0;
							var _p37 = A2(_elm_lang$core$Debug$log, 'update error bad status', _p39);
							var _p38 = _user$project$Text_Decode$decodeRespErrors(_p39.body);
							if (_p38.ctor === 'Ok') {
								var errors_str = A2(
									_elm_lang$core$String$join,
									' and ',
									_elm_lang$core$Dict$values(_p38._0));
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											success_msg: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], 'Error trying to lock the text: ', errors_str))
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'BadPayload':
							var _p40 = A2(_elm_lang$core$Debug$log, 'update error bad payload', _p36._1);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'UpdateTextAttributes':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A3(_user$project$Text_Component$set_text_attribute, model.text_component, _p7._0, _p7._1)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateTextCkEditors':
				var _p42 = _p7._0._1;
				var _p41 = _p7._0._0;
				var text_conclusion_input_id = _user$project$Text_Field$text_conclusion_attrs(
					_user$project$Text_Field$conclusion(
						_user$project$Text_Component$text_fields(model.text_component))).input_id;
				var text_intro_input_id = _user$project$Text_Field$text_intro_attrs(
					_user$project$Text_Field$intro(
						_user$project$Text_Component$text_fields(model.text_component))).input_id;
				return _elm_lang$core$Native_Utils.eq(_p41, text_intro_input_id) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A3(_user$project$Text_Component$set_text_attribute, model.text_component, 'introduction', _p42)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : (_elm_lang$core$Native_Utils.eq(_p41, text_conclusion_input_id) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A3(_user$project$Text_Component$set_text_attribute, model.text_component, 'conclusion', _p42)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
			case 'AddTagInput':
				var _p44 = _p7._1;
				var _p43 = A2(_elm_lang$core$Dict$member, _p44, model.tags);
				if (_p43 === true) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								text_component: A2(_user$project$Text_Component$add_tag, model.text_component, _p44)
							}),
						_1: _user$project$Ports$clearInputText(_p7._0)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'DeleteTag':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							text_component: A2(_user$project$Text_Component$remove_tag, model.text_component, _p7._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteText':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$confirm('Are you sure you want to delete this text?')
				};
			case 'ConfirmTextDelete':
				var _p45 = _p7._0;
				if (_p45 === true) {
					var text = _user$project$Text_Component$text(model.text_component);
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A2(_user$project$Main$delete_text, model.flags.csrftoken, text)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TextDelete':
				if (_p7._0.ctor === 'Ok') {
					var _p47 = _p7._0._0;
					var _p46 = A2(_elm_lang$core$Debug$log, 'text delete', _p47);
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$load(_p47.redirect)
					};
				} else {
					var _p54 = _p7._0._0;
					var _p48 = _p54;
					switch (_p48.ctor) {
						case 'BadStatus':
							var _p51 = _p48._0;
							var _p49 = A2(_elm_lang$core$Debug$log, 'delete text error bad status', _p51);
							var _p50 = _user$project$Text_Decode$decodeRespErrors(_p51.body);
							if (_p50.ctor === 'Ok') {
								var errors_str = A2(
									_elm_lang$core$String$join,
									' and ',
									_elm_lang$core$Dict$values(_p50._0));
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											success_msg: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], 'Error trying to delete the text: ', errors_str))
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'BadPayload':
							var _p52 = A2(_elm_lang$core$Debug$log, 'delete text error bad payload', _p48._1);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						default:
							var _p53 = A2(_elm_lang$core$Debug$log, 'delete text error bad payload', _p54);
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			case 'ToggleTab':
				var _p56 = _p7._0;
				var post_toggle_cmd = function () {
					var _p55 = _elm_lang$core$Native_Utils.eq(_p56, _user$project$Text_Create$TextTab);
					if (_p55 === true) {
						return _user$project$Text_Component$reinitialize_ck_editors(model.text_component);
					} else {
						return _elm_lang$core$Platform_Cmd$none;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selected_tab: _p56}),
					_1: post_toggle_cmd
				};
			case 'LogOut':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Instructor_Profile$logout, model.profile, model.flags.csrftoken, _user$project$Text_Create$LoggedOut)
				};
			default:
				if (_p7._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Ports$redirect(_p7._0._0.redirect)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Main$retrieveTextDifficultyOptions = function () {
	var request = A2(
		_elm_lang$http$Http$get,
		A2(
			_elm_lang$core$String$join,
			'?',
			{
				ctor: '::',
				_0: _user$project$Config$text_api_endpoint,
				_1: {
					ctor: '::',
					_0: 'difficulties=list',
					_1: {ctor: '[]'}
				}
			}),
		_user$project$Text_Decode$textDifficultiesDecoder);
	return A2(_elm_lang$http$Http$send, _user$project$Text_Create$UpdateTextDifficultyOptions, request);
}();
var _user$project$Main$textJSONtoComponent = function (text) {
	var _p57 = text;
	if (_p57.ctor === 'Just') {
		return A2(
			_elm_lang$core$Task$attempt,
			_user$project$Text_Create$TextJSONDecode,
			function () {
				var _p58 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Text_Decode$textDecoder, _p57._0);
				if (_p58.ctor === 'Ok') {
					return _elm_lang$core$Task$succeed(
						_user$project$Text_Component$init(_p58._0));
				} else {
					return _elm_lang$core$Task$fail(_p58._0);
				}
			}());
	} else {
		return A2(
			_elm_lang$core$Task$attempt,
			function (_p59) {
				return _user$project$Text_Create$InitTextFieldEditors;
			},
			_elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing));
	}
};
var _user$project$Main$tagsToDict = function (tag_list) {
	return A2(
		_elm_lang$core$Task$attempt,
		_user$project$Text_Create$TextTagsDecode,
		_elm_lang$core$Task$succeed(
			_elm_lang$core$Dict$fromList(
				A2(
					_elm_lang$core$List$map,
					function (tag) {
						return {ctor: '_Tuple2', _0: tag, _1: tag};
					},
					tag_list))));
};
var _user$project$Main$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {
			flags: flags,
			mode: _user$project$Text_Create$CreateMode,
			success_msg: _elm_lang$core$Maybe$Nothing,
			error_msg: _elm_lang$core$Maybe$Nothing,
			profile: _user$project$Instructor_Profile$initProfile(flags.instructor_profile),
			menu_items: _user$project$Menu_Items$initMenuItems(flags),
			text_component: _user$project$Text_Component$emptyTextComponent,
			text_difficulties: {ctor: '[]'},
			text_translations_model: _elm_lang$core$Maybe$Nothing,
			tags: _elm_lang$core$Dict$fromList(
				{ctor: '[]'}),
			selected_tab: _user$project$Text_Create$TextTab,
			write_locked: false
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: _user$project$Main$retrieveTextDifficultyOptions,
				_1: {
					ctor: '::',
					_0: _user$project$Main$textJSONtoComponent(flags.text),
					_1: {
						ctor: '::',
						_0: _user$project$Main$tagsToDict(flags.tags),
						_1: {ctor: '[]'}
					}
				}
			})
	};
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions, update: _user$project$Main$update})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (instructor_profile) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (tags) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (text) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (translation_flags) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (csrftoken) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (menu_items) {
													return _elm_lang$core$Json_Decode$succeed(
														{instructor_profile: instructor_profile, tags: tags, text: text, translation_flags: translation_flags, csrftoken: csrftoken, menu_items: menu_items});
												},
												A2(
													_elm_lang$core$Json_Decode$field,
													'menu_items',
													_elm_lang$core$Json_Decode$list(
														A2(
															_elm_lang$core$Json_Decode$andThen,
															function (link) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (link_text) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (selected) {
																				return _elm_lang$core$Json_Decode$succeed(
																					{link: link, link_text: link_text, selected: selected});
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'selected', _elm_lang$core$Json_Decode$bool));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'link_text', _elm_lang$core$Json_Decode$string));
															},
															A2(_elm_lang$core$Json_Decode$field, 'link', _elm_lang$core$Json_Decode$string)))));
										},
										A2(_elm_lang$core$Json_Decode$field, 'csrftoken', _elm_lang$core$Json_Decode$string));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'translation_flags',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										function (csrftoken) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (group_word_endpoint_url) {
													return _elm_lang$core$Json_Decode$succeed(
														{csrftoken: csrftoken, group_word_endpoint_url: group_word_endpoint_url});
												},
												A2(_elm_lang$core$Json_Decode$field, 'group_word_endpoint_url', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'csrftoken', _elm_lang$core$Json_Decode$string))));
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'text',
							_elm_lang$core$Json_Decode$oneOf(
								{
									ctor: '::',
									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$value),
										_1: {ctor: '[]'}
									}
								})));
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'tags',
					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'instructor_profile',
			A2(
				_elm_lang$core$Json_Decode$andThen,
				function (id) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (invites) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (texts) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (username) {
											return _elm_lang$core$Json_Decode$succeed(
												{id: id, invites: invites, texts: texts, username: username});
										},
										A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'texts',
									_elm_lang$core$Json_Decode$list(
										A2(
											_elm_lang$core$Json_Decode$andThen,
											function (author) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													function (conclusion) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (created_by) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (created_dt) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			function (difficulty) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					function (edit_uri) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (id) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (introduction) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											function (last_modified_by) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													function (modified_dt) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															function (source) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	function (tags) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			function (text_section_count) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					function (title) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							function (write_locker) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{author: author, conclusion: conclusion, created_by: created_by, created_dt: created_dt, difficulty: difficulty, edit_uri: edit_uri, id: id, introduction: introduction, last_modified_by: last_modified_by, modified_dt: modified_dt, source: source, tags: tags, text_section_count: text_section_count, title: title, write_locker: write_locker});
																																							},
																																							A2(
																																								_elm_lang$core$Json_Decode$field,
																																								'write_locker',
																																								_elm_lang$core$Json_Decode$oneOf(
																																									{
																																										ctor: '::',
																																										_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																																										_1: {
																																											ctor: '::',
																																											_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																																											_1: {ctor: '[]'}
																																										}
																																									})));
																																					},
																																					A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string));
																																			},
																																			A2(_elm_lang$core$Json_Decode$field, 'text_section_count', _elm_lang$core$Json_Decode$int));
																																	},
																																	A2(
																																		_elm_lang$core$Json_Decode$field,
																																		'tags',
																																		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
																															},
																															A2(_elm_lang$core$Json_Decode$field, 'source', _elm_lang$core$Json_Decode$string));
																													},
																													A2(_elm_lang$core$Json_Decode$field, 'modified_dt', _elm_lang$core$Json_Decode$string));
																											},
																											A2(
																												_elm_lang$core$Json_Decode$field,
																												'last_modified_by',
																												_elm_lang$core$Json_Decode$oneOf(
																													{
																														ctor: '::',
																														_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																														_1: {
																															ctor: '::',
																															_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																															_1: {ctor: '[]'}
																														}
																													})));
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'introduction', _elm_lang$core$Json_Decode$string));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int));
																					},
																					A2(_elm_lang$core$Json_Decode$field, 'edit_uri', _elm_lang$core$Json_Decode$string));
																			},
																			A2(_elm_lang$core$Json_Decode$field, 'difficulty', _elm_lang$core$Json_Decode$string));
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'created_dt', _elm_lang$core$Json_Decode$string));
															},
															A2(_elm_lang$core$Json_Decode$field, 'created_by', _elm_lang$core$Json_Decode$string));
													},
													A2(
														_elm_lang$core$Json_Decode$field,
														'conclusion',
														_elm_lang$core$Json_Decode$oneOf(
															{
																ctor: '::',
																_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																_1: {
																	ctor: '::',
																	_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																	_1: {ctor: '[]'}
																}
															})));
											},
											A2(_elm_lang$core$Json_Decode$field, 'author', _elm_lang$core$Json_Decode$string)))));
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'invites',
							_elm_lang$core$Json_Decode$oneOf(
								{
									ctor: '::',
									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Json_Decode$map,
											_elm_lang$core$Maybe$Just,
											_elm_lang$core$Json_Decode$list(
												A2(
													_elm_lang$core$Json_Decode$andThen,
													function (email) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (expiration) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	function (invite_code) {
																		return _elm_lang$core$Json_Decode$succeed(
																			{email: email, expiration: expiration, invite_code: invite_code});
																	},
																	A2(_elm_lang$core$Json_Decode$field, 'invite_code', _elm_lang$core$Json_Decode$string));
															},
															A2(_elm_lang$core$Json_Decode$field, 'expiration', _elm_lang$core$Json_Decode$string));
													},
													A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string)))),
										_1: {ctor: '[]'}
									}
								})));
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'id',
					_elm_lang$core$Json_Decode$oneOf(
						{
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int),
								_1: {ctor: '[]'}
							}
						}))))));

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _user$project$Main$main !== 'undefined') {
    _user$project$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

